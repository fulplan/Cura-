{"file_contents":{"README.md":{"content":"# Penkora - Content Management System\n\nA modern, responsive CMS built with React, TypeScript, and Express. Designed for seamless content creation and management across desktop, tablet, and mobile devices.\n\n## Current Status: Core Authentication & Database Complete ✅\n\nPenkora CMS now has a fully functional authentication system, database integration, and user profile management. Ready for production use as a basic CMS platform.\n\n## Development Roadmap & Implementation Checklist\n\n### ✅ **Foundation (Completed)**\n- [x] Modern React + TypeScript + Express stack\n- [x] Responsive design with Tailwind CSS\n- [x] Component architecture with Radix UI\n- [x] Mobile/tablet/desktop layouts\n- [x] Professional theming with light/dark mode support\n- [x] Basic navigation structure\n\n### ✅ **Phase 1: Core Foundation (Completed)**\n- [x] **1.1 URL Routing System**\n  - [x] Proper wouter URL routing implemented\n  - [x] Routes: /dashboard, /posts, /posts/new, /media, /users, /settings, etc.\n  - [x] Direct navigation and bookmark-able URLs\n  - [x] 404 page handling\n\n- [x] **1.2 Database Integration**\n  - [x] PostgreSQL database schema implemented\n  - [x] Tables for: users, posts, media, categories, settings, analytics\n  - [x] Drizzle ORM with full CRUD operations\n  - [x] Database migrations and seeding\n  - [x] Comprehensive error handling and logging\n\n- [x] **1.3 Backend API Endpoints**\n  - [x] Posts API: Full CRUD operations with categories and tags\n  - [x] Users API: User management and profiles\n  - [x] Media API: File upload, storage, and management\n  - [x] Categories/Tags API: Content organization\n  - [x] Settings API: Site configuration management\n  - [x] All mock data replaced with real database queries\n\n- [x] **1.4 Authentication System**\n  - [x] User login functionality with bcrypt password hashing\n  - [x] Session management with PostgreSQL-backed sessions\n  - [x] Protected routes and middleware\n  - [x] Role-based access control (admin, editor, author)\n  - [x] Logout and session cleanup\n  - [x] User profile settings with password change functionality\n\n### 🎯 **Ready to Use Features**\n- **✅ User Authentication**: Login/logout with secure session management\n- **✅ User Profile Settings**: Update display name, email, and password\n- **✅ Dashboard**: Analytics and site overview with real data\n- **✅ Database Management**: Full PostgreSQL integration with Drizzle ORM\n- **✅ Site Settings**: Comprehensive admin configuration panel\n- **✅ Responsive Design**: Works perfectly on desktop, tablet, and mobile\n\n### 📋 **Phase 2: Content Management Features (Planned)**\n- [ ] **2.1 Post Creation & Editing**\n  - [ ] Rich text editor with formatting options\n  - [ ] Draft saving and auto-save functionality\n  - [ ] Publish/unpublish posts\n  - [ ] Post scheduling system\n  - [ ] SEO metadata fields (title, description, keywords)\n\n- [ ] **2.2 Media Library**\n  - [ ] Drag-and-drop file upload\n  - [ ] Image optimization and resizing\n  - [ ] File organization and folders\n  - [ ] Search and filter media files\n  - [ ] Bulk operations (delete, move, organize)\n\n- [ ] **2.3 Content Organization**\n  - [ ] Categories and tags management\n  - [ ] Content categorization\n  - [ ] Hierarchical content structure\n  - [ ] Featured content selection\n  - [ ] Content status workflows\n\n- [ ] **2.4 User Management**\n  - [ ] Create/edit user accounts\n  - [ ] Role assignment and permissions\n  - [ ] User profile management\n  - [ ] Activity tracking and logs\n\n### 📱 **Phase 3: Enhanced Mobile & UX (Planned)**\n- [ ] **3.1 Mobile Optimization**\n  - [ ] Swipe gestures for navigation\n  - [ ] Touch-optimized editing interface\n  - [ ] Mobile-first form designs\n  - [ ] Responsive image handling\n\n- [ ] **3.2 Search & Filtering**\n  - [ ] Global search across all content\n  - [ ] Advanced filtering options\n  - [ ] Real-time search suggestions\n  - [ ] Search result highlighting\n\n- [ ] **3.3 Real-time Features**\n  - [ ] Live notifications system\n  - [ ] Real-time collaboration on posts\n  - [ ] Activity feeds and dashboards\n  - [ ] WebSocket integration\n\n### 🚀 **Phase 4: Advanced Features (Planned)**\n- [ ] **4.1 Analytics & Reporting**\n  - [ ] Content performance analytics\n  - [ ] User engagement metrics\n  - [ ] Traffic and view statistics\n  - [ ] Export reports functionality\n\n- [ ] **4.2 SEO & Performance**\n  - [ ] SEO optimization tools\n  - [ ] Meta tag management\n  - [ ] Sitemap generation\n  - [ ] Performance monitoring\n\n- [ ] **4.3 Advanced Content Features**\n  - [ ] Content versioning and history\n  - [ ] Content templates\n  - [ ] Bulk content operations\n  - [ ] Content import/export\n\n- [ ] **4.4 System Administration**\n  - [ ] Database backup and restore\n  - [ ] System health monitoring\n  - [ ] Configuration management\n  - [ ] Security audit tools\n\n## What We Currently Lack (Critical Issues)\n\n### 🔴 **High Priority Issues**\n1. **No Real Functionality**: All buttons and actions only log to console\n2. **Mock Data Everywhere**: No real database connections or API calls\n3. **State-Based Routing**: Should use proper URL routing for navigation\n4. **No Authentication**: Missing user login/logout and security\n5. **No Data Persistence**: Changes don't save anywhere\n\n### 🟡 **Medium Priority Issues**\n1. **No Content Creation**: Cannot actually create or edit posts\n2. **No File Upload**: Media library is purely visual\n3. **No User Management**: Cannot manage users or permissions\n4. **No Search Functionality**: Search inputs don't work\n5. **No Real Notifications**: Notification system is placeholder\n\n## Technology Stack\n\n### Frontend\n- **React 18** with TypeScript\n- **Wouter** for routing\n- **Tailwind CSS** for styling\n- **Radix UI** for component primitives\n- **React Query** for data fetching\n- **Lucide React** for icons\n\n### Backend\n- **Express.js** with TypeScript\n- **PostgreSQL** database\n- **Drizzle ORM** for database operations\n- **Express Session** for authentication\n- **Passport.js** for auth strategies\n\n### Development Tools\n- **Vite** for build tooling\n- **ESBuild** for production builds\n- **TypeScript** for type safety\n- **Tailwind** for responsive design\n\n## Getting Started\n\n### Prerequisites\n- Node.js 18+ \n- PostgreSQL database\n\n### Quick Start\n```bash\n# Install dependencies\nnpm install\n\n# Set up database (PostgreSQL required)\nnpm run db:push\n\n# Start development server\nnpm run dev\n```\n\nThe application will be available at `http://localhost:5000`\n\n### Test Accounts\nAfter running `npm run db:push`, the following test accounts are available:\n\n**Admin Account:**\n- Username: `admin`\n- Password: `admin123`\n- Role: Administrator (full access to all features)\n\n**Editor Account:**\n- Username: `editor`  \n- Password: `editor123`\n- Role: Editor (content management access)\n\n### Environment Variables\nThe application is pre-configured for Replit environment. For local development, create a `.env` file with:\n```\nDATABASE_URL=your_postgresql_connection_string\nSESSION_SECRET=your_session_secret_key\nNODE_ENV=development\nPORT=5000\n```\n\n### Key Features Available\n- **Login/Logout**: Secure authentication with session management\n- **User Profile**: Update display name, email, and password\n- **Settings Panel**: Complete site configuration options\n- **Dashboard**: Real analytics and content overview\n- **Responsive Design**: Mobile, tablet, and desktop optimized\n\n## Project Structure\n```\n├── client/                 # Frontend React application\n│   ├── src/\n│   │   ├── components/     # UI components\n│   │   ├── pages/         # Page components\n│   │   ├── hooks/         # React hooks\n│   │   └── lib/           # Utilities and configuration\n├── server/                # Backend Express application\n│   ├── index.ts          # Server entry point\n│   ├── routes.ts         # API routes\n│   └── db.ts             # Database configuration\n├── shared/               # Shared types and schemas\n└── README.md            # This file\n```\n\n## Contributing\n\nThis project follows a phase-based development approach. Check the roadmap above for current priorities and implementation status.\n\n## Current Implementation Status\n\n**Phase 1 Progress**: 🚧 In Development\n- Working on core routing and database integration\n- Implementing real API endpoints to replace mock data\n- Building authentication system for user management\n\n**Next Steps**: Complete Phase 1 foundation before moving to content creation features in Phase 2.","size_bytes":8481},"design_guidelines.md":{"content":"# PWS Admin CMS Design Guidelines\n\n## Design Approach\n**System-Based Approach**: Using Fluent Design principles optimized for productivity and information-dense applications. This enterprise-focused CMS requires clear hierarchy, efficient workflows, and consistent patterns that support complex administrative tasks.\n\n## Core Design Elements\n\n### Color Palette\n**Dark Mode Primary**:\n- Background: 210 15% 8% (main background)\n- Surface: 210 12% 12% (cards, panels)\n- Border: 210 10% 20% (subtle dividers)\n- Text Primary: 210 5% 95% (main content)\n- Text Secondary: 210 5% 70% (labels, metadata)\n\n**Light Mode Primary**:\n- Background: 210 5% 98% (main background)\n- Surface: 0 0% 100% (cards, panels)\n- Border: 210 10% 90% (subtle dividers)\n- Text Primary: 210 15% 15% (main content)\n- Text Secondary: 210 10% 45% (labels, metadata)\n\n**Brand Colors**:\n- Primary: 210 85% 55% (actions, links)\n- Success: 120 75% 45% (published status)\n- Warning: 45 90% 55% (drafts, pending)\n- Danger: 0 75% 55% (delete, errors)\n\n### Typography\n**Font System**: Inter via Google Fonts CDN\n- Headlines: 600 weight, 1.2 line-height\n- Body: 400 weight, 1.5 line-height  \n- UI Labels: 500 weight, 1.4 line-height\n- Code/Meta: 400 weight, monospace fallback\n\n### Layout System\n**Spacing Units**: Tailwind classes using 2, 4, 6, 8, 12, 16 units\n- Micro spacing: p-2, gap-2\n- Component spacing: p-4, m-6\n- Section spacing: p-8, gap-12\n- Major layout: p-16\n\n### Component Library\n\n**Navigation**:\n- Fixed top bar (64px height) with search, notifications, profile\n- Persistent left sidebar (280px width) with collapsible sections\n- Breadcrumb navigation for deep content paths\n\n**Data Display**:\n- Card-based content blocks with subtle shadows\n- Data tables with sortable headers and pagination\n- Status badges with color-coded states (draft, published, scheduled)\n- Progress indicators for upload/processing states\n\n**Forms & Controls**:\n- Floating label inputs with focus states\n- Rich text editor with toolbar docking\n- Drag-and-drop zones with visual feedback\n- Modal overlays for focused tasks (editing, uploads)\n\n**Dashboard Widgets**:\n- Metric cards with trend indicators\n- Recent activity lists with timestamps\n- Quick action buttons with consistent iconography\n- Calendar widget for scheduling overview\n\n### Interaction Patterns\n\n**Content Management**:\n- Bulk selection with checkbox arrays\n- Inline editing for quick updates\n- Contextual menus (right-click) for power users\n- Toast notifications for action feedback\n\n**Layout Manager**:\n- Visual drag-and-drop with snap guides\n- Live preview panels\n- Section templates with thumbnail previews\n- Undo/redo functionality\n\n### Visual Hierarchy\n- Clear content zones with consistent padding\n- Typography scale emphasizing scannable headings\n- Strategic use of color for status and priority\n- Generous whitespace for reduced cognitive load\n\n### Responsive Behavior\n- Sidebar collapses to icons on tablets\n- Dashboard widgets stack vertically on mobile\n- Tables become scrollable cards on small screens\n- Touch-friendly controls (44px minimum target)\n\nThis design system prioritizes efficiency and clarity for content creators while maintaining visual polish that reflects the quality of the CMS platform.","size_bytes":3233},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        success: {\n          DEFAULT: \"hsl(var(--success) / <alpha-value>)\",\n          foreground: \"hsl(var(--success-foreground) / <alpha-value>)\",\n        },\n        warning: {\n          DEFAULT: \"hsl(var(--warning) / <alpha-value>)\",\n          foreground: \"hsl(var(--warning-foreground) / <alpha-value>)\",\n        },\n        info: {\n          DEFAULT: \"hsl(var(--info) / <alpha-value>)\",\n          foreground: \"hsl(var(--info-foreground) / <alpha-value>)\",\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4521},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    host: \"0.0.0.0\",\n    port: 5173,\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1008},"server/db.ts":{"content":"import { drizzle } from 'drizzle-orm/postgres-js';\nimport postgres from 'postgres';\nimport * as schema from \"@shared/schema\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\n// Use postgres-js driver for better SSL compatibility in Replit environment\nconst sql = postgres(process.env.DATABASE_URL, {\n  ssl: process.env.NODE_ENV === 'production' ? 'require' : 'allow',\n  max: 20,\n  idle_timeout: 20,\n  connect_timeout: 60\n});\n\nexport const db = drizzle(sql, { schema });\n","size_bytes":556},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Enhanced development logging middleware\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  // Log incoming requests in development\n  if (app.get(\"env\") === \"development\" && path.startsWith(\"/api\")) {\n    log(`🌐 [REQUEST] ${req.method} ${path} - ${req.ip}`);\n    if (req.body && Object.keys(req.body).length > 0) {\n      log(`📦 [REQUEST BODY] ${JSON.stringify(req.body, null, 2)}`);\n    }\n  }\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n      \n      // Enhanced development response logging\n      if (app.get(\"env\") === \"development\") {\n        const status = res.statusCode >= 400 ? '❌' : res.statusCode >= 300 ? '⚠️' : '✅';\n        log(`${status} [RESPONSE] ${req.method} ${path} - ${res.statusCode} (${duration}ms)`);\n        if (capturedJsonResponse && res.statusCode >= 400) {\n          log(`🚨 [ERROR RESPONSE] ${JSON.stringify(capturedJsonResponse, null, 2)}`);\n        }\n      }\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    // Avoid double-send errors if headers already sent\n    if (res.headersSent) {\n      return _next(err);\n    }\n\n    res.status(status).json({ message });\n    \n    // Log the error but don't rethrow to avoid crashing the server\n    if (app.get(\"env\") === \"development\") {\n      log(`🚨 [SERVER ERROR] ${err.stack || err.message}`);\n    }\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, async () => {\n    log(`serving on port ${port}`);\n    \n    // Initialize email service on startup\n    try {\n      const { storage } = await import('./storage');\n      await storage.initializeEmailService();\n      log(`📧 Email service initialization completed`);\n    } catch (error) {\n      log(`❌ Failed to initialize email service on startup: ${error}`);\n    }\n  });\n})();\n","size_bytes":3487},"server/routes.ts":{"content":"import type { Express, Request, Response, NextFunction } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { \n  insertUserSchema, \n  insertPostSchema,\n  insertCategorySchema,\n  insertTagSchema,\n  insertMediaSchema \n} from \"@shared/schema\";\nimport { z } from \"zod\";\nimport session from \"express-session\";\nimport MemoryStore from \"memorystore\";\nimport { db } from \"./db\";\nimport multer from \"multer\";\nimport { join } from \"path\";\nimport { mkdirSync, existsSync } from \"fs\";\nimport { fileURLToPath } from \"url\";\nimport bcrypt from \"bcryptjs\";\n\n// Helper function for error responses with proper status codes\nconst sendError = (res: any, status: number, message: string) => {\n  res.status(status).json({ error: message });\n};\n\n// Helper function to map database errors to proper HTTP status codes\nconst handleDbError = (error: any, res: any, defaultMessage: string) => {\n  if (error instanceof Error) {\n    if (error.message.includes(\"unique\")) {\n      return sendError(res, 409, \"Resource already exists\");\n    }\n    if (error.message.includes(\"foreign key\")) {\n      return sendError(res, 422, \"Invalid reference\");\n    }\n    if (error.message.includes(\"not found\")) {\n      return sendError(res, 404, \"Resource not found\");\n    }\n    if (error.message.includes(\"Validation failed\")) {\n      return sendError(res, 422, error.message);\n    }\n  }\n  sendError(res, 500, defaultMessage);\n};\n\n// Helper function for validation\nconst validateBody = (schema: z.ZodSchema, body: any) => {\n  const result = schema.safeParse(body);\n  if (!result.success) {\n    throw new Error(`Validation failed: ${result.error.message}`);\n  }\n  return result.data;\n};\n\n// Authentication middleware\nconst requireAuth = (req: any, res: Response, next: NextFunction) => {\n  if (!req.session?.user) {\n    return sendError(res, 401, \"Authentication required\");\n  }\n  next();\n};\n\n// Admin authorization middleware\nconst requireAdmin = (req: any, res: Response, next: NextFunction) => {\n  if (!req.session?.user) {\n    return sendError(res, 401, \"Authentication required\");\n  }\n  if (req.session.user.role !== \"admin\") {\n    return sendError(res, 403, \"Admin access required\");\n  }\n  next();\n};\n\n// Editor/Admin authorization middleware  \nconst requireEditor = (req: any, res: Response, next: NextFunction) => {\n  if (!req.session?.user) {\n    return sendError(res, 401, \"Authentication required\");\n  }\n  if (![\"admin\", \"editor\"].includes(req.session.user.role)) {\n    return sendError(res, 403, \"Editor or admin access required\");\n  }\n  next();\n};\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Ensure uploads directory exists\n  const uploadsDir = join(process.cwd(), 'public', 'uploads');\n  if (!existsSync(uploadsDir)) {\n    mkdirSync(uploadsDir, { recursive: true });\n  }\n\n  // Configure multer for file uploads\n  const storage_multer = multer.diskStorage({\n    destination: (req, file, cb) => {\n      cb(null, uploadsDir);\n    },\n    filename: (req, file, cb) => {\n      // Generate unique filename with timestamp and random string\n      const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\n      const extension = file.originalname.split('.').pop();\n      cb(null, `${file.fieldname}-${uniqueSuffix}.${extension}`);\n    }\n  });\n\n  const upload = multer({\n    storage: storage_multer,\n    limits: {\n      fileSize: 10 * 1024 * 1024, // 10MB limit\n      files: 10 // Maximum 10 files per upload\n    },\n    fileFilter: (req, file, cb) => {\n      // Allow images, videos, audio, and documents\n      const allowedTypes = [\n        'image/', 'video/', 'audio/',\n        'application/pdf', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n        'text/plain', 'text/csv', 'application/json'\n      ];\n      \n      const isAllowed = allowedTypes.some(type => file.mimetype.startsWith(type));\n      if (isAllowed) {\n        cb(null, true);\n      } else {\n        cb(null, false);\n      }\n    }\n  });\n\n  // Configure sessions with MemoryStore (suitable for serverless)\n  const SessionStore = MemoryStore(session);\n  \n  // Require session secret in production\n  if (process.env.NODE_ENV === \"production\" && !process.env.SESSION_SECRET) {\n    throw new Error(\"SESSION_SECRET environment variable is required in production\");\n  }\n\n  app.use(session({\n    store: new SessionStore({\n      checkPeriod: 86400000 // prune expired entries every 24h\n    }),\n    secret: process.env.SESSION_SECRET || \"dev-secret-change-for-production\",\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === \"production\",\n      sameSite: \"strict\",\n      maxAge: 24 * 60 * 60 * 1000 // 24 hours\n    }\n  }));\n\n  // Health check endpoint\n  app.get(\"/api/health\", (_req, res) => {\n    res.json({ \n      status: \"ok\", \n      timestamp: new Date().toISOString(),\n      service: \"penkora-cms\"\n    });\n  });\n\n  // Simple rate limiting for login attempts\n  const loginAttempts = new Map<string, { count: number; lastAttempt: number }>();\n  \n  const rateLimitLogin = (req: any, res: any, next: any) => {\n    const ip = req.ip || req.connection.remoteAddress;\n    const now = Date.now();\n    const resetTime = 15 * 60 * 1000; // 15 minutes\n    const maxAttempts = 5;\n\n    const attempt = loginAttempts.get(ip);\n    if (attempt && now - attempt.lastAttempt < resetTime) {\n      if (attempt.count >= maxAttempts) {\n        return sendError(res, 429, \"Too many login attempts. Try again in 15 minutes.\");\n      }\n      attempt.count++;\n      attempt.lastAttempt = now;\n    } else {\n      loginAttempts.set(ip, { count: 1, lastAttempt: now });\n    }\n\n    next();\n  };\n\n  // Authentication Routes\n  app.post(\"/api/auth/login\", rateLimitLogin, async (req: any, res) => {\n    try {\n      const { username, password } = req.body;\n      \n      if (!username || !password) {\n        return sendError(res, 400, \"Username and password are required\");\n      }\n\n      const user = await storage.verifyPassword(username, password);\n      if (!user) {\n        return sendError(res, 401, \"Invalid credentials\");\n      }\n\n      // Regenerate session to prevent session fixation\n      req.session.regenerate((err: any) => {\n        if (err) {\n          console.error(\"Session regeneration error:\", err);\n          return sendError(res, 500, \"Login failed\");\n        }\n\n        // Store user in new session\n        req.session.user = {\n          id: user.id,\n          username: user.username,\n          role: user.role,\n          displayName: user.displayName\n        };\n\n        req.session.save((err: any) => {\n          if (err) {\n            console.error(\"Session save error:\", err);\n            return sendError(res, 500, \"Login failed\");\n          }\n\n          // Return user without password\n          const { password: _, ...safeUser } = user;\n          res.json({ user: safeUser, message: \"Login successful\" });\n        });\n      });\n\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      sendError(res, 500, \"Login failed\");\n    }\n  });\n\n  app.post(\"/api/auth/logout\", (req: any, res) => {\n    req.session.destroy((err: any) => {\n      if (err) {\n        console.error(\"Logout error:\", err);\n        return sendError(res, 500, \"Logout failed\");\n      }\n      res.json({ message: \"Logout successful\" });\n    });\n  });\n\n  app.get(\"/api/auth/me\", (req: any, res) => {\n    if (!req.session?.user) {\n      return sendError(res, 401, \"Not authenticated\");\n    }\n    res.json({ user: req.session.user });\n  });\n\n  app.put(\"/api/auth/profile\", requireAuth, async (req: any, res) => {\n    try {\n      const userId = req.session.user.id;\n      const { displayName, email, currentPassword, newPassword } = req.body;\n\n      if (!displayName || !email) {\n        return sendError(res, 400, \"Display name and email are required\");\n      }\n\n      // Validate email format\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      if (!emailRegex.test(email)) {\n        return sendError(res, 400, \"Invalid email format\");\n      }\n\n      // If updating password, verify current password\n      if (newPassword) {\n        if (!currentPassword) {\n          return sendError(res, 400, \"Current password is required to change password\");\n        }\n\n        const user = await storage.getUser(userId);\n        if (!user) {\n          return sendError(res, 404, \"User not found\");\n        }\n\n        const isValidPassword = await bcrypt.compare(currentPassword, user.password);\n        if (!isValidPassword) {\n          return sendError(res, 400, \"Current password is incorrect\");\n        }\n\n        if (newPassword.length < 8) {\n          return sendError(res, 400, \"New password must be at least 8 characters long\");\n        }\n      }\n\n      // Prepare update data\n      const updateData: any = {\n        displayName,\n        email\n      };\n\n      // Hash new password if provided\n      if (newPassword) {\n        updateData.password = await bcrypt.hash(newPassword, 12);\n      }\n\n      const updatedUser = await storage.updateUser(userId, updateData);\n      if (!updatedUser) {\n        return sendError(res, 404, \"User not found\");\n      }\n\n      // Update session with new user data\n      req.session.user = {\n        id: updatedUser.id,\n        username: updatedUser.username,\n        role: updatedUser.role,\n        displayName: updatedUser.displayName\n      };\n\n      // Return user without password\n      const { password: _, ...safeUser } = updatedUser;\n      res.json({ user: safeUser, message: \"Profile updated successfully\" });\n\n    } catch (error) {\n      console.error(\"Profile update error:\", error);\n      sendError(res, 500, \"Failed to update profile\");\n    }\n  });\n\n  // Dashboard & Analytics Routes\n  app.get(\"/api/dashboard/stats\", async (_req, res) => {\n    try {\n      const stats = await storage.getDashboardStats();\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Dashboard stats error:\", error);\n      sendError(res, 500, \"Failed to fetch dashboard stats\");\n    }\n  });\n\n  app.get(\"/api/analytics/popular-posts\", async (req, res) => {\n    try {\n      const limit = parseInt(req.query.limit as string) || 10;\n      const posts = await storage.getPopularPosts(limit);\n      res.json(posts);\n    } catch (error) {\n      console.error(\"Popular posts error:\", error);\n      sendError(res, 500, \"Failed to fetch popular posts\");\n    }\n  });\n\n  // User Routes (Admin only)\n  app.get(\"/api/users\", requireAdmin, async (_req, res) => {\n    try {\n      const users = await storage.listUsers();\n      // Remove passwords from response\n      const safeUsers = users.map(({ password, ...user }) => user);\n      res.json(safeUsers);\n    } catch (error) {\n      console.error(\"List users error:\", error);\n      sendError(res, 500, \"Failed to fetch users\");\n    }\n  });\n\n  app.post(\"/api/users\", requireAdmin, async (req, res) => {\n    try {\n      const userData = validateBody(insertUserSchema, req.body);\n      const user = await storage.createUser(userData);\n      // Remove password from response\n      const { password, ...safeUser } = user;\n      res.status(201).json(safeUser);\n    } catch (error) {\n      console.error(\"Create user error:\", error);\n      handleDbError(error, res, \"Failed to create user\");\n    }\n  });\n\n  app.get(\"/api/users/:id\", requireAdmin, async (req, res) => {\n    try {\n      const user = await storage.getUser(req.params.id);\n      if (!user) {\n        return sendError(res, 404, \"User not found\");\n      }\n      const { password, ...safeUser } = user;\n      res.json(safeUser);\n    } catch (error) {\n      console.error(\"Get user error:\", error);\n      sendError(res, 500, \"Failed to fetch user\");\n    }\n  });\n\n  app.put(\"/api/users/:id\", requireAdmin, async (req, res) => {\n    try {\n      const userData = validateBody(insertUserSchema.partial(), req.body);\n      const user = await storage.updateUser(req.params.id, userData);\n      if (!user) {\n        return sendError(res, 404, \"User not found\");\n      }\n      const { password, ...safeUser } = user;\n      res.json(safeUser);\n    } catch (error) {\n      console.error(\"Update user error:\", error);\n      handleDbError(error, res, \"Failed to update user\");\n    }\n  });\n\n  app.delete(\"/api/users/:id\", requireAdmin, async (req, res) => {\n    try {\n      const success = await storage.deleteUser(req.params.id);\n      if (!success) {\n        return sendError(res, 404, \"User not found\");\n      }\n      res.json({ message: \"User deleted successfully\" });\n    } catch (error) {\n      console.error(\"Delete user error:\", error);\n      sendError(res, 500, \"Failed to delete user\");\n    }\n  });\n\n  // Category Routes\n  app.get(\"/api/categories\", async (_req, res) => {\n    try {\n      const categories = await storage.listCategories();\n      res.json(categories);\n    } catch (error) {\n      console.error(\"List categories error:\", error);\n      sendError(res, 500, \"Failed to fetch categories\");\n    }\n  });\n\n  app.post(\"/api/categories\", requireEditor, async (req, res) => {\n    try {\n      const categoryData = validateBody(insertCategorySchema, req.body);\n      const category = await storage.createCategory(categoryData);\n      res.status(201).json(category);\n    } catch (error) {\n      console.error(\"Create category error:\", error);\n      handleDbError(error, res, \"Failed to create category\");\n    }\n  });\n\n  app.get(\"/api/categories/:id\", async (req, res) => {\n    try {\n      const category = await storage.getCategory(req.params.id);\n      if (!category) {\n        return sendError(res, 404, \"Category not found\");\n      }\n      res.json(category);\n    } catch (error) {\n      console.error(\"Get category error:\", error);\n      sendError(res, 500, \"Failed to fetch category\");\n    }\n  });\n\n  app.put(\"/api/categories/:id\", requireEditor, async (req, res) => {\n    try {\n      const categoryData = validateBody(insertCategorySchema.partial(), req.body);\n      const category = await storage.updateCategory(req.params.id, categoryData);\n      if (!category) {\n        return sendError(res, 404, \"Category not found\");\n      }\n      res.json(category);\n    } catch (error) {\n      console.error(\"Update category error:\", error);\n      sendError(res, 400, error instanceof Error ? error.message : \"Failed to update category\");\n    }\n  });\n\n  app.delete(\"/api/categories/:id\", requireEditor, async (req, res) => {\n    try {\n      const success = await storage.deleteCategory(req.params.id);\n      if (!success) {\n        return sendError(res, 404, \"Category not found\");\n      }\n      res.json({ message: \"Category deleted successfully\" });\n    } catch (error) {\n      console.error(\"Delete category error:\", error);\n      sendError(res, 500, \"Failed to delete category\");\n    }\n  });\n\n  // Tag Routes\n  app.get(\"/api/tags\", async (_req, res) => {\n    try {\n      const tags = await storage.listTags();\n      res.json(tags);\n    } catch (error) {\n      console.error(\"List tags error:\", error);\n      sendError(res, 500, \"Failed to fetch tags\");\n    }\n  });\n\n  app.post(\"/api/tags\", async (req, res) => {\n    try {\n      const tagData = validateBody(insertTagSchema, req.body);\n      const tag = await storage.createTag(tagData);\n      res.status(201).json(tag);\n    } catch (error) {\n      console.error(\"Create tag error:\", error);\n      sendError(res, 400, error instanceof Error ? error.message : \"Failed to create tag\");\n    }\n  });\n\n  app.get(\"/api/tags/:id\", async (req, res) => {\n    try {\n      const tag = await storage.getTag(req.params.id);\n      if (!tag) {\n        return sendError(res, 404, \"Tag not found\");\n      }\n      res.json(tag);\n    } catch (error) {\n      console.error(\"Get tag error:\", error);\n      sendError(res, 500, \"Failed to fetch tag\");\n    }\n  });\n\n  app.put(\"/api/tags/:id\", async (req, res) => {\n    try {\n      const tagData = validateBody(insertTagSchema.partial(), req.body);\n      const tag = await storage.updateTag(req.params.id, tagData);\n      if (!tag) {\n        return sendError(res, 404, \"Tag not found\");\n      }\n      res.json(tag);\n    } catch (error) {\n      console.error(\"Update tag error:\", error);\n      sendError(res, 400, error instanceof Error ? error.message : \"Failed to update tag\");\n    }\n  });\n\n  app.delete(\"/api/tags/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteTag(req.params.id);\n      if (!success) {\n        return sendError(res, 404, \"Tag not found\");\n      }\n      res.json({ message: \"Tag deleted successfully\" });\n    } catch (error) {\n      console.error(\"Delete tag error:\", error);\n      sendError(res, 500, \"Failed to delete tag\");\n    }\n  });\n\n  // Post Routes\n  app.get(\"/api/posts\", async (req, res) => {\n    try {\n      const { \n        status, \n        categoryId, \n        authorId, \n        limit = \"20\", \n        offset = \"0\",\n        detailed = \"false\" \n      } = req.query;\n\n      const filters = {\n        status: status as string,\n        categoryId: categoryId as string,\n        authorId: authorId as string,\n        limit: parseInt(limit as string),\n        offset: parseInt(offset as string)\n      };\n\n      // Remove undefined values\n      Object.keys(filters).forEach(key => {\n        if (filters[key as keyof typeof filters] === undefined || filters[key as keyof typeof filters] === \"\") {\n          delete filters[key as keyof typeof filters];\n        }\n      });\n\n      if (detailed === \"true\") {\n        const posts = await storage.getPostsWithDetails();\n        res.json(posts);\n      } else {\n        const result = await storage.listPosts(filters);\n        res.json(result);\n      }\n    } catch (error) {\n      console.error(\"List posts error:\", error);\n      sendError(res, 500, \"Failed to fetch posts\");\n    }\n  });\n\n  app.post(\"/api/posts\", requireAuth, async (req: any, res) => {\n    try {\n      const { tags: tagIds, ...postData } = req.body;\n      \n      // Use authenticated user as author\n      const authorId = req.session.user.id;\n\n      const validatedPost = validateBody(insertPostSchema, postData);\n      const post = await storage.createPost(validatedPost, authorId, tagIds);\n      res.status(201).json(post);\n    } catch (error) {\n      console.error(\"Create post error:\", error);\n      handleDbError(error, res, \"Failed to create post\");\n    }\n  });\n\n  app.get(\"/api/posts/:id\", async (req, res) => {\n    try {\n      const post = await storage.getPost(req.params.id);\n      if (!post) {\n        return sendError(res, 404, \"Post not found\");\n      }\n      \n      // Get associated tags\n      const tags = await storage.getPostTags(req.params.id);\n      res.json({ ...post, tags });\n    } catch (error) {\n      console.error(\"Get post error:\", error);\n      sendError(res, 500, \"Failed to fetch post\");\n    }\n  });\n\n  app.get(\"/api/posts/slug/:slug\", async (req, res) => {\n    try {\n      const post = await storage.getPostBySlug(req.params.slug);\n      if (!post) {\n        return sendError(res, 404, \"Post not found\");\n      }\n      \n      // Track view\n      await storage.incrementPostViews(post.id);\n      await storage.trackEvent(\"post_view\", post.id, \"post\");\n      \n      // Get associated tags\n      const tags = await storage.getPostTags(post.id);\n      res.json({ ...post, tags });\n    } catch (error) {\n      console.error(\"Get post by slug error:\", error);\n      sendError(res, 500, \"Failed to fetch post\");\n    }\n  });\n\n  app.put(\"/api/posts/:id\", requireAuth, async (req, res) => {\n    try {\n      const { tags: tagIds, ...postData } = req.body;\n      const validatedPost = validateBody(insertPostSchema.partial(), postData);\n      const post = await storage.updatePost(req.params.id, validatedPost, tagIds);\n      if (!post) {\n        return sendError(res, 404, \"Post not found\");\n      }\n      res.json(post);\n    } catch (error) {\n      console.error(\"Update post error:\", error);\n      sendError(res, 400, error instanceof Error ? error.message : \"Failed to update post\");\n    }\n  });\n\n  app.delete(\"/api/posts/:id\", requireEditor, async (req, res) => {\n    try {\n      const success = await storage.softDeletePost(req.params.id);\n      if (!success) {\n        return sendError(res, 404, \"Post not found\");\n      }\n      res.json({ message: \"Post moved to trash\" });\n    } catch (error) {\n      console.error(\"Delete post error:\", error);\n      sendError(res, 500, \"Failed to move post to trash\");\n    }\n  });\n\n  app.get(\"/api/posts/:id/analytics\", async (req, res) => {\n    try {\n      const analytics = await storage.getPostAnalytics(req.params.id);\n      if (!analytics) {\n        return sendError(res, 404, \"Post not found\");\n      }\n      res.json(analytics);\n    } catch (error) {\n      console.error(\"Get post analytics error:\", error);\n      sendError(res, 500, \"Failed to fetch post analytics\");\n    }\n  });\n\n  // Media Routes\n  app.get(\"/api/media\", async (req, res) => {\n    try {\n      const limit = parseInt(req.query.limit as string) || 50;\n      const offset = parseInt(req.query.offset as string) || 0;\n      const result = await storage.listMedia(limit, offset);\n      res.json(result);\n    } catch (error) {\n      console.error(\"List media error:\", error);\n      sendError(res, 500, \"Failed to fetch media\");\n    }\n  });\n\n  // File upload endpoint\n  app.post(\"/api/media/upload\", requireAuth, upload.array('files', 10), async (req: any, res) => {\n    try {\n      if (!req.files || req.files.length === 0) {\n        return sendError(res, 400, \"No files uploaded\");\n      }\n\n      const userId = req.session.user.id;\n      const uploadedMedia = [];\n\n      for (const file of req.files) {\n        const mediaData = {\n          filename: file.filename,\n          originalName: file.originalname,\n          mimeType: file.mimetype,\n          size: file.size,\n          url: `/uploads/${file.filename}`,\n          alt: req.body.alt || file.originalname,\n          caption: req.body.caption || ''\n        };\n\n        const media = await storage.createMedia(mediaData, userId);\n        uploadedMedia.push(media);\n      }\n\n      res.status(201).json({\n        message: \"Files uploaded successfully\",\n        files: uploadedMedia\n      });\n    } catch (error) {\n      console.error(\"File upload error:\", error);\n      sendError(res, 500, \"Failed to upload files\");\n    }\n  });\n\n  app.post(\"/api/media\", async (req, res) => {\n    try {\n      const { uploadedBy, ...mediaData } = req.body;\n      \n      if (!uploadedBy) {\n        return sendError(res, 400, \"Uploaded by user ID is required\");\n      }\n\n      const validatedMedia = validateBody(insertMediaSchema, mediaData);\n      const media = await storage.createMedia(validatedMedia, uploadedBy);\n      res.status(201).json(media);\n    } catch (error) {\n      console.error(\"Create media error:\", error);\n      sendError(res, 400, error instanceof Error ? error.message : \"Failed to create media\");\n    }\n  });\n\n  app.get(\"/api/media/:id\", async (req, res) => {\n    try {\n      const media = await storage.getMedia(req.params.id);\n      if (!media) {\n        return sendError(res, 404, \"Media not found\");\n      }\n      res.json(media);\n    } catch (error) {\n      console.error(\"Get media error:\", error);\n      sendError(res, 500, \"Failed to fetch media\");\n    }\n  });\n\n  app.put(\"/api/media/:id\", async (req, res) => {\n    try {\n      const mediaData = validateBody(insertMediaSchema.partial(), req.body);\n      const media = await storage.updateMedia(req.params.id, mediaData);\n      if (!media) {\n        return sendError(res, 404, \"Media not found\");\n      }\n      res.json(media);\n    } catch (error) {\n      console.error(\"Update media error:\", error);\n      sendError(res, 400, error instanceof Error ? error.message : \"Failed to update media\");\n    }\n  });\n\n  app.delete(\"/api/media/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteMedia(req.params.id);\n      if (!success) {\n        return sendError(res, 404, \"Media not found\");\n      }\n      res.json({ message: \"Media deleted successfully\" });\n    } catch (error) {\n      console.error(\"Delete media error:\", error);\n      sendError(res, 500, \"Failed to delete media\");\n    }\n  });\n\n  // Analytics tracking endpoint\n  app.post(\"/api/analytics/track\", async (req, res) => {\n    try {\n      const { type, entityId, entityType, userId, metadata } = req.body;\n      \n      if (!type) {\n        return sendError(res, 400, \"Event type is required\");\n      }\n\n      await storage.trackEvent(type, entityId, entityType, userId, metadata);\n      res.json({ message: \"Event tracked successfully\" });\n    } catch (error) {\n      console.error(\"Track event error:\", error);\n      sendError(res, 500, \"Failed to track event\");\n    }\n  });\n\n  // Add missing analytics endpoints\n  app.get(\"/api/posts/:id/analytics\", async (req, res) => {\n    try {\n      const analytics = await storage.getPostAnalytics(req.params.id);\n      if (!analytics) {\n        return sendError(res, 404, \"Post not found\");\n      }\n      res.json(analytics);\n    } catch (error) {\n      console.error(\"Get post analytics error:\", error);\n      sendError(res, 500, \"Failed to fetch post analytics\");\n    }\n  });\n\n  // Initialize admin user if none exists\n  app.post(\"/api/setup/init-admin\", async (req, res) => {\n    try {\n      // Check if any admin users exist\n      const existingUsers = await storage.listUsers();\n      const adminExists = existingUsers.some(user => user.role === \"admin\");\n      \n      if (adminExists) {\n        return sendError(res, 409, \"Admin user already exists\");\n      }\n\n      const { username, password, email, displayName } = req.body;\n      \n      if (!username || !password) {\n        return sendError(res, 400, \"Username and password are required\");\n      }\n\n      const adminUser = await storage.createUser({\n        username,\n        password,\n        email: email || `${username}@penkora.local`,\n        role: \"admin\",\n        displayName: displayName || \"Administrator\"\n      });\n\n      const { password: _, ...safeUser } = adminUser;\n      res.status(201).json({ user: safeUser, message: \"Admin user created successfully\" });\n    } catch (error) {\n      console.error(\"Init admin error:\", error);\n      // Check for unique constraint violations\n      if (error instanceof Error && error.message.includes(\"unique\")) {\n        return sendError(res, 409, \"Username already exists\");\n      }\n      sendError(res, 500, \"Failed to create admin user\");\n    }\n  });\n\n  // Trash/Recycle Routes\n  \n  // Get all deleted posts\n  app.get(\"/api/trash/posts\", requireAuth, async (req, res) => {\n    try {\n      const limit = parseInt(req.query.limit as string) || 50;\n      const offset = parseInt(req.query.offset as string) || 0;\n      const result = await storage.listDeletedPosts(limit, offset);\n      res.json(result);\n    } catch (error) {\n      console.error(\"List deleted posts error:\", error);\n      sendError(res, 500, \"Failed to fetch deleted posts\");\n    }\n  });\n\n  // Restore a deleted post\n  app.post(\"/api/trash/posts/:id/restore\", requireAuth, async (req, res) => {\n    try {\n      const restored = await storage.restorePost(req.params.id);\n      if (!restored) {\n        return sendError(res, 404, \"Post not found\");\n      }\n      res.json({ message: \"Post restored successfully\" });\n    } catch (error) {\n      console.error(\"Restore post error:\", error);\n      sendError(res, 500, \"Failed to restore post\");\n    }\n  });\n\n  // Permanently delete a post (hard delete from trash)\n  app.delete(\"/api/posts/:id/permanent\", requireEditor, async (req, res) => {\n    try {\n      const deleted = await storage.permanentDeletePost(req.params.id);\n      if (!deleted) {\n        return sendError(res, 404, \"Post not found\");\n      }\n      res.json({ message: \"Post permanently deleted\" });\n    } catch (error) {\n      console.error(\"Permanent delete post error:\", error);\n      sendError(res, 500, \"Failed to permanently delete post\");\n    }\n  });\n\n  // Category trash routes\n  app.delete(\"/api/categories/:id\", requireEditor, async (req, res) => {\n    try {\n      const success = await storage.softDeleteCategory(req.params.id);\n      if (!success) {\n        return sendError(res, 404, \"Category not found\");\n      }\n      res.json({ message: \"Category moved to trash\" });\n    } catch (error) {\n      console.error(\"Delete category error:\", error);\n      sendError(res, 500, \"Failed to move category to trash\");\n    }\n  });\n\n  app.post(\"/api/trash/categories/:id/restore\", requireAuth, async (req, res) => {\n    try {\n      const restored = await storage.restoreCategory(req.params.id);\n      if (!restored) {\n        return sendError(res, 404, \"Category not found\");\n      }\n      res.json({ message: \"Category restored successfully\" });\n    } catch (error) {\n      console.error(\"Restore category error:\", error);\n      sendError(res, 500, \"Failed to restore category\");\n    }\n  });\n\n  // Tag trash routes\n  app.delete(\"/api/tags/:id\", requireEditor, async (req, res) => {\n    try {\n      const success = await storage.softDeleteTag(req.params.id);\n      if (!success) {\n        return sendError(res, 404, \"Tag not found\");\n      }\n      res.json({ message: \"Tag moved to trash\" });\n    } catch (error) {\n      console.error(\"Delete tag error:\", error);\n      sendError(res, 500, \"Failed to move tag to trash\");\n    }\n  });\n\n  app.post(\"/api/trash/tags/:id/restore\", requireAuth, async (req, res) => {\n    try {\n      const restored = await storage.restoreTag(req.params.id);\n      if (!restored) {\n        return sendError(res, 404, \"Tag not found\");\n      }\n      res.json({ message: \"Tag restored successfully\" });\n    } catch (error) {\n      console.error(\"Restore tag error:\", error);\n      sendError(res, 500, \"Failed to restore tag\");\n    }\n  });\n\n  // Settings Routes\n  \n  // Get all settings (admin) or public settings (everyone)\n  app.get(\"/api/settings\", async (req: any, res) => {\n    try {\n      const category = req.query.category as string;\n      const publicOnly = !req.session?.user || req.session.user.role !== \"admin\";\n      \n      const settings = await storage.getSettings(category, publicOnly);\n      res.json(settings);\n    } catch (error) {\n      console.error(\"Get settings error:\", error);\n      handleDbError(error, res, \"Failed to fetch settings\");\n    }\n  });\n\n  // Get a specific setting\n  app.get(\"/api/settings/:key\", async (req: any, res) => {\n    try {\n      const setting = await storage.getSetting(req.params.key);\n      if (!setting) {\n        return sendError(res, 404, \"Setting not found\");\n      }\n\n      // Check if user can access this setting\n      if (!setting.isPublic && (!req.session?.user || req.session.user.role !== \"admin\")) {\n        return sendError(res, 403, \"Access denied\");\n      }\n\n      res.json(setting);\n    } catch (error) {\n      console.error(\"Get setting error:\", error);\n      handleDbError(error, res, \"Failed to fetch setting\");\n    }\n  });\n\n  // Create/Update a setting (admin only)\n  app.post(\"/api/settings\", requireAdmin, async (req, res) => {\n    try {\n      const { key, value, category, isPublic, description } = req.body;\n      \n      if (!key || value === undefined) {\n        return sendError(res, 400, \"Key and value are required\");\n      }\n\n      const setting = await storage.setSetting(key, value, category, isPublic, description);\n      \n      // Reinitialize email service if email settings were changed\n      if (category === 'email' || key.startsWith('email') || key.startsWith('smtp') || key.startsWith('from')) {\n        await storage.initializeEmailService();\n      }\n      \n      res.json(setting);\n    } catch (error) {\n      console.error(\"Set setting error:\", error);\n      handleDbError(error, res, \"Failed to save setting\");\n    }\n  });\n\n  // Update a specific setting (admin only)\n  app.put(\"/api/settings/:key\", requireAdmin, async (req, res) => {\n    try {\n      const updates = req.body;\n      const setting = await storage.updateSetting(req.params.key, updates);\n      \n      if (!setting) {\n        return sendError(res, 404, \"Setting not found\");\n      }\n\n      // Reinitialize email service if email settings were changed\n      const key = req.params.key;\n      if (setting.category === 'email' || key.startsWith('email') || key.startsWith('smtp') || key.startsWith('from')) {\n        await storage.initializeEmailService();\n      }\n\n      res.json(setting);\n    } catch (error) {\n      console.error(\"Update setting error:\", error);\n      handleDbError(error, res, \"Failed to update setting\");\n    }\n  });\n\n  // Delete a setting (admin only)\n  app.delete(\"/api/settings/:key\", requireAdmin, async (req, res) => {\n    try {\n      const deleted = await storage.deleteSetting(req.params.key);\n      \n      if (!deleted) {\n        return sendError(res, 404, \"Setting not found\");\n      }\n\n      res.json({ message: \"Setting deleted successfully\" });\n    } catch (error) {\n      console.error(\"Delete setting error:\", error);\n      handleDbError(error, res, \"Failed to delete setting\");\n    }\n  });\n\n  // Email Routes\n  \n  // Test email configuration\n  app.post(\"/api/email/test\", requireAdmin, async (req, res) => {\n    try {\n      const { emailService } = await import('./services/emailService');\n      \n      if (!emailService.isConfigured()) {\n        return sendError(res, 400, \"Email service is not configured\");\n      }\n      \n      const testResult = await emailService.testConnection();\n      if (!testResult) {\n        return sendError(res, 400, \"Email connection test failed\");\n      }\n      \n      res.json({ message: \"Email connection test successful\" });\n    } catch (error) {\n      console.error(\"Email test error:\", error);\n      sendError(res, 500, \"Failed to test email connection\");\n    }\n  });\n\n  // Send test email\n  app.post(\"/api/email/send-test\", requireAdmin, async (req, res) => {\n    try {\n      const { to } = req.body;\n      \n      if (!to) {\n        return sendError(res, 400, \"Recipient email is required\");\n      }\n      \n      const { emailService } = await import('./services/emailService');\n      \n      if (!emailService.isConfigured()) {\n        return sendError(res, 400, \"Email service is not configured\");\n      }\n      \n      const success = await emailService.sendEmail(\n        to,\n        \"Test Email from Penkora CMS\",\n        \"<h2>Test Email</h2><p>This is a test email sent from your CMS to verify the email configuration is working correctly.</p>\",\n        \"Test Email: This is a test email sent from your CMS to verify the email configuration is working correctly.\"\n      );\n      \n      if (!success) {\n        return sendError(res, 500, \"Failed to send test email\");\n      }\n      \n      res.json({ message: \"Test email sent successfully\" });\n    } catch (error) {\n      console.error(\"Send test email error:\", error);\n      sendError(res, 500, \"Failed to send test email\");\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":34774},"server/storage.ts":{"content":"import { \n  type User, type InsertUser,\n  type Post, type InsertPost,\n  type Category, type InsertCategory,\n  type Tag, type InsertTag,\n  type Media, type InsertMedia,\n  type Analytics,\n  type Setting, type InsertSetting,\n  users, posts, categories, tags, media, analytics, postTags, settings\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, asc, and, or, like, count, sql } from \"drizzle-orm\";\nimport bcrypt from \"bcryptjs\";\n\n// Complete storage interface for CMS\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, user: Partial<InsertUser>): Promise<User | undefined>;\n  deleteUser(id: string): Promise<boolean>;\n  listUsers(): Promise<User[]>;\n  verifyPassword(username: string, password: string): Promise<User | null>;\n\n  // Posts\n  createPost(post: InsertPost, authorId: string, tagIds?: string[]): Promise<Post>;\n  getPost(id: string): Promise<Post | undefined>;\n  getPostBySlug(slug: string): Promise<Post | undefined>;\n  updatePost(id: string, post: Partial<InsertPost>, tagIds?: string[]): Promise<Post | undefined>;\n  deletePost(id: string): Promise<boolean>;\n  softDeletePost(id: string): Promise<boolean>;\n  restorePost(id: string): Promise<boolean>;\n  listPosts(filters?: { status?: string; categoryId?: string; authorId?: string; limit?: number; offset?: number; includeDeleted?: boolean }): Promise<{ posts: Post[]; total: number }>;\n  listDeletedPosts(limit?: number, offset?: number): Promise<{ posts: Post[]; total: number }>;\n  getPostsWithDetails(): Promise<any[]>;\n  incrementPostViews(id: string): Promise<void>;\n\n  // Categories\n  createCategory(category: InsertCategory): Promise<Category>;\n  getCategory(id: string): Promise<Category | undefined>;\n  getCategoryBySlug(slug: string): Promise<Category | undefined>;\n  updateCategory(id: string, category: Partial<InsertCategory>): Promise<Category | undefined>;\n  deleteCategory(id: string): Promise<boolean>;\n  softDeleteCategory(id: string): Promise<boolean>;\n  restoreCategory(id: string): Promise<boolean>;\n  listCategories(includeDeleted?: boolean): Promise<Category[]>;\n  listDeletedCategories(): Promise<Category[]>;\n\n  // Tags\n  createTag(tag: InsertTag): Promise<Tag>;\n  getTag(id: string): Promise<Tag | undefined>;\n  getTagBySlug(slug: string): Promise<Tag | undefined>;\n  updateTag(id: string, tag: Partial<InsertTag>): Promise<Tag | undefined>;\n  deleteTag(id: string): Promise<boolean>;\n  softDeleteTag(id: string): Promise<boolean>;\n  restoreTag(id: string): Promise<boolean>;\n  listTags(includeDeleted?: boolean): Promise<Tag[]>;\n  listDeletedTags(): Promise<Tag[]>;\n  getPostTags(postId: string): Promise<Tag[]>;\n\n  // Media\n  createMedia(media: InsertMedia, uploadedBy: string): Promise<Media>;\n  getMedia(id: string): Promise<Media | undefined>;\n  updateMedia(id: string, media: Partial<InsertMedia>): Promise<Media | undefined>;\n  deleteMedia(id: string): Promise<boolean>;\n  softDeleteMedia(id: string): Promise<boolean>;\n  restoreMedia(id: string): Promise<boolean>;\n  listMedia(limit?: number, offset?: number, includeDeleted?: boolean): Promise<{ media: Media[]; total: number }>;\n  listDeletedMedia(limit?: number, offset?: number): Promise<{ media: Media[]; total: number }>;\n\n  // Analytics\n  trackEvent(type: string, entityId?: string, entityType?: string, userId?: string, metadata?: any): Promise<void>;\n  getDashboardStats(): Promise<any>;\n  getPostAnalytics(postId: string): Promise<any>;\n  getPopularPosts(limit?: number): Promise<any[]>;\n\n  // Settings\n  getSetting(key: string): Promise<Setting | undefined>;\n  setSetting(key: string, value: any, category?: string, isPublic?: boolean, description?: string): Promise<Setting>;\n  getSettings(category?: string, publicOnly?: boolean): Promise<Setting[]>;\n  deleteSetting(key: string): Promise<boolean>;\n  updateSetting(key: string, updates: Partial<InsertSetting>): Promise<Setting | undefined>;\n  \n  // Email service initialization\n  initializeEmailService(): Promise<void>;\n}\n\nexport class PostgreSQLStorage implements IStorage {\n  // Users\n  async getUser(id: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.username, username)).limit(1);\n    return result[0];\n  }\n\n  async createUser(user: InsertUser): Promise<User> {\n    // Hash password before storing\n    const hashedPassword = await bcrypt.hash(user.password, 12);\n    const userData = { ...user, password: hashedPassword };\n    \n    const result = await db.insert(users).values(userData).returning();\n    return result[0];\n  }\n\n  async updateUser(id: string, user: Partial<InsertUser>): Promise<User | undefined> {\n    // Hash password if it's being updated\n    const updateData = { ...user, updatedAt: new Date() };\n    if (user.password) {\n      updateData.password = await bcrypt.hash(user.password, 12);\n    }\n    \n    const result = await db.update(users).set(updateData).where(eq(users.id, id)).returning();\n    return result[0];\n  }\n\n  async deleteUser(id: string): Promise<boolean> {\n    const result = await db.delete(users).where(eq(users.id, id));\n    return result.length > 0;\n  }\n\n  async listUsers(): Promise<User[]> {\n    return db.select().from(users).orderBy(asc(users.createdAt));\n  }\n\n  async verifyPassword(username: string, password: string): Promise<User | null> {\n    const user = await this.getUserByUsername(username);\n    if (!user) return null;\n    \n    const isValid = await bcrypt.compare(password, user.password);\n    return isValid ? user : null;\n  }\n\n  // Posts\n  async createPost(post: InsertPost, authorId: string, tagIds?: string[]): Promise<Post> {\n    // Create the post first\n    const result = await db.insert(posts).values({ ...post, authorId }).returning();\n    const createdPost = result[0];\n\n    // Associate tags if provided (Neon HTTP driver doesn't support transactions)\n    if (tagIds && tagIds.length > 0) {\n      const tagAssociations = tagIds.map(tagId => ({\n        postId: createdPost.id,\n        tagId\n      }));\n      await db.insert(postTags).values(tagAssociations);\n    }\n\n    return createdPost;\n  }\n\n  async getPost(id: string): Promise<Post | undefined> {\n    const result = await db.select().from(posts)\n      .where(and(eq(posts.id, id), sql`${posts.deletedAt} IS NULL`))\n      .limit(1);\n    return result[0];\n  }\n\n  async getPostBySlug(slug: string): Promise<Post | undefined> {\n    const result = await db.select().from(posts)\n      .where(and(eq(posts.slug, slug), sql`${posts.deletedAt} IS NULL`))\n      .limit(1);\n    return result[0];\n  }\n\n  async updatePost(id: string, post: Partial<InsertPost>, tagIds?: string[]): Promise<Post | undefined> {\n    // Update the post first\n    const result = await db.update(posts).set({ ...post, updatedAt: new Date() }).where(eq(posts.id, id)).returning();\n    \n    if (result.length > 0 && tagIds !== undefined) {\n      // Remove existing tag associations (Neon HTTP driver doesn't support transactions)\n      await db.delete(postTags).where(eq(postTags.postId, id));\n      \n      // Add new tag associations\n      if (tagIds.length > 0) {\n        const tagAssociations = tagIds.map(tagId => ({\n          postId: id,\n          tagId\n        }));\n        await db.insert(postTags).values(tagAssociations);\n      }\n    }\n\n    return result[0];\n  }\n\n  async deletePost(id: string): Promise<boolean> {\n    // Soft delete by default for safety\n    return this.softDeletePost(id);\n  }\n\n  // Hard delete for permanent removal (use with extreme caution)\n  async permanentDeletePost(id: string): Promise<boolean> {\n    const result = await db.delete(posts).where(eq(posts.id, id));\n    return result.length > 0;\n  }\n\n  async softDeletePost(id: string): Promise<boolean> {\n    const result = await db.update(posts)\n      .set({ deletedAt: new Date() })\n      .where(eq(posts.id, id))\n      .returning();\n    return result.length > 0;\n  }\n\n  async restorePost(id: string): Promise<boolean> {\n    const result = await db.update(posts)\n      .set({ deletedAt: null })\n      .where(eq(posts.id, id))\n      .returning();\n    return result.length > 0;\n  }\n\n  async listPosts(filters?: { status?: string; categoryId?: string; authorId?: string; limit?: number; offset?: number; includeDeleted?: boolean }): Promise<{ posts: Post[]; total: number }> {\n    const conditions = [];\n    \n    // Exclude soft-deleted posts by default\n    if (!filters?.includeDeleted) {\n      conditions.push(sql`${posts.deletedAt} IS NULL`);\n    }\n    \n    if (filters?.status) {\n      conditions.push(eq(posts.status, filters.status));\n    }\n    if (filters?.categoryId) {\n      conditions.push(eq(posts.categoryId, filters.categoryId));\n    }\n    if (filters?.authorId) {\n      conditions.push(eq(posts.authorId, filters.authorId));\n    }\n\n    const whereClause = conditions.length === 0 ? undefined : \n      conditions.length === 1 ? conditions[0] : and(...conditions);\n\n    // Build queries\n    const baseQuery = db.select().from(posts);\n    const countBaseQuery = db.select({ count: count() }).from(posts);\n\n    const finalQuery = whereClause ? baseQuery.where(whereClause) : baseQuery;\n    const finalCountQuery = whereClause ? countBaseQuery.where(whereClause) : countBaseQuery;\n\n    const orderedQuery = finalQuery.orderBy(desc(posts.createdAt));\n    \n    const limitedQuery = filters?.limit ? orderedQuery.limit(filters.limit) : orderedQuery;\n    const finalPaginatedQuery = filters?.offset ? limitedQuery.offset(filters.offset) : limitedQuery;\n\n    const [postsResult, totalResult] = await Promise.all([\n      finalPaginatedQuery,\n      finalCountQuery\n    ]);\n\n    return {\n      posts: postsResult,\n      total: totalResult[0].count as number\n    };\n  }\n\n  async listDeletedPosts(limit = 50, offset = 0): Promise<{ posts: Post[]; total: number }> {\n    const baseQuery = db.select().from(posts)\n      .where(sql`${posts.deletedAt} IS NOT NULL`)\n      .orderBy(desc(posts.deletedAt));\n    \n    const countQuery = db.select({ count: count() }).from(posts)\n      .where(sql`${posts.deletedAt} IS NOT NULL`);\n\n    const [postsResult, totalResult] = await Promise.all([\n      baseQuery.limit(limit).offset(offset),\n      countQuery\n    ]);\n\n    return {\n      posts: postsResult,\n      total: totalResult[0].count as number\n    };\n  }\n\n  async getPostsWithDetails(): Promise<any[]> {\n    return db.select({\n      id: posts.id,\n      title: posts.title,\n      slug: posts.slug,\n      excerpt: posts.excerpt,\n      status: posts.status,\n      viewCount: posts.viewCount,\n      publishedAt: posts.publishedAt,\n      createdAt: posts.createdAt,\n      author: {\n        id: users.id,\n        username: users.username,\n        displayName: users.displayName,\n      },\n      category: {\n        id: categories.id,\n        name: categories.name,\n        slug: categories.slug,\n        color: categories.color,\n      }\n    })\n    .from(posts)\n    .leftJoin(users, eq(posts.authorId, users.id))\n    .leftJoin(categories, eq(posts.categoryId, categories.id))\n    .where(sql`${posts.deletedAt} IS NULL`)\n    .orderBy(desc(posts.createdAt));\n  }\n\n  async incrementPostViews(id: string): Promise<void> {\n    await db.update(posts).set({ viewCount: sql`${posts.viewCount} + 1` }).where(eq(posts.id, id));\n  }\n\n  // Categories\n  async createCategory(category: InsertCategory): Promise<Category> {\n    const result = await db.insert(categories).values(category).returning();\n    return result[0];\n  }\n\n  async getCategory(id: string): Promise<Category | undefined> {\n    const result = await db.select().from(categories)\n      .where(and(eq(categories.id, id), sql`${categories.deletedAt} IS NULL`))\n      .limit(1);\n    return result[0];\n  }\n\n  async getCategoryBySlug(slug: string): Promise<Category | undefined> {\n    const result = await db.select().from(categories)\n      .where(and(eq(categories.slug, slug), sql`${categories.deletedAt} IS NULL`))\n      .limit(1);\n    return result[0];\n  }\n\n  async updateCategory(id: string, category: Partial<InsertCategory>): Promise<Category | undefined> {\n    const result = await db.update(categories).set({ ...category, updatedAt: new Date() }).where(eq(categories.id, id)).returning();\n    return result[0];\n  }\n\n  async deleteCategory(id: string): Promise<boolean> {\n    // Soft delete by default for safety\n    return this.softDeleteCategory(id);\n  }\n\n  async listCategories(includeDeleted = false): Promise<Category[]> {\n    const query = db.select().from(categories);\n    \n    if (!includeDeleted) {\n      query.where(sql`${categories.deletedAt} IS NULL`);\n    }\n    \n    return query.orderBy(asc(categories.name));\n  }\n\n  async listDeletedCategories(): Promise<Category[]> {\n    return db.select().from(categories)\n      .where(sql`${categories.deletedAt} IS NOT NULL`)\n      .orderBy(desc(categories.deletedAt));\n  }\n\n  async softDeleteCategory(id: string): Promise<boolean> {\n    const result = await db.update(categories)\n      .set({ deletedAt: new Date() })\n      .where(eq(categories.id, id))\n      .returning();\n    return result.length > 0;\n  }\n\n  async restoreCategory(id: string): Promise<boolean> {\n    const result = await db.update(categories)\n      .set({ deletedAt: null })\n      .where(eq(categories.id, id))\n      .returning();\n    return result.length > 0;\n  }\n\n  // Tags\n  async createTag(tag: InsertTag): Promise<Tag> {\n    const result = await db.insert(tags).values(tag).returning();\n    return result[0];\n  }\n\n  async getTag(id: string): Promise<Tag | undefined> {\n    const result = await db.select().from(tags)\n      .where(and(eq(tags.id, id), sql`${tags.deletedAt} IS NULL`))\n      .limit(1);\n    return result[0];\n  }\n\n  async getTagBySlug(slug: string): Promise<Tag | undefined> {\n    const result = await db.select().from(tags)\n      .where(and(eq(tags.slug, slug), sql`${tags.deletedAt} IS NULL`))\n      .limit(1);\n    return result[0];\n  }\n\n  async updateTag(id: string, tag: Partial<InsertTag>): Promise<Tag | undefined> {\n    const result = await db.update(tags).set(tag).where(eq(tags.id, id)).returning();\n    return result[0];\n  }\n\n  async deleteTag(id: string): Promise<boolean> {\n    // Soft delete by default for safety\n    return this.softDeleteTag(id);\n  }\n\n  async listTags(includeDeleted = false): Promise<Tag[]> {\n    const query = db.select().from(tags);\n    \n    if (!includeDeleted) {\n      query.where(sql`${tags.deletedAt} IS NULL`);\n    }\n    \n    return query.orderBy(asc(tags.name));\n  }\n\n  async listDeletedTags(): Promise<Tag[]> {\n    return db.select().from(tags)\n      .where(sql`${tags.deletedAt} IS NOT NULL`)\n      .orderBy(desc(tags.deletedAt));\n  }\n\n  async softDeleteTag(id: string): Promise<boolean> {\n    const result = await db.update(tags)\n      .set({ deletedAt: new Date() })\n      .where(eq(tags.id, id))\n      .returning();\n    return result.length > 0;\n  }\n\n  async restoreTag(id: string): Promise<boolean> {\n    const result = await db.update(tags)\n      .set({ deletedAt: null })\n      .where(eq(tags.id, id))\n      .returning();\n    return result.length > 0;\n  }\n\n  async getPostTags(postId: string): Promise<Tag[]> {\n    const result = await db.select({\n      id: tags.id,\n      name: tags.name,\n      slug: tags.slug,\n      color: tags.color,\n      createdAt: tags.createdAt,\n      deletedAt: tags.deletedAt\n    })\n    .from(postTags)\n    .innerJoin(tags, eq(postTags.tagId, tags.id))\n    .where(and(\n      eq(postTags.postId, postId),\n      sql`${tags.deletedAt} IS NULL`\n    ));\n    return result as Tag[];\n  }\n\n  // Media\n  async createMedia(mediaData: InsertMedia, uploadedBy: string): Promise<Media> {\n    const result = await db.insert(media).values({ ...mediaData, uploadedBy }).returning();\n    return result[0];\n  }\n\n  async getMedia(id: string): Promise<Media | undefined> {\n    const result = await db.select().from(media).where(eq(media.id, id)).limit(1);\n    return result[0];\n  }\n\n  async updateMedia(id: string, mediaData: Partial<InsertMedia>): Promise<Media | undefined> {\n    const result = await db.update(media).set(mediaData).where(eq(media.id, id)).returning();\n    return result[0];\n  }\n\n  async deleteMedia(id: string): Promise<boolean> {\n    // Soft delete by default for safety\n    return this.softDeleteMedia(id);\n  }\n\n  async softDeleteMedia(id: string): Promise<boolean> {\n    const result = await db.update(media)\n      .set({ deletedAt: new Date() })\n      .where(eq(media.id, id))\n      .returning();\n    return result.length > 0;\n  }\n\n  async restoreMedia(id: string): Promise<boolean> {\n    const result = await db.update(media)\n      .set({ deletedAt: null })\n      .where(eq(media.id, id))\n      .returning();\n    return result.length > 0;\n  }\n\n  async listMedia(limit = 50, offset = 0, includeDeleted = false): Promise<{ media: Media[]; total: number }> {\n    const baseQuery = db.select().from(media);\n    const countQuery = db.select({ count: count() }).from(media);\n    \n    if (!includeDeleted) {\n      baseQuery.where(sql`${media.deletedAt} IS NULL`);\n      countQuery.where(sql`${media.deletedAt} IS NULL`);\n    }\n    \n    const [mediaResult, totalResult] = await Promise.all([\n      baseQuery.orderBy(desc(media.createdAt)).limit(limit).offset(offset),\n      countQuery\n    ]);\n\n    return {\n      media: mediaResult,\n      total: totalResult[0].count as number\n    };\n  }\n\n  async listDeletedMedia(limit = 50, offset = 0): Promise<{ media: Media[]; total: number }> {\n    const [mediaResult, totalResult] = await Promise.all([\n      db.select().from(media)\n        .where(sql`${media.deletedAt} IS NOT NULL`)\n        .orderBy(desc(media.deletedAt))\n        .limit(limit).offset(offset),\n      db.select({ count: count() }).from(media)\n        .where(sql`${media.deletedAt} IS NOT NULL`)\n    ]);\n\n    return {\n      media: mediaResult,\n      total: totalResult[0].count as number\n    };\n  }\n\n  // Analytics\n  async trackEvent(type: string, entityId?: string, entityType?: string, userId?: string, metadata?: any): Promise<void> {\n    await db.insert(analytics).values({\n      type,\n      entityId,\n      entityType,\n      userId,\n      metadata\n    });\n  }\n\n  async getDashboardStats(): Promise<any> {\n    const [\n      totalPosts,\n      publishedPosts,\n      totalCategories,\n      totalTags,\n      totalMedia,\n      totalUsers,\n      recentPosts\n    ] = await Promise.all([\n      db.select({ count: count() }).from(posts),\n      db.select({ count: count() }).from(posts).where(eq(posts.status, 'published')),\n      db.select({ count: count() }).from(categories),\n      db.select({ count: count() }).from(tags),\n      db.select({ count: count() }).from(media),\n      db.select({ count: count() }).from(users),\n      db.select().from(posts).orderBy(desc(posts.createdAt)).limit(5)\n    ]);\n\n    return {\n      totalPosts: totalPosts[0].count,\n      publishedPosts: publishedPosts[0].count,\n      totalCategories: totalCategories[0].count,\n      totalTags: totalTags[0].count,\n      totalMedia: totalMedia[0].count,\n      totalUsers: totalUsers[0].count,\n      recentPosts\n    };\n  }\n\n  async getPostAnalytics(postId: string): Promise<any> {\n    const post = await this.getPost(postId);\n    if (!post) return null;\n\n    const viewEvents = await db.select({ count: count() })\n      .from(analytics)\n      .where(and(\n        eq(analytics.type, 'post_view'),\n        eq(analytics.entityId, postId)\n      ));\n\n    return {\n      post,\n      totalViews: viewEvents[0].count,\n      dbViewCount: post.viewCount\n    };\n  }\n\n  async getPopularPosts(limit = 10): Promise<any[]> {\n    return db.select({\n      id: posts.id,\n      title: posts.title,\n      slug: posts.slug,\n      viewCount: posts.viewCount,\n      publishedAt: posts.publishedAt\n    })\n    .from(posts)\n    .where(eq(posts.status, 'published'))\n    .orderBy(desc(posts.viewCount))\n    .limit(limit);\n  }\n  // Settings\n  async getSetting(key: string): Promise<Setting | undefined> {\n    const result = await db.select().from(settings).where(eq(settings.key, key)).limit(1);\n    return result[0];\n  }\n\n  async setSetting(key: string, value: any, category?: string, isPublic?: boolean, description?: string): Promise<Setting> {\n    // Check if setting already exists\n    const existing = await this.getSetting(key);\n    \n    if (existing) {\n      // Update existing setting\n      const updateData: any = {\n        value\n      };\n      if (category !== undefined) updateData.category = category;\n      if (isPublic !== undefined) updateData.isPublic = isPublic;\n      if (description !== undefined) updateData.description = description;\n\n      const result = await db.update(settings)\n        .set(updateData)\n        .where(eq(settings.key, key))\n        .returning();\n      return result[0];\n    } else {\n      // Create new setting\n      const result = await db.insert(settings).values({\n        key,\n        value,\n        category: category || \"general\",\n        isPublic: isPublic || false,\n        description\n      }).returning();\n      return result[0];\n    }\n  }\n\n  async getSettings(category?: string, publicOnly?: boolean): Promise<Setting[]> {\n    let query = db.select().from(settings);\n    \n    const conditions = [];\n    if (category) conditions.push(eq(settings.category, category));\n    if (publicOnly) conditions.push(eq(settings.isPublic, true));\n    \n    if (conditions.length > 0) {\n      query = query.where(conditions.length === 1 ? conditions[0] : and(...conditions)) as any;\n    }\n    \n    return query.orderBy(asc(settings.category), asc(settings.key));\n  }\n\n  async deleteSetting(key: string): Promise<boolean> {\n    const result = await db.delete(settings).where(eq(settings.key, key));\n    return result.length > 0;\n  }\n\n  async updateSetting(key: string, updates: Partial<InsertSetting>): Promise<Setting | undefined> {\n    const result = await db.update(settings)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(settings.key, key))\n      .returning();\n    return result[0];\n  }\n\n  async initializeEmailService(): Promise<void> {\n    try {\n      // Get email settings\n      const emailSettings = await this.getSettings('email', false);\n      const settingsMap: { [key: string]: any } = {};\n      \n      emailSettings.forEach(setting => {\n        settingsMap[setting.key] = setting.value;\n      });\n\n      // Check if SMTP is configured\n      if (settingsMap.emailProvider === 'smtp' && \n          settingsMap.smtpHost && \n          settingsMap.smtpUsername && \n          settingsMap.smtpPassword) {\n        \n        const { emailService } = await import('./services/emailService');\n        await emailService.initialize({\n          provider: 'smtp',\n          smtpHost: settingsMap.smtpHost,\n          smtpPort: parseInt(settingsMap.smtpPort) || 587,\n          smtpUsername: settingsMap.smtpUsername,\n          smtpPassword: settingsMap.smtpPassword,\n          fromEmail: settingsMap.fromEmail || 'noreply@example.com',\n          fromName: settingsMap.fromName || 'CMS',\n        });\n        \n        console.log('✅ Email service initialized from settings');\n      } else {\n        console.log('📧 Email service not configured - SMTP settings missing');\n      }\n    } catch (error) {\n      console.error('❌ Failed to initialize email service:', error);\n    }\n  }\n}\n\nexport const storage = new PostgreSQLStorage();\n","size_bytes":23500},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, boolean, integer, json } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Users table\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  email: text(\"email\").unique(),\n  role: text(\"role\").notNull().default(\"author\"), // admin, editor, author\n  displayName: text(\"display_name\"),\n  avatar: text(\"avatar\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Categories table\nexport const categories = pgTable(\"categories\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull().unique(),\n  slug: text(\"slug\").notNull().unique(),\n  description: text(\"description\"),\n  color: text(\"color\").default(\"#3b82f6\"),\n  deletedAt: timestamp(\"deleted_at\"), // Soft delete timestamp\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Tags table\nexport const tags = pgTable(\"tags\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull().unique(),\n  slug: text(\"slug\").notNull().unique(),\n  color: text(\"color\").default(\"#6b7280\"),\n  deletedAt: timestamp(\"deleted_at\"), // Soft delete timestamp\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Posts table\nexport const posts = pgTable(\"posts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  slug: text(\"slug\").notNull().unique(),\n  content: text(\"content\"),\n  excerpt: text(\"excerpt\"),\n  featuredImage: text(\"featured_image\"),\n  status: text(\"status\").notNull().default(\"draft\"), // draft, published, scheduled\n  publishedAt: timestamp(\"published_at\"),\n  authorId: varchar(\"author_id\").notNull().references(() => users.id),\n  categoryId: varchar(\"category_id\").references(() => categories.id),\n  viewCount: integer(\"view_count\").default(0),\n  meta: json(\"meta\"), // SEO and other metadata\n  deletedAt: timestamp(\"deleted_at\"), // Soft delete timestamp\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Post-Tag junction table\nexport const postTags = pgTable(\"post_tags\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  postId: varchar(\"post_id\").notNull().references(() => posts.id, { onDelete: \"cascade\" }),\n  tagId: varchar(\"tag_id\").notNull().references(() => tags.id, { onDelete: \"cascade\" }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Media table\nexport const media = pgTable(\"media\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  filename: text(\"filename\").notNull(),\n  originalName: text(\"original_name\").notNull(),\n  mimeType: text(\"mime_type\").notNull(),\n  size: integer(\"size\").notNull(),\n  url: text(\"url\").notNull(),\n  alt: text(\"alt\"),\n  caption: text(\"caption\"),\n  uploadedBy: varchar(\"uploaded_by\").notNull().references(() => users.id),\n  deletedAt: timestamp(\"deleted_at\"), // Soft delete timestamp\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Analytics table\nexport const analytics = pgTable(\"analytics\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  type: text(\"type\").notNull(), // page_view, post_view, search, etc.\n  entityId: varchar(\"entity_id\"), // ID of the post, page, etc.\n  entityType: text(\"entity_type\"), // post, page, category, etc.\n  userId: varchar(\"user_id\").references(() => users.id),\n  ipAddress: text(\"ip_address\"),\n  userAgent: text(\"user_agent\"),\n  referrer: text(\"referrer\"),\n  metadata: json(\"metadata\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// User sessions table for authentication\nexport const userSessions = pgTable(\"user_sessions\", {\n  sid: varchar(\"sid\").primaryKey(),\n  sess: json(\"sess\").notNull(),\n  expire: timestamp(\"expire\").notNull(),\n});\n\n// Settings table for system configuration\nexport const settings = pgTable(\"settings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  key: text(\"key\").notNull().unique(),\n  value: json(\"value\").notNull(),\n  category: text(\"category\").default(\"general\"), // general, email, social, appearance, etc\n  isPublic: boolean(\"is_public\").default(false), // Whether setting can be accessed by frontend\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Insert schemas for forms\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n  email: true,\n  role: true,\n  displayName: true,\n});\n\nexport const insertCategorySchema = createInsertSchema(categories).pick({\n  name: true,\n  slug: true,\n  description: true,\n  color: true,\n});\n\nexport const insertTagSchema = createInsertSchema(tags).pick({\n  name: true,\n  slug: true,\n  color: true,\n});\n\nexport const insertPostSchema = createInsertSchema(posts).pick({\n  title: true,\n  slug: true,\n  content: true,\n  excerpt: true,\n  featuredImage: true,\n  status: true,\n  categoryId: true,\n  meta: true,\n});\n\nexport const insertMediaSchema = createInsertSchema(media).pick({\n  filename: true,\n  originalName: true,\n  mimeType: true,\n  size: true,\n  url: true,\n  alt: true,\n  caption: true,\n});\n\nexport const insertSettingSchema = createInsertSchema(settings).pick({\n  key: true,\n  value: true,\n  category: true,\n  isPublic: true,\n  description: true,\n});\n\n// Type exports\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\nexport type InsertCategory = z.infer<typeof insertCategorySchema>;\nexport type Category = typeof categories.$inferSelect;\n\nexport type InsertTag = z.infer<typeof insertTagSchema>;\nexport type Tag = typeof tags.$inferSelect;\n\nexport type InsertPost = z.infer<typeof insertPostSchema>;\nexport type Post = typeof posts.$inferSelect;\n\nexport type InsertMedia = z.infer<typeof insertMediaSchema>;\nexport type Media = typeof media.$inferSelect;\n\nexport type Analytics = typeof analytics.$inferSelect;\n\nexport type InsertSetting = z.infer<typeof insertSettingSchema>;\nexport type Setting = typeof settings.$inferSelect;\n","size_bytes":6352},"client/src/App.tsx":{"content":"import { Switch, Route, useLocation } from \"wouter\";\nimport { useEffect } from \"react\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/ThemeProvider\";\nimport { AuthProvider } from \"@/components/AuthProvider\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport LoginPage from \"@/components/LoginPage\";\nimport AdminLayout from \"@/components/AdminLayout\";\nimport Dashboard from \"@/components/Dashboard\";\nimport AllPostsPage from \"@/components/AllPostsPage\";\nimport NewPostPage from \"@/components/NewPostPage\";\nimport EditPostPage from \"@/components/EditPostPage\";\nimport CategoriesPage from \"@/components/CategoriesPage\";\nimport MediaLibraryPage from \"@/components/MediaLibraryPage\";\nimport UploadPage from \"@/components/UploadPage\";\nimport SchedulingPage from \"@/components/SchedulingPage\";\nimport TrashPage from \"@/components/TrashPage\";\nimport LayoutManager from \"@/components/LayoutManager\";\nimport UsersManager from \"@/components/UsersManager\";\nimport AnalyticsPage from \"@/components/AnalyticsPage\";\nimport SettingsPage from \"@/components/SettingsPage\";\nimport NotFound from \"@/pages/not-found\";\nimport ErrorBoundary from \"@/components/ErrorBoundary\";\nimport HeroBuilderPage from \"@/components/HeroBuilderPage\";\nimport WidgetsManagerPage from \"@/components/WidgetsManagerPage\";\n\nfunction AuthenticatedRouter() {\n  const [location, setLocation] = useLocation();\n\n  // Debug logging for route changes\n  useEffect(() => {\n    if (import.meta.env.MODE === 'development') {\n      console.log('🔄 [ROUTER] Route changed:', {\n        location,\n        timestamp: new Date().toISOString(),\n        currentPage: getCurrentPage()\n      });\n    }\n  }, [location]);\n\n  const getCurrentPage = () => {\n    if (location === '/' || location === '/dashboard') return 'dashboard';\n    if (location.startsWith('/posts')) return 'posts';\n    if (location.startsWith('/media')) return 'media';\n    if (location.startsWith('/layout')) return location.replace('/', '');\n    if (location.startsWith('/users')) return 'users';\n    if (location.startsWith('/categories')) return 'categories';\n    if (location.startsWith('/schedule')) return 'schedule';\n    if (location.startsWith('/analytics')) return 'analytics';\n    if (location.startsWith('/settings')) return 'settings';\n    if (location.startsWith('/trash')) return 'trash';\n    return location.replace('/', '');\n  };\n\n  return (\n    <Switch>\n      {/* Dashboard Routes */}\n      <Route path=\"/\">\n        <AdminLayout currentPage={getCurrentPage()}>\n          <Dashboard onQuickAction={(action) => console.log(\"Quick action:\", action)} />\n        </AdminLayout>\n      </Route>\n      \n      <Route path=\"/dashboard\">\n        <AdminLayout currentPage={getCurrentPage()}>\n          <Dashboard onQuickAction={(action) => console.log(\"Quick action:\", action)} />\n        </AdminLayout>\n      </Route>\n      \n      {/* Posts Routes */}\n      <Route path=\"/posts\">\n        <AdminLayout currentPage={getCurrentPage()}>\n          <AllPostsPage \n            onCreatePost={() => setLocation(\"/posts/new\")}\n            onEditPost={(id) => setLocation(`/posts/edit/${id}`)}\n            onPreviewPost={(id) => {\n              // Open post in new tab for preview\n              window.open(`/posts/${id}/preview`, '_blank');\n            }}\n            onDeletePost={(id) => {\n              // Delete is handled internally by AllPostsPage component\n              // No additional action needed as toast notifications are shown there\n            }}\n          />\n        </AdminLayout>\n      </Route>\n      \n      <Route path=\"/posts/new\">\n        <AdminLayout currentPage={getCurrentPage()}>\n          <NewPostPage />\n        </AdminLayout>\n      </Route>\n      \n      <Route path=\"/posts/edit/:id\">\n        <AdminLayout currentPage={getCurrentPage()}>\n          <EditPostPage />\n        </AdminLayout>\n      </Route>\n      \n      {/* Media Routes */}\n      <Route path=\"/media\">\n        <AdminLayout currentPage={getCurrentPage()}>\n          <MediaLibraryPage \n            onUpload={() => setLocation(\"/media/upload\")}\n            onSelect={(file) => {\n              // File selection handled internally by MediaLibrary component\n            }}\n            onDelete={(ids) => {\n              // Delete handled internally by MediaLibrary component with toast feedback\n            }}\n            onDownload={(ids) => {\n              // Download functionality to be implemented\n              console.log(\"Download files:\", ids);\n            }}\n          />\n        </AdminLayout>\n      </Route>\n      \n      <Route path=\"/media/upload\">\n        <AdminLayout currentPage={getCurrentPage()}>\n          <UploadPage \n            onUpload={(files, destination) => console.log(\"Upload files:\", files, \"to:\", destination)}\n            onCancel={(fileId) => console.log(\"Cancel upload:\", fileId)}\n            onRetry={(fileId) => console.log(\"Retry upload:\", fileId)}\n          />\n        </AdminLayout>\n      </Route>\n      \n      {/* Layout Routes */}\n      <Route path=\"/layout/sections\">\n        <AdminLayout currentPage={getCurrentPage()}>\n          <LayoutManager \n            onAddSection={(type) => console.log(\"Add section:\", type)}\n            onEditSection={(id) => console.log(\"Edit section:\", id)}\n          />\n        </AdminLayout>\n      </Route>\n      \n      <Route path=\"/layout/hero\">\n        <AdminLayout currentPage={getCurrentPage()}>\n          <HeroBuilderPage \n            onSave={(data) => console.log(\"Save hero:\", data)}\n            onPreview={(data) => console.log(\"Preview hero:\", data)}\n          />\n        </AdminLayout>\n      </Route>\n      \n      <Route path=\"/layout/widgets\">\n        <AdminLayout currentPage={getCurrentPage()}>\n          <WidgetsManagerPage \n            onSave={(data) => console.log(\"Save widgets:\", data)}\n            onPreview={(data) => console.log(\"Preview widgets:\", data)}\n          />\n        </AdminLayout>\n      </Route>\n      \n      {/* System Routes */}\n      <Route path=\"/categories\">\n        <AdminLayout currentPage={getCurrentPage()}>\n          <CategoriesPage \n            onCreateCategory={(data) => console.log(\"Create category:\", data)}\n            onEditCategory={(id, data) => console.log(\"Edit category:\", id, data)}\n            onDeleteCategory={(id) => console.log(\"Delete category:\", id)}\n            onCreateTag={(data) => console.log(\"Create tag:\", data)}\n            onEditTag={(id, data) => console.log(\"Edit tag:\", id, data)}\n            onDeleteTag={(id) => console.log(\"Delete tag:\", id)}\n          />\n        </AdminLayout>\n      </Route>\n      \n      <Route path=\"/users\">\n        <AdminLayout currentPage={getCurrentPage()}>\n          <UsersManager \n            onCreateUser={() => console.log(\"Create new user\")}\n            onEditUser={(id) => console.log(\"Edit user:\", id)}\n          />\n        </AdminLayout>\n      </Route>\n      \n      <Route path=\"/schedule\">\n        <AdminLayout currentPage={getCurrentPage()}>\n          <SchedulingPage \n            onCreateSchedule={() => console.log(\"Create schedule\")}\n            onEditSchedule={(id) => console.log(\"Edit schedule:\", id)}\n            onDeleteSchedule={(id) => console.log(\"Delete schedule:\", id)}\n            onPublishNow={(id) => console.log(\"Publish now:\", id)}\n          />\n        </AdminLayout>\n      </Route>\n      \n      <Route path=\"/analytics\">\n        <AdminLayout currentPage={getCurrentPage()}>\n          <AnalyticsPage \n            onExport={(format, period) => console.log(\"Export analytics:\", format, period)}\n          />\n        </AdminLayout>\n      </Route>\n      \n      <Route path=\"/settings\">\n        <AdminLayout currentPage={getCurrentPage()}>\n          <SettingsPage \n            onSave={(settings) => {\n              const { smtpPassword, ...safeSettings } = settings;\n              console.log(\"Save settings (sensitive fields redacted):\", safeSettings);\n            }}\n          />\n        </AdminLayout>\n      </Route>\n      \n      <Route path=\"/trash\">\n        <AdminLayout currentPage={getCurrentPage()}>\n          <TrashPage \n            onRestore={(ids) => console.log(\"Restore items:\", ids)}\n            onPermanentDelete={(ids) => console.log(\"Permanently delete:\", ids)}\n            onEmptyTrash={() => console.log(\"Empty trash\")}\n          />\n        </AdminLayout>\n      </Route>\n      \n      {/* 404 Route */}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction Router() {\n  const { user, isLoading, isAuthenticated } = useAuth();\n\n  // Show loading state while checking authentication\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n          <p className=\"mt-2 text-muted-foreground\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Show login page if not authenticated\n  if (!isAuthenticated) {\n    return <LoginPage />;\n  }\n\n  // Show admin interface if authenticated\n  return <AuthenticatedRouter />;\n}\n\nfunction App() {\n  // Development mode logging\n  useEffect(() => {\n    if (import.meta.env.MODE === 'development') {\n      console.log('🚀 [APP] Penkora CMS starting...', {\n        timestamp: new Date().toISOString(),\n        version: '1.0.0',\n        environment: import.meta.env.MODE\n      });\n    }\n  }, []);\n\n  return (\n    <ErrorBoundary>\n      <ThemeProvider defaultTheme=\"system\" storageKey=\"penkora-ui-theme\">\n        <QueryClientProvider client={queryClient}>\n          <AuthProvider>\n            <TooltipProvider>\n              <Toaster />\n              <Router />\n            </TooltipProvider>\n          </AuthProvider>\n        </QueryClientProvider>\n      </ThemeProvider>\n    </ErrorBoundary>\n  );\n}\n\nexport default App;","size_bytes":9982},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 210 5% 98%;\n\n  --foreground: 210 15% 15%;\n\n  --border: 210 10% 90%;\n\n  --card: 0 0% 100%;\n\n  --card-foreground: 210 15% 15%;\n\n  --card-border: 210 8% 95%;\n\n  --sidebar: 210 8% 96%;\n\n  --sidebar-foreground: 210 15% 15%;\n\n  --sidebar-border: 210 10% 92%;\n\n  --sidebar-primary: 210 85% 55%;\n\n  --sidebar-primary-foreground: 210 5% 98%;\n\n  --sidebar-accent: 210 12% 92%;\n\n  --sidebar-accent-foreground: 210 15% 15%;\n\n  --sidebar-ring: 210 85% 55%;\n\n  --popover: 210 5% 96%;\n\n  --popover-foreground: 210 15% 15%;\n\n  --popover-border: 210 8% 92%;\n\n  --primary: 210 100% 60%;\n\n  --primary-foreground: 210 5% 98%;\n\n  --secondary: 210 8% 95%;\n\n  --secondary-foreground: 210 15% 15%;\n\n  --muted: 210 6% 96%;\n\n  --muted-foreground: 210 8% 46%;\n\n  --accent: 210 15% 94%;\n\n  --accent-foreground: 210 15% 15%;\n  \n  /* Enhanced semantic colors */\n  --success: 142 76% 36%;\n  --success-foreground: 355 7% 97%;\n  --warning: 38 92% 50%;\n  --warning-foreground: 48 96% 89%;\n  --info: 210 100% 60%;\n  --info-foreground: 210 5% 98%;\n\n  --destructive: 0 75% 55%;\n\n  --destructive-foreground: 0 5% 98%;\n\n  --input: 210 15% 85%;\n  --ring: 210 85% 55%;\n  --chart-1: 210 85% 45%;\n  --chart-2: 120 75% 35%;\n  --chart-3: 45 90% 45%;\n  --chart-4: 280 75% 45%;\n  --chart-5: 15 85% 45%;\n\n  --font-sans: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;\n  --font-serif: 'Crimson Pro', 'Source Serif Pro', Georgia, 'Times New Roman', serif;\n  --font-mono: 'JetBrains Mono', 'Fira Code', Menlo, 'Monaco', 'Cascadia Code', monospace;\n  \n  /* Enhanced typography variables */\n  --letter-spacing-tight: -0.025em;\n  --letter-spacing-normal: 0em;\n  --letter-spacing-wide: 0.025em;\n  --line-height-tight: 1.2;\n  --line-height-snug: 1.375;\n  --line-height-normal: 1.5;\n  --line-height-relaxed: 1.625;\n  --line-height-loose: 1.75;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 2px 0px 0px hsl(210 10% 50% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(210 10% 50% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(210 10% 50% / 0.00), 0px 1px 2px -1px hsl(210 10% 50% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(210 10% 50% / 0.00), 0px 1px 2px -1px hsl(210 10% 50% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(210 10% 50% / 0.00), 0px 2px 4px -1px hsl(210 10% 50% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(210 10% 50% / 0.00), 0px 4px 6px -1px hsl(210 10% 50% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(210 10% 50% / 0.00), 0px 8px 10px -1px hsl(210 10% 50% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(210 10% 50% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 210 15% 8%;\n\n  --foreground: 210 5% 95%;\n\n  --border: 210 10% 20%;\n\n  --card: 210 12% 12%;\n\n  --card-foreground: 210 5% 95%;\n\n  --card-border: 210 10% 18%;\n\n  --sidebar: 210 14% 10%;\n\n  --sidebar-foreground: 210 5% 95%;\n\n  --sidebar-border: 210 12% 16%;\n\n  --sidebar-primary: 210 85% 55%;\n\n  --sidebar-primary-foreground: 210 5% 95%;\n\n  --sidebar-accent: 210 12% 16%;\n\n  --sidebar-accent-foreground: 210 5% 95%;\n\n  --sidebar-ring: 210 85% 55%;\n\n  --popover: 210 12% 14%;\n\n  --popover-foreground: 210 5% 95%;\n\n  --popover-border: 210 10% 22%;\n\n  --primary: 210 100% 65%;\n\n  --primary-foreground: 210 5% 95%;\n\n  --secondary: 210 10% 16%;\n\n  --secondary-foreground: 210 5% 95%;\n\n  --muted: 210 8% 14%;\n\n  --muted-foreground: 210 5% 72%;\n\n  --accent: 210 10% 12%;\n\n  --accent-foreground: 210 5% 95%;\n  \n  /* Enhanced semantic colors for dark mode */\n  --success: 142 71% 45%;\n  --success-foreground: 142 84% 2%;\n  --warning: 38 92% 55%;\n  --warning-foreground: 20 14% 4%;\n  --info: 210 100% 65%;\n  --info-foreground: 210 5% 95%;\n\n  --destructive: 0 75% 55%;\n\n  --destructive-foreground: 210 5% 95%;\n\n  --input: 210 12% 25%;\n  --ring: 210 85% 55%;\n  --chart-1: 210 85% 65%;\n  --chart-2: 120 75% 55%;\n  --chart-3: 45 90% 65%;\n  --chart-4: 280 75% 65%;\n  --chart-5: 15 85% 65%;\n\n  --shadow-2xs: 0px 2px 0px 0px hsl(210 10% 5% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(210 10% 5% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(210 10% 5% / 0.00), 0px 1px 2px -1px hsl(210 10% 5% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(210 10% 5% / 0.00), 0px 1px 2px -1px hsl(210 10% 5% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(210 10% 5% / 0.00), 0px 2px 4px -1px hsl(210 10% 5% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(210 10% 5% / 0.00), 0px 4px 6px -1px hsl(210 10% 5% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(210 10% 5% / 0.00), 0px 8px 10px -1px hsl(210 10% 5% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(210 10% 5% / 0.00);\n\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer base {\n  /* Enhanced modern typography system */\n  .type-display {\n    @apply text-3xl md:text-4xl lg:text-5xl xl:text-6xl font-bold;\n    letter-spacing: var(--letter-spacing-tight);\n    line-height: var(--line-height-tight);\n    font-feature-settings: \"ss01\", \"ss02\";\n  }\n  \n  .type-hero {\n    @apply text-2xl md:text-3xl lg:text-4xl font-bold;\n    letter-spacing: var(--letter-spacing-tight);\n    line-height: var(--line-height-snug);\n  }\n  \n  .type-title {\n    @apply text-xl md:text-2xl lg:text-3xl font-semibold;\n    letter-spacing: var(--letter-spacing-tight);\n    line-height: var(--line-height-snug);\n  }\n  \n  .type-heading {\n    @apply text-lg md:text-xl font-semibold;\n    letter-spacing: var(--letter-spacing-normal);\n    line-height: var(--line-height-snug);\n  }\n  \n  .type-subtitle {\n    @apply text-base md:text-lg font-medium;\n    letter-spacing: var(--letter-spacing-normal);\n    line-height: var(--line-height-normal);\n  }\n  \n  .type-body {\n    @apply text-sm md:text-base;\n    line-height: var(--line-height-relaxed);\n    letter-spacing: var(--letter-spacing-normal);\n  }\n  \n  .type-body-large {\n    @apply text-base md:text-lg;\n    line-height: var(--line-height-relaxed);\n    letter-spacing: var(--letter-spacing-normal);\n  }\n  \n  .type-caption {\n    @apply text-xs md:text-sm text-muted-foreground font-medium;\n    letter-spacing: var(--letter-spacing-wide);\n  }\n  \n  .type-overline {\n    @apply text-xs font-semibold uppercase tracking-wider text-muted-foreground;\n    letter-spacing: 0.1em;\n  }\n  \n  /* Content-specific typography */\n  .type-content {\n    @apply font-serif text-base md:text-lg;\n    line-height: var(--line-height-loose);\n    letter-spacing: var(--letter-spacing-normal);\n  }\n  \n  .type-content h1 {\n    @apply type-hero mb-6 mt-8 first:mt-0;\n  }\n  \n  .type-content h2 {\n    @apply type-title mb-4 mt-8;\n  }\n  \n  .type-content h3 {\n    @apply type-heading mb-3 mt-6;\n  }\n  \n  .type-content p {\n    @apply mb-4 last:mb-0;\n  }\n  \n  .type-content blockquote {\n    @apply border-l-4 border-primary/20 pl-4 my-6 italic text-muted-foreground;\n  }\n  \n  /* Numerical data styling */\n  .num {\n    font-variant-numeric: tabular-nums;\n    font-feature-settings: \"tnum\";\n  }\n}\n\n@layer utilities {\n\n  /* Mobile safe area support */\n  .safe-top {\n    padding-top: env(safe-area-inset-top);\n  }\n  \n  .safe-bottom {\n    padding-bottom: env(safe-area-inset-bottom);\n  }\n  \n  .safe-left {\n    padding-left: env(safe-area-inset-left);\n  }\n  \n  .safe-right {\n    padding-right: env(safe-area-inset-right);\n  }\n\n  /* Mobile-first responsive design utilities */\n  .mobile-full-height {\n    height: 100dvh; /* Use dynamic viewport height for better mobile support */\n  }\n\n  .mobile-touch-target {\n    min-height: 44px; /* iOS minimum touch target size */\n    min-width: 44px;\n  }\n\n  /* Motion and interactions */\n  .interactive {\n    @apply transition-[colors,opacity,transform] duration-150 ease-out;\n  }\n  \n  .interactive-slow {\n    @apply transition-[colors,opacity,transform] duration-200 ease-out;\n  }\n  \n  /* Respect reduced motion preference */\n  @media (prefers-reduced-motion: reduce) {\n    .interactive,\n    .interactive-slow {\n      @apply transition-none;\n    }\n  }\n  \n  /* Enhanced focus states */\n  .focus-ring {\n    @apply focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2;\n  }\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":14087},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/AdminLayout.tsx":{"content":"import { SidebarProvider, SidebarInset } from \"@/components/ui/sidebar\";\nimport AdminSidebar from \"./AdminSidebar\";\nimport TopNavbar from \"./TopNavbar\";\n\ninterface AdminLayoutProps {\n  children: React.ReactNode;\n  currentPage?: string;\n}\n\nexport default function AdminLayout({ children, currentPage = \"dashboard\" }: AdminLayoutProps) {\n\n  return (\n    <SidebarProvider defaultOpen={true}>\n      <div className=\"mobile-full-height w-full flex\">\n        {/* Sidebar */}\n        <AdminSidebar \n          activeItem={currentPage}\n        />\n        \n        {/* Main Content Area */}\n        <SidebarInset className=\"flex flex-col flex-1 min-w-0\">\n          <TopNavbar \n            onSearch={(query) => console.log(\"Global search:\", query)} \n            currentPage={currentPage}\n          />\n          \n          <main className=\"flex-1 overflow-auto bg-background\">\n            <div className=\"max-w-7xl mx-auto\">\n              {children}\n            </div>\n          </main>\n        </SidebarInset>\n      </div>\n    </SidebarProvider>\n  );\n}","size_bytes":1040},"client/src/components/AdminSidebar.tsx":{"content":"import {\n  Home,\n  FileText,\n  Plus,\n  Tag,\n  Layout,\n  Image,\n  Upload,\n  Calendar,\n  Users,\n  BarChart3,\n  Settings,\n  Trash2,\n} from \"lucide-react\";\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarRail,\n} from \"@/components/ui/sidebar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Link, useLocation } from \"wouter\";\nimport { useEffect } from \"react\";\nimport { useSidebar } from \"@/components/ui/sidebar\";\nimport { cn } from \"@/lib/utils\";\n\ninterface AdminSidebarProps {\n  activeItem?: string;\n  onNavigate?: () => void;\n}\n\nexport default function AdminSidebar({ activeItem = \"dashboard\", onNavigate }: AdminSidebarProps) {\n  const [location] = useLocation();\n  const { state, isMobile, setOpenMobile } = useSidebar();\n\n  // Debug logging for sidebar navigation\n  useEffect(() => {\n    if (process.env.NODE_ENV === 'development') {\n      console.log('📍 [SIDEBAR] Active item changed:', {\n        activeItem,\n        location,\n        timestamp: new Date().toISOString()\n      });\n    }\n  }, [activeItem, location]);\n  const menuItems = [\n    {\n      title: \"Dashboard\",\n      url: \"/\",\n      icon: Home,\n    },\n  ];\n\n  const contentItems = [\n    {\n      title: \"All Posts\",\n      url: \"/posts\",\n      icon: FileText,\n      badge: \"124\",\n    },\n    {\n      title: \"New Post\",\n      url: \"/posts/new\",\n      icon: Plus,\n    },\n    {\n      title: \"Categories / Tags\",\n      url: \"/categories\",\n      icon: Tag,\n    },\n  ];\n\n  const layoutItems = [\n    {\n      title: \"Sections Board\",\n      url: \"/layout/sections\",\n      icon: Layout,\n    },\n    {\n      title: \"Hero / Featured\",\n      url: \"/layout/hero\",\n      icon: Layout,\n    },\n    {\n      title: \"Sidebars & Widgets\",\n      url: \"/layout/widgets\",\n      icon: Layout,\n    },\n  ];\n\n  const mediaItems = [\n    {\n      title: \"Media Library\",\n      url: \"/media\",\n      icon: Image,\n      badge: \"2.1k\",\n    },\n    {\n      title: \"Upload\",\n      url: \"/media/upload\",\n      icon: Upload,\n    },\n  ];\n\n  const systemItems = [\n    {\n      title: \"Scheduling\",\n      url: \"/schedule\",\n      icon: Calendar,\n    },\n    {\n      title: \"Users & Roles\",\n      url: \"/users\",\n      icon: Users,\n    },\n    {\n      title: \"Analytics & Reports\",\n      url: \"/analytics\",\n      icon: BarChart3,\n    },\n    {\n      title: \"Settings\",\n      url: \"/settings\",\n      icon: Settings,\n    },\n    {\n      title: \"Trash / Archived\",\n      url: \"/trash\",\n      icon: Trash2,\n    },\n  ];\n\n  const isActiveRoute = (url: string) => {\n    if (url === \"/\" && location === \"/\") return true;\n    if (url !== \"/\" && location.startsWith(url)) return true;\n    return false;\n  };\n\n  const renderMenuItems = (items: any[], groupTitle?: string) => (\n    <SidebarGroup>\n      {groupTitle && <SidebarGroupLabel className=\"type-overline text-muted-foreground\">{groupTitle}</SidebarGroupLabel>}\n      <SidebarGroupContent>\n        <SidebarMenu>\n          {items.map((item) => (\n            <SidebarMenuItem key={item.url}>\n              <SidebarMenuButton \n                asChild\n                isActive={isActiveRoute(item.url)}\n                data-testid={`sidebar-${item.url.replace(/\\//g, '-').replace(/^-/, '')}`}\n                className={cn(\n                  \"w-full justify-start transition-colors duration-200\",\n                  isActiveRoute(item.url) && \"bg-primary/10 text-primary font-medium\"\n                )}\n              >\n                <Link \n                  href={item.url}\n                  onClick={() => {\n                    if (process.env.NODE_ENV === 'development') {\n                      console.log('🔗 [SIDEBAR] Navigation clicked:', {\n                        from: location,\n                        to: item.url,\n                        title: item.title,\n                        timestamp: new Date().toISOString()\n                      });\n                    }\n                    // Close mobile sheet when navigating\n                    if (isMobile) {\n                      setOpenMobile(false);\n                    }\n                    onNavigate?.();\n                  }}\n                  className=\"flex items-center gap-2 w-full transition-colors duration-150 group\"\n                >\n                  <item.icon className={cn(\n                    \"w-4 h-4 transition-all duration-200 group-hover:scale-110\",\n                    isActiveRoute(item.url) ? \"text-primary\" : \"text-muted-foreground\"\n                  )} />\n                  {state === \"expanded\" && (\n                    <>\n                      <span className=\"transition-opacity duration-200\">{item.title}</span>\n                      {item.badge && (\n                        <Badge variant=\"secondary\" className=\"ml-auto transition-all duration-200 hover:scale-105\">\n                          {item.badge}\n                        </Badge>\n                      )}\n                    </>\n                  )}\n                </Link>\n              </SidebarMenuButton>\n            </SidebarMenuItem>\n          ))}\n        </SidebarMenu>\n      </SidebarGroupContent>\n    </SidebarGroup>\n  );\n\n  return (\n    <Sidebar className=\"transition-all duration-300 ease-in-out\">\n      <SidebarContent className=\"space-y-1\">\n        {renderMenuItems(menuItems)}\n        {renderMenuItems(contentItems, \"Content\")}\n        {renderMenuItems(layoutItems, \"Layout Manager\")}\n        {renderMenuItems(mediaItems, \"Media Library\")}\n        {renderMenuItems(systemItems, \"System\")}\n      </SidebarContent>\n      <SidebarRail />\n    </Sidebar>\n  );\n}","size_bytes":5601},"client/src/components/Dashboard.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  FileText, \n  Users, \n  Eye, \n  TrendingUp, \n  Plus,\n  Calendar,\n  Image,\n  Clock\n} from \"lucide-react\";\nimport { useDashboardStats, usePopularPosts, mockDashboardStats } from \"@/hooks/useDashboard\";\nimport { LoadingCard } from \"@/components/ui/loading\";\n\ninterface DashboardProps {\n  onQuickAction?: (action: string) => void;\n}\n\nexport default function Dashboard({ onQuickAction }: DashboardProps) {\n  // Fetch real dashboard data\n  const { data: dashboardData, isLoading: isStatsLoading } = useDashboardStats();\n  const { data: popularPosts, isLoading: isPostsLoading } = usePopularPosts(4);\n  \n  // Use real data if available, otherwise fall back to mock data\n  const statsData = dashboardData || mockDashboardStats;\n  const recentPostsData = popularPosts || mockDashboardStats.recentPosts;\n  \n  // Transform stats data for display\n  const stats = [\n    { title: \"Total Posts\", value: statsData.totalPosts?.toString() || \"0\", change: \"+12%\", icon: FileText },\n    { title: \"Published Posts\", value: statsData.publishedPosts?.toString() || \"0\", change: \"+8%\", icon: Users },\n    { title: \"Categories\", value: statsData.totalCategories?.toString() || \"0\", change: \"+23%\", icon: Eye },\n    { title: \"Total Users\", value: statsData.totalUsers?.toString() || \"0\", change: \"+5%\", icon: TrendingUp },\n  ];\n\n  // Transform recent posts data for display\n  const recentPosts = recentPostsData.slice(0, 4).map((post: any) => ({\n    title: post.title,\n    status: post.status,\n    date: formatRelativeDate(post.createdAt),\n    views: formatViewCount(post.viewCount || 0)\n  }));\n  \n  // Helper functions\n  function formatRelativeDate(dateString: string): string {\n    const date = new Date(dateString);\n    const now = new Date();\n    const diffMs = now.getTime() - date.getTime();\n    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));\n    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n    \n    if (diffDays > 0) {\n      return `${diffDays} day${diffDays > 1 ? 's' : ''} ago`;\n    } else if (diffHours > 0) {\n      return `${diffHours} hour${diffHours > 1 ? 's' : ''} ago`;\n    } else {\n      return \"Just now\";\n    }\n  }\n  \n  function formatViewCount(count: number): string {\n    if (count >= 1000) {\n      return `${(count / 1000).toFixed(1)}k`;\n    }\n    return count.toString();\n  }\n\n  const quickActions = [\n    { label: \"New Post\", action: \"new-post\", icon: Plus },\n    { label: \"Schedule Content\", action: \"schedule\", icon: Calendar },\n    { label: \"Upload Media\", action: \"upload\", icon: Image },\n  ];\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"published\": return \"bg-success text-success-foreground\";\n      case \"draft\": return \"bg-warning text-warning-foreground\";\n      case \"scheduled\": return \"bg-info text-info-foreground\";\n      default: return \"bg-muted text-muted-foreground\";\n    }\n  };\n\n  return (\n    <div className=\"py-4 md:py-6 space-y-4 md:space-y-6\">\n      {/* Welcome Section */}\n      <div>\n        <h1 className=\"type-hero mb-2\" data-testid=\"text-dashboard-title\">Welcome back!</h1>\n        <p className=\"type-body-large text-muted-foreground\">Here's what's happening with your content today.</p>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 md:gap-6\">\n        {isStatsLoading ? (\n          // Loading state for stats cards\n          Array.from({ length: 4 }).map((_, index) => (\n            <LoadingCard key={index} />\n          ))\n        ) : (\n          stats.map((stat, index) => (\n            <Card key={index} data-testid={`card-stat-${stat.title.toLowerCase().replace(' ', '-')}`}>\n              <CardContent className=\"p-4 md:p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"type-overline\">{stat.title}</p>\n                    <p className=\"type-heading num\">{stat.value}</p>\n                    <p className={`type-caption num ${stat.change.startsWith('+') ? 'text-success' : 'text-destructive'}`}>{stat.change}</p>\n                  </div>\n                  <div className=\"rounded-lg bg-primary/10 p-2\">\n                    <stat.icon className=\"w-5 h-5 md:w-6 md:h-6 text-primary\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        )}\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-6\">\n        {/* Recent Activity */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Recent Posts</CardTitle>\n            <CardDescription>Your latest content activity</CardDescription>\n          </CardHeader>\n          <CardContent>\n            {isPostsLoading ? (\n              <div className=\"space-y-4\">\n                {Array.from({ length: 4 }).map((_, index) => (\n                  <div key={index} className=\"animate-pulse\">\n                    <div className=\"h-4 bg-muted rounded w-3/4 mb-2\"></div>\n                    <div className=\"h-3 bg-muted rounded w-1/2\"></div>\n                  </div>\n                ))}\n              </div>\n            ) : recentPosts.length > 0 ? (\n              <div className=\"space-y-4\">\n                {recentPosts.map((post, index) => (\n                  <div key={index} className=\"flex items-center justify-between p-2 md:p-3 rounded interactive-slow hover-elevate focus-ring mobile-touch-target\" data-testid={`post-item-${index}`}>\n                    <div className=\"flex-1\">\n                      <h4 className=\"type-body font-medium\">{post.title}</h4>\n                      <div className=\"flex items-center gap-2 mt-1\">\n                        <Badge variant=\"secondary\" className={`w-2 h-2 p-0 rounded-full ${getStatusColor(post.status)}`} />\n                        <span className=\"text-xs text-muted-foreground capitalize\">{post.status}</span>\n                        <Clock className=\"w-3 h-3 text-muted-foreground\" />\n                        <span className=\"text-xs text-muted-foreground\">{post.date}</span>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"text-sm font-medium num\">{post.views}</p>\n                      <p className=\"type-caption\">views</p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-8\">\n                <FileText className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                <p className=\"text-muted-foreground\">No recent posts found</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Quick Actions */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Quick Actions</CardTitle>\n            <CardDescription>Common tasks and shortcuts</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 gap-3\">\n              {quickActions.map((action, index) => (\n                <Button\n                  key={index}\n                  variant=\"outline\"\n                  className=\"justify-start h-auto p-4 md:p-6 text-left interactive focus-ring mobile-touch-target\"\n                  onClick={() => {\n                    onQuickAction?.(action.action);\n                    console.log(`Quick action: ${action.action}`);\n                  }}\n                  data-testid={`button-${action.action}`}\n                >\n                  <action.icon className=\"w-5 h-5 mr-3\" />\n                  <div className=\"text-left\">\n                    <p className=\"font-medium\">{action.label}</p>\n                  </div>\n                </Button>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":7976},"client/src/components/ErrorBoundary.tsx":{"content":"import React, { Component, ErrorInfo, ReactNode } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { AlertTriangle, RotateCcw } from \"lucide-react\";\n\ninterface Props {\n  children: ReactNode;\n}\n\ninterface State {\n  hasError: boolean;\n  error: Error | null;\n  errorInfo: ErrorInfo | null;\n}\n\nclass ErrorBoundary extends Component<Props, State> {\n  public state: State = {\n    hasError: false,\n    error: null,\n    errorInfo: null,\n  };\n\n  public static getDerivedStateFromError(error: Error): State {\n    // Update state so the next render will show the fallback UI\n    return { hasError: true, error, errorInfo: null };\n  }\n\n  public componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    const errorDetails = {\n      error: {\n        name: error.name,\n        message: error.message,\n        stack: error.stack,\n      },\n      errorInfo,\n      timestamp: new Date().toISOString(),\n      userAgent: navigator.userAgent,\n      url: window.location.href,\n    };\n\n    // Log to console for development\n    if (process.env.NODE_ENV === 'development') {\n      console.error('🚨 [ERROR BOUNDARY] Caught an error:', errorDetails);\n    }\n\n    // Log to server for production (could be implemented later)\n    // fetch('/api/errors', {\n    //   method: 'POST',\n    //   headers: { 'Content-Type': 'application/json' },\n    //   body: JSON.stringify(errorDetails)\n    // });\n\n    this.setState({\n      hasError: true,\n      error,\n      errorInfo,\n    });\n  }\n\n  private handleReload = () => {\n    if (process.env.NODE_ENV === 'development') {\n      console.log('🔄 [ERROR BOUNDARY] Reloading application...');\n    }\n    window.location.reload();\n  };\n\n  private handleReset = () => {\n    if (process.env.NODE_ENV === 'development') {\n      console.log('🔄 [ERROR BOUNDARY] Resetting error state...');\n    }\n    this.setState({\n      hasError: false,\n      error: null,\n      errorInfo: null,\n    });\n  };\n\n  public render() {\n    if (this.state.hasError) {\n      return (\n        <div className=\"min-h-screen flex items-center justify-center p-4 bg-background\">\n          <Card className=\"w-full max-w-md\">\n            <CardHeader className=\"text-center\">\n              <div className=\"flex justify-center mb-4\">\n                <AlertTriangle className=\"h-12 w-12 text-destructive\" />\n              </div>\n              <CardTitle className=\"text-xl text-destructive\">\n                Something went wrong\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <p className=\"text-muted-foreground text-center\">\n                An unexpected error occurred. The development team has been notified.\n              </p>\n              \n              {process.env.NODE_ENV === 'development' && this.state.error && (\n                <details className=\"text-xs bg-muted p-3 rounded\">\n                  <summary className=\"cursor-pointer font-medium mb-2\">\n                    Error Details (Development)\n                  </summary>\n                  <pre className=\"whitespace-pre-wrap overflow-auto\">\n                    {this.state.error.name}: {this.state.error.message}\n                    {this.state.error.stack && (\n                      <>\n                        {'\\n\\nStack Trace:'}\n                        {this.state.error.stack}\n                      </>\n                    )}\n                  </pre>\n                </details>\n              )}\n              \n              <div className=\"flex gap-2 justify-center\">\n                <Button onClick={this.handleReset} variant=\"outline\">\n                  <RotateCcw className=\"w-4 h-4 mr-2\" />\n                  Try Again\n                </Button>\n                <Button onClick={this.handleReload}>\n                  Reload Page\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;","size_bytes":4045},"client/src/components/LayoutManager.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Plus,\n  GripVertical,\n  Edit3,\n  Trash2,\n  Eye,\n  Copy,\n  Layout,\n  Image,\n  Type,\n  Video\n} from \"lucide-react\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\ninterface LayoutManagerProps {\n  onAddSection?: (type: string) => void;\n  onEditSection?: (id: string) => void;\n}\n\nexport default function LayoutManager({ onAddSection, onEditSection }: LayoutManagerProps) {\n  const [draggedItem, setDraggedItem] = useState<string | null>(null);\n\n  // TODO: Remove mock data\n  const sectionTypes = [\n    { id: \"hero\", name: \"Hero Section\", icon: Layout, description: \"Large banner with title and CTA\" },\n    { id: \"text\", name: \"Text Block\", icon: Type, description: \"Rich text content area\" },\n    { id: \"image\", name: \"Image Gallery\", icon: Image, description: \"Image carousel or grid\" },\n    { id: \"video\", name: \"Video Embed\", icon: Video, description: \"YouTube or video player\" },\n  ];\n\n  const currentSections = [\n    {\n      id: \"section-1\",\n      type: \"hero\",\n      title: \"Welcome Hero\",\n      content: \"Main landing page hero with call-to-action\",\n      status: \"active\",\n      order: 0\n    },\n    {\n      id: \"section-2\", \n      type: \"text\",\n      title: \"About Section\",\n      content: \"Company overview and mission statement\",\n      status: \"active\",\n      order: 1\n    },\n    {\n      id: \"section-3\",\n      type: \"image\", \n      title: \"Feature Gallery\",\n      content: \"Product screenshots and images\",\n      status: \"draft\",\n      order: 2\n    }\n  ];\n\n  const handleDragStart = (e: React.DragEvent, sectionId: string) => {\n    setDraggedItem(sectionId);\n    e.dataTransfer.effectAllowed = \"move\";\n  };\n\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.dataTransfer.dropEffect = \"move\";\n  };\n\n  const handleDrop = (e: React.DragEvent, targetId: string) => {\n    e.preventDefault();\n    if (draggedItem && draggedItem !== targetId) {\n      console.log(`Move section ${draggedItem} to position of ${targetId}`);\n      // TODO: Implement section reordering\n    }\n    setDraggedItem(null);\n  };\n\n  const getStatusColor = (status: string) => {\n    return status === \"active\" ? \"bg-green-500\" : \"bg-yellow-500\";\n  };\n\n  const getSectionIcon = (type: string) => {\n    const section = sectionTypes.find(s => s.id === type);\n    return section?.icon || Layout;\n  };\n\n  return (\n    <div className=\"p-4 md:p-6 space-y-4 md:space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-start justify-between gap-4\">\n        <div>\n          <h1 className=\"text-2xl md:text-3xl font-semibold\">Layout Manager</h1>\n          <p className=\"text-muted-foreground text-sm md:text-base\">Drag and drop to arrange your page sections</p>\n        </div>\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button data-testid=\"button-add-section\" size=\"sm\" className=\"shrink-0\">\n              <Plus className=\"w-4 h-4 sm:mr-2\" />\n              <span className=\"hidden sm:inline\">Add Section</span>\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"end\" className=\"w-56\">\n            {sectionTypes.map((type) => {\n              const IconComponent = type.icon;\n              return (\n                <DropdownMenuItem\n                  key={type.id}\n                  onClick={() => {\n                    onAddSection?.(type.id);\n                    console.log(`Add section: ${type.id}`);\n                  }}\n                  data-testid={`menu-add-${type.id}`}\n                >\n                  <IconComponent className=\"w-4 h-4 mr-2\" />\n                  <div>\n                    <p className=\"font-medium\">{type.name}</p>\n                    <p className=\"text-xs text-muted-foreground\">{type.description}</p>\n                  </div>\n                </DropdownMenuItem>\n              );\n            })}\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </div>\n\n      {/* Section Templates */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Section Templates</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3 md:gap-4\">\n            {sectionTypes.map((type) => {\n              const IconComponent = type.icon;\n              return (\n                <Card \n                  key={type.id} \n                  className=\"hover-elevate cursor-pointer\"\n                  onClick={() => {\n                    onAddSection?.(type.id);\n                    console.log(`Add section template: ${type.id}`);\n                  }}\n                  data-testid={`template-${type.id}`}\n                >\n                  <CardContent className=\"p-3 md:p-4 text-center\">\n                    <IconComponent className=\"w-8 h-8 mx-auto mb-2 text-primary\" />\n                    <h4 className=\"font-medium mb-1\">{type.name}</h4>\n                    <p className=\"text-xs text-muted-foreground\">{type.description}</p>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Current Layout Sections */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Layout className=\"w-5 h-5\" />\n            Page Sections\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            {currentSections.map((section, index) => {\n              const SectionIcon = getSectionIcon(section.type);\n              return (\n                <Card\n                  key={section.id}\n                  className={`hover-elevate cursor-move ${draggedItem === section.id ? 'opacity-50' : ''}`}\n                  draggable\n                  onDragStart={(e) => handleDragStart(e, section.id)}\n                  onDragOver={handleDragOver}\n                  onDrop={(e) => handleDrop(e, section.id)}\n                  data-testid={`section-${section.id}`}\n                >\n                  <CardContent className=\"p-3 md:p-4\">\n                    <div className=\"flex items-center gap-4\">\n                      <GripVertical className=\"w-5 h-5 text-muted-foreground cursor-grab\" />\n                      \n                      <div className=\"flex items-center gap-3 flex-1\">\n                        <SectionIcon className=\"w-5 h-5 text-primary\" />\n                        \n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center gap-2 mb-1\">\n                            <h4 className=\"font-medium\">{section.title}</h4>\n                            <Badge \n                              variant=\"secondary\" \n                              className={`w-2 h-2 p-0 rounded-full ${getStatusColor(section.status)}`}\n                            />\n                            <span className=\"text-xs text-muted-foreground capitalize\">\n                              {section.status}\n                            </span>\n                          </div>\n                          <p className=\"text-sm text-muted-foreground\">{section.content}</p>\n                        </div>\n                      </div>\n\n                      <div className=\"flex items-center gap-1\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"icon\"\n                          className=\"w-8 h-8\"\n                          onClick={() => console.log(`Preview section: ${section.id}`)}\n                          data-testid={`button-preview-${section.id}`}\n                        >\n                          <Eye className=\"w-4 h-4\" />\n                        </Button>\n                        \n                        <Button\n                          variant=\"ghost\"\n                          size=\"icon\"\n                          className=\"w-8 h-8\"\n                          onClick={() => {\n                            onEditSection?.(section.id);\n                            console.log(`Edit section: ${section.id}`);\n                          }}\n                          data-testid={`button-edit-${section.id}`}\n                        >\n                          <Edit3 className=\"w-4 h-4\" />\n                        </Button>\n                        \n                        <Button\n                          variant=\"ghost\"\n                          size=\"icon\" \n                          className=\"w-8 h-8\"\n                          onClick={() => console.log(`Duplicate section: ${section.id}`)}\n                          data-testid={`button-duplicate-${section.id}`}\n                        >\n                          <Copy className=\"w-4 h-4\" />\n                        </Button>\n                        \n                        <Button\n                          variant=\"ghost\"\n                          size=\"icon\"\n                          className=\"w-8 h-8 text-destructive hover:text-destructive\"\n                          onClick={() => console.log(`Delete section: ${section.id}`)}\n                          data-testid={`button-delete-${section.id}`}\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n\n          {currentSections.length === 0 && (\n            <div className=\"text-center py-8\">\n              <Layout className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium mb-2\">No sections yet</h3>\n              <p className=\"text-muted-foreground mb-4\">\n                Start building your page by adding sections above\n              </p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":10103},"client/src/components/MediaLibrary.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Search, \n  Upload, \n  Grid3x3, \n  List, \n  Filter,\n  Image as ImageIcon,\n  Video,\n  FileText,\n  Download,\n  Trash2,\n  MoreHorizontal\n} from \"lucide-react\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { useMedia, useDeleteMedia } from \"@/hooks/useMedia\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { LoadingCard } from \"@/components/ui/loading\";\nimport { queryClient } from \"@/lib/queryClient\";\n\ninterface MediaLibraryProps {\n  onSelectFile?: (file: any) => void;\n}\n\nexport default function MediaLibrary({ onSelectFile }: MediaLibraryProps) {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [viewMode, setViewMode] = useState<\"grid\" | \"list\">(\"grid\");\n  const [typeFilter, setTypeFilter] = useState(\"all\");\n\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  \n  // Fetch real media data\n  const { data: mediaData, isLoading, error } = useMedia(50, 0);\n  const deleteMutation = useDeleteMedia();\n\n  // Transform API data to match component expectations\n  const mediaFiles = mediaData?.map((media: any) => ({\n    id: media.id,\n    name: media.filename,\n    type: media.mimeType.startsWith('image/') ? 'image' : \n          media.mimeType.startsWith('video/') ? 'video' : 'document',\n    size: formatFileSize(media.size),\n    uploadDate: media.createdAt, // Keep as ISO string\n    dimensions: null, // Could extract from metadata\n    thumbnail: media.mimeType.startsWith('image/') ? media.url : null,\n    used: false // Could track usage\n  })) || [];\n\n  // Handle media deletion\n  const handleDeleteMedia = async (mediaId: string) => {\n    try {\n      await deleteMutation.mutateAsync(mediaId);\n      \n      // Invalidate media cache to refresh the list\n      queryClient.invalidateQueries({ queryKey: ['/api/media'] });\n      \n      toast({\n        title: \"Media deleted\",\n        description: \"The file has been successfully deleted.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete the file. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Helper function to format file size\n  const formatFileSize = (bytes: number): string => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return Math.round(bytes / Math.pow(k, i) * 100) / 100 + ' ' + sizes[i];\n  };\n\n  const getFileIcon = (type: string) => {\n    switch (type) {\n      case \"image\": return ImageIcon;\n      case \"video\": return Video;\n      case \"document\": return FileText;\n      default: return FileText;\n    }\n  };\n\n  const getFileTypeColor = (type: string) => {\n    switch (type) {\n      case \"image\": return \"text-green-500\";\n      case \"video\": return \"text-purple-500\";\n      case \"document\": return \"text-blue-500\";\n      default: return \"text-gray-500\";\n    }\n  };\n\n  // Show loading state\n  if (isLoading) {\n    return (\n      <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 xl:grid-cols-6 gap-3 md:gap-4\">\n        {Array.from({ length: 12 }).map((_, i) => (\n          <LoadingCard key={i} className=\"aspect-square\" />\n        ))}\n      </div>\n    );\n  }\n\n  // Show error state\n  if (error) {\n    toast({\n      title: \"Connection Error\",\n      description: \"Unable to load media files from server.\",\n      variant: \"destructive\",\n    });\n  }\n\n  const filteredFiles = mediaFiles.filter((file: any) => {\n    const matchesSearch = file.name.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesType = typeFilter === \"all\" || file.type === typeFilter;\n    return matchesSearch && matchesType;\n  });\n\n  const GridView = () => (\n    <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 xl:grid-cols-6 gap-3 md:gap-4\">\n      {filteredFiles.map((file: any) => {\n        const FileIcon = getFileIcon(file.type);\n        return (\n          <Card \n            key={file.id} \n            className=\"hover-elevate cursor-pointer\"\n            onClick={() => {\n              onSelectFile?.(file);\n            }}\n            data-testid={`file-card-${file.id}`}\n          >\n            <CardContent className=\"p-2 md:p-3\">\n              <div className=\"aspect-square rounded mb-3 bg-muted flex items-center justify-center overflow-hidden\">\n                {file.thumbnail ? (\n                  <img \n                    src={file.thumbnail} \n                    alt={file.name}\n                    className=\"w-full h-full object-cover\"\n                  />\n                ) : (\n                  <FileIcon className={`w-8 h-8 ${getFileTypeColor(file.type)}`} />\n                )}\n              </div>\n              \n              <div className=\"space-y-1\">\n                <p className=\"text-sm font-medium truncate\" title={file.name}>\n                  {file.name}\n                </p>\n                <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n                  <span>{file.size}</span>\n                  {file.used && (\n                    <Badge variant=\"secondary\" className=\"text-xs px-1\">In use</Badge>\n                  )}\n                </div>\n              </div>\n\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild onClick={(e) => e.stopPropagation()}>\n                  <Button \n                    variant=\"ghost\" \n                    size=\"icon\" \n                    className=\"absolute top-2 right-2 w-6 h-6 opacity-0 group-hover:opacity-100\"\n                    data-testid={`file-actions-${file.id}`}\n                  >\n                    <MoreHorizontal className=\"w-3 h-3\" />\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"end\">\n                  <DropdownMenuItem data-testid={`menu-download-${file.id}`}>\n                    <Download className=\"w-4 h-4 mr-2\" />\n                    Download\n                  </DropdownMenuItem>\n                  <DropdownMenuItem \n                    className=\"text-destructive\" \n                    data-testid={`menu-delete-${file.id}`}\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      handleDeleteMedia(file.id);\n                    }}\n                  >\n                    <Trash2 className=\"w-4 h-4 mr-2\" />\n                    Delete\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            </CardContent>\n          </Card>\n        );\n      })}\n    </div>\n  );\n\n  const ListView = () => (\n    <div className=\"space-y-2\">\n      {filteredFiles.map((file: any) => {\n        const FileIcon = getFileIcon(file.type);\n        return (\n          <Card \n            key={file.id} \n            className=\"hover-elevate cursor-pointer\"\n            onClick={() => {\n              onSelectFile?.(file);\n            }}\n            data-testid={`file-row-${file.id}`}\n          >\n            <CardContent className=\"p-3 md:p-4\">\n              <div className=\"flex items-center gap-4\">\n                <div className=\"w-12 h-12 rounded bg-muted flex items-center justify-center flex-shrink-0 overflow-hidden\">\n                  {file.thumbnail ? (\n                    <img \n                      src={file.thumbnail} \n                      alt={file.name}\n                      className=\"w-full h-full object-cover\"\n                    />\n                  ) : (\n                    <FileIcon className={`w-6 h-6 ${getFileTypeColor(file.type)}`} />\n                  )}\n                </div>\n                \n                <div className=\"flex-1 min-w-0\">\n                  <p className=\"font-medium truncate\">{file.name}</p>\n                  <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                    <span>{file.size}</span>\n                    {file.dimensions && <span>{file.dimensions}</span>}\n                    <span>{new Date(file.uploadDate).toLocaleDateString()}</span>\n                  </div>\n                </div>\n\n                <div className=\"flex items-center gap-2\">\n                  {file.used && (\n                    <Badge variant=\"secondary\">In use</Badge>\n                  )}\n                  \n                  <DropdownMenu>\n                    <DropdownMenuTrigger asChild onClick={(e) => e.stopPropagation()}>\n                      <Button variant=\"ghost\" size=\"icon\" data-testid={`file-actions-list-${file.id}`}>\n                        <MoreHorizontal className=\"w-4 h-4\" />\n                      </Button>\n                    </DropdownMenuTrigger>\n                    <DropdownMenuContent align=\"end\">\n                      <DropdownMenuItem>\n                        <Download className=\"w-4 h-4 mr-2\" />\n                        Download\n                      </DropdownMenuItem>\n                      <DropdownMenuItem \n                        className=\"text-destructive\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          handleDeleteMedia(file.id);\n                        }}\n                      >\n                        <Trash2 className=\"w-4 h-4 mr-2\" />\n                        Delete\n                      </DropdownMenuItem>\n                    </DropdownMenuContent>\n                  </DropdownMenu>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        );\n      })}\n    </div>\n  );\n\n  return (\n    <div className=\"p-4 md:p-6 space-y-4 md:space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-start justify-between gap-4\">\n        <div>\n          <h1 className=\"text-2xl md:text-3xl font-semibold\">Media Library</h1>\n          <p className=\"text-muted-foreground text-sm md:text-base\">Manage your images, videos, and documents</p>\n        </div>\n        <Button onClick={() => setLocation(\"/upload\")} data-testid=\"button-upload-media\" size=\"sm\" className=\"shrink-0\">\n          <Upload className=\"w-4 h-4 sm:mr-2\" />\n          <span className=\"hidden sm:inline\">Upload Files</span>\n        </Button>\n      </div>\n\n      {/* Filters and Controls */}\n      <Card>\n        <CardContent className=\"p-3 md:p-4\">\n          <div className=\"flex flex-col gap-4\">\n            <div className=\"flex flex-col sm:flex-row gap-3 sm:gap-4\">\n              <div className=\"relative flex-1\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search files...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10\"\n                  data-testid=\"input-media-search\"\n                />\n              </div>\n              \n              <Select value={typeFilter} onValueChange={setTypeFilter}>\n                <SelectTrigger className=\"w-full sm:w-[140px]\" data-testid=\"select-type-filter\">\n                  <Filter className=\"w-4 h-4 mr-2\" />\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Types</SelectItem>\n                  <SelectItem value=\"image\">Images</SelectItem>\n                  <SelectItem value=\"video\">Videos</SelectItem>\n                  <SelectItem value=\"document\">Documents</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"flex gap-2 justify-center sm:justify-end\">\n              <Button\n                variant={viewMode === \"grid\" ? \"default\" : \"outline\"}\n                size=\"icon\"\n                onClick={() => setViewMode(\"grid\")}\n                data-testid=\"button-grid-view\"\n              >\n                <Grid3x3 className=\"w-4 h-4\" />\n              </Button>\n              <Button\n                variant={viewMode === \"list\" ? \"default\" : \"outline\"}\n                size=\"icon\"\n                onClick={() => setViewMode(\"list\")}\n                data-testid=\"button-list-view\"\n              >\n                <List className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Media Content */}\n      <div>\n        {filteredFiles.length > 0 ? (\n          viewMode === \"grid\" ? <GridView /> : <ListView />\n        ) : (\n          <Card>\n            <CardContent className=\"text-center py-8 md:py-12\">\n              <ImageIcon className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium mb-2\">No files found</h3>\n              <p className=\"text-muted-foreground mb-4\">\n                {searchQuery || typeFilter !== \"all\" \n                  ? \"Try adjusting your search or filters\"\n                  : \"Upload your first file to get started\"}\n              </p>\n              {!searchQuery && typeFilter === \"all\" && (\n                <Button onClick={() => setLocation(\"/upload\")} data-testid=\"button-upload-first\">\n                  <Upload className=\"w-4 h-4 mr-2\" />\n                  Upload Files\n                </Button>\n              )}\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":13744},"client/src/components/MobileNavigation.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Sheet, SheetContent, SheetClose, SheetHeader, SheetTitle, SheetDescription } from \"@/components/ui/sheet\";\nimport { Menu, X } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport SimpleMobileNav from \"./SimpleMobileNav\";\n\ninterface MobileNavigationProps {\n  currentPage?: string;\n}\n\nexport default function MobileNavigation({ currentPage = \"dashboard\" }: MobileNavigationProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [location] = useLocation();\n\n  // Close mobile menu when route changes\n  useEffect(() => {\n    if (isOpen) {\n      if (import.meta.env.MODE === 'development') {\n        console.log('📱 [MOBILE NAV] Route changed, closing mobile menu:', {\n          newLocation: location,\n          timestamp: new Date().toISOString()\n        });\n      }\n      setIsOpen(false);\n    }\n  }, [location]); // Removed isOpen from dependencies to prevent immediate closing\n\n  // Debug logging for mobile menu state\n  useEffect(() => {\n    if (import.meta.env.MODE === 'development') {\n      console.log('📱 [MOBILE NAV] Menu state changed:', {\n        isOpen,\n        currentPage,\n        location,\n        timestamp: new Date().toISOString()\n      });\n    }\n  }, [isOpen, currentPage, location]);\n\n  return (\n    <>\n      {/* Custom hamburger button with proper icon state */}\n      <Button \n        variant=\"ghost\" \n        size=\"icon\" \n        className=\"lg:hidden\"\n        onClick={() => setIsOpen(!isOpen)}\n        aria-label={isOpen ? \"Close menu\" : \"Open menu\"}\n        data-testid=\"button-mobile-menu\"\n      >\n        {isOpen ? <X className=\"w-5 h-5\" /> : <Menu className=\"w-5 h-5\" />}\n      </Button>\n      \n      <Sheet open={isOpen} onOpenChange={setIsOpen}>\n        <SheetContent \n          side=\"left\" \n          className=\"p-0 w-[min(20rem,90vw)] h-[100dvh] pt-[env(safe-area-inset-top)] pb-[env(safe-area-inset-bottom)]\"\n          data-testid=\"sheet-mobile-nav\"\n          aria-describedby=\"mobile-nav-description\"\n        >\n          <SheetHeader className=\"p-4 border-b\">\n            <SheetTitle className=\"text-left font-bold text-foreground\">\n              Penkora\n            </SheetTitle>\n            <SheetDescription id=\"mobile-nav-description\" className=\"sr-only\">\n              Navigation menu for Penkora CMS with content management options\n            </SheetDescription>\n          </SheetHeader>\n          <div className=\"overflow-y-auto flex-1\">\n            <SimpleMobileNav \n              activeItem={currentPage}\n              onNavigate={() => setIsOpen(false)}\n            />\n          </div>\n        </SheetContent>\n      </Sheet>\n    </>\n  );\n}","size_bytes":2710},"client/src/components/PostsList.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Search, \n  Filter, \n  Plus, \n  Edit, \n  Trash2, \n  Eye, \n  Calendar,\n  MoreHorizontal,\n  FileText\n} from \"lucide-react\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\n\ninterface PostsListProps {\n  onCreatePost?: () => void;\n  onEditPost?: (id: string) => void;\n}\n\nexport default function PostsList({ onCreatePost, onEditPost }: PostsListProps) {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n\n  // TODO: Remove mock data\n  const posts = [\n    {\n      id: \"1\",\n      title: \"Getting Started with React Development\",\n      excerpt: \"A comprehensive guide to building modern React applications...\",\n      status: \"published\",\n      author: \"John Doe\",\n      category: \"Tutorial\",\n      publishDate: \"2024-01-15\",\n      views: 1247,\n      featured: true\n    },\n    {\n      id: \"2\", \n      title: \"Advanced TypeScript Patterns\",\n      excerpt: \"Exploring advanced TypeScript features and design patterns...\",\n      status: \"draft\",\n      author: \"Jane Smith\",\n      category: \"Programming\",\n      publishDate: null,\n      views: 0,\n      featured: false\n    },\n    {\n      id: \"3\",\n      title: \"Database Design Best Practices\", \n      excerpt: \"Learn how to design scalable and efficient database schemas...\",\n      status: \"scheduled\",\n      author: \"Mike Johnson\",\n      category: \"Database\",\n      publishDate: \"2024-01-20\",\n      views: 0,\n      featured: false\n    },\n    {\n      id: \"4\",\n      title: \"Modern CSS Techniques\",\n      excerpt: \"CSS Grid, Flexbox, and modern layout techniques explained...\",\n      status: \"published\",\n      author: \"Sarah Wilson\",\n      category: \"CSS\",\n      publishDate: \"2024-01-10\",\n      views: 856,\n      featured: true\n    }\n  ];\n\n  const getStatusBadge = (status: string) => {\n    const variants = {\n      published: { variant: \"default\" as const, color: \"bg-green-500\" },\n      draft: { variant: \"secondary\" as const, color: \"bg-yellow-500\" },\n      scheduled: { variant: \"outline\" as const, color: \"bg-blue-500\" }\n    };\n    \n    return variants[status as keyof typeof variants] || variants.draft;\n  };\n\n  const filteredPosts = posts.filter(post => {\n    const matchesSearch = post.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         post.excerpt.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesStatus = statusFilter === \"all\" || post.status === statusFilter;\n    return matchesSearch && matchesStatus;\n  });\n\n  return (\n    <div className=\"p-4 md:p-6 space-y-4 md:space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-start justify-between gap-4\">\n        <div>\n          <h1 className=\"text-2xl md:text-3xl font-semibold\">Posts</h1>\n          <p className=\"text-muted-foreground text-sm md:text-base\">Manage your content and articles</p>\n        </div>\n        <Button onClick={onCreatePost} data-testid=\"button-create-post\" size=\"sm\" className=\"shrink-0\">\n          <Plus className=\"w-4 h-4 sm:mr-2\" />\n          <span className=\"hidden sm:inline\">New Post</span>\n        </Button>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardContent className=\"p-3 md:p-4\">\n          <div className=\"flex flex-col sm:flex-row gap-3 sm:gap-4\">\n            <div className=\"relative flex-1\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search posts...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-10\"\n                data-testid=\"input-posts-search\"\n              />\n            </div>\n            <div className=\"flex gap-2 shrink-0\">\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger className=\"w-full sm:w-[140px]\" data-testid=\"select-status-filter\">\n                  <Filter className=\"w-4 h-4 mr-2\" />\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Status</SelectItem>\n                  <SelectItem value=\"published\">Published</SelectItem>\n                  <SelectItem value=\"draft\">Draft</SelectItem>\n                  <SelectItem value=\"scheduled\">Scheduled</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Posts List */}\n      <div className=\"space-y-4\">\n        {filteredPosts.map((post) => (\n          <Card key={post.id} className=\"hover-elevate\" data-testid={`post-card-${post.id}`}>\n            <CardContent className=\"p-4 md:p-6\">\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center gap-3 mb-2\">\n                    <h3 className=\"text-lg font-semibold\">{post.title}</h3>\n                    {post.featured && (\n                      <Badge variant=\"outline\" className=\"text-xs\">Featured</Badge>\n                    )}\n                    <Badge \n                      variant={getStatusBadge(post.status).variant}\n                      className=\"text-xs capitalize\"\n                    >\n                      {post.status}\n                    </Badge>\n                  </div>\n                  \n                  <p className=\"text-muted-foreground mb-3 line-clamp-2\">\n                    {post.excerpt}\n                  </p>\n                  \n                  <div className=\"flex items-center gap-2 md:gap-4 text-xs md:text-sm text-muted-foreground flex-wrap\">\n                    <span>By {post.author}</span>\n                    <span>•</span>\n                    <span>{post.category}</span>\n                    {post.publishDate && (\n                      <>\n                        <span>•</span>\n                        <span className=\"flex items-center gap-1\">\n                          <Calendar className=\"w-3 h-3\" />\n                          {new Date(post.publishDate).toLocaleDateString()}\n                        </span>\n                      </>\n                    )}\n                    <span>•</span>\n                    <span className=\"flex items-center gap-1\">\n                      <Eye className=\"w-3 h-3\" />\n                      {post.views.toLocaleString()} views\n                    </span>\n                  </div>\n                </div>\n\n                <DropdownMenu>\n                  <DropdownMenuTrigger asChild>\n                    <Button variant=\"ghost\" size=\"icon\" data-testid={`button-post-actions-${post.id}`}>\n                      <MoreHorizontal className=\"w-4 h-4\" />\n                    </Button>\n                  </DropdownMenuTrigger>\n                  <DropdownMenuContent align=\"end\">\n                    <DropdownMenuItem \n                      onClick={() => {\n                        onEditPost?.(post.id);\n                        console.log(`Edit post: ${post.id}`);\n                      }}\n                      data-testid={`menu-edit-${post.id}`}\n                    >\n                      <Edit className=\"w-4 h-4 mr-2\" />\n                      Edit\n                    </DropdownMenuItem>\n                    <DropdownMenuItem data-testid={`menu-view-${post.id}`}>\n                      <Eye className=\"w-4 h-4 mr-2\" />\n                      Preview\n                    </DropdownMenuItem>\n                    <DropdownMenuItem className=\"text-destructive\" data-testid={`menu-delete-${post.id}`}>\n                      <Trash2 className=\"w-4 h-4 mr-2\" />\n                      Delete\n                    </DropdownMenuItem>\n                  </DropdownMenuContent>\n                </DropdownMenu>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {filteredPosts.length === 0 && (\n        <Card>\n          <CardContent className=\"text-center py-8 md:py-12\">\n            <FileText className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n            <h3 className=\"text-lg font-medium mb-2\">No posts found</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              {searchQuery || statusFilter !== \"all\" \n                ? \"Try adjusting your search or filters\"\n                : \"Get started by creating your first post\"}\n            </p>\n            {!searchQuery && statusFilter === \"all\" && (\n              <Button onClick={onCreatePost} data-testid=\"button-create-first-post\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Create your first post\n              </Button>\n            )}\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":9157},"client/src/components/TopNavbar.tsx":{"content":"import { Search, Bell, User, Settings, LogOut, PanelLeft, PanelLeftOpen, Menu } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ThemeToggle } from \"./ThemeToggle\";\nimport { useSidebar } from \"@/components/ui/sidebar\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useLocation } from \"wouter\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface TopNavbarProps {\n  onSearch?: (query: string) => void;\n  currentPage?: string;\n}\n\nexport default function TopNavbar({ onSearch, currentPage }: TopNavbarProps) {\n  const { state, toggleSidebar, isMobile, openMobile } = useSidebar();\n  const { user, logout, isAuthenticated } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const handleSearch = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n    const query = formData.get(\"search\") as string;\n    onSearch?.(query);\n    console.log(\"Search triggered:\", query);\n  };\n\n  const handleLogout = async () => {\n    try {\n      await logout();\n      toast({\n        title: \"Logged out successfully\",\n        description: \"You have been signed out of your account.\",\n      });\n      setLocation(\"/login\");\n    } catch (error) {\n      toast({\n        title: \"Logout failed\",\n        description: \"There was an error signing you out. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleSettings = () => {\n    setLocation(\"/settings\");\n  };\n\n  return (\n    <header className=\"flex items-center justify-between p-3 md:p-4 border-b bg-card\">\n      <div className=\"flex items-center gap-3 md:gap-6 flex-1\">\n        {/* Unified Sidebar Toggle - Contextual icons for mobile/desktop */}\n        <TooltipProvider>\n          <Tooltip>\n            <TooltipTrigger asChild>\n              <Button \n                variant=\"ghost\" \n                size=\"icon\" \n                className=\"flex transition-transform duration-200 hover:scale-105\"\n                onClick={toggleSidebar}\n                aria-pressed={isMobile ? openMobile : state === \"expanded\"}\n                data-testid=\"button-sidebar-toggle\"\n              >\n                {isMobile ? (\n                  <Menu className=\"w-5 h-5\" />\n                ) : (\n                  state === \"collapsed\" ? \n                    <PanelLeft className=\"w-5 h-5\" /> : \n                    <PanelLeftOpen className=\"w-5 h-5\" />\n                )}\n                <span className=\"sr-only\">\n                  {isMobile ? \"Open navigation menu\" : (state === \"collapsed\" ? \"Open sidebar\" : \"Close sidebar\")}\n                </span>\n              </Button>\n            </TooltipTrigger>\n            <TooltipContent side=\"bottom\">\n              <p>{isMobile ? \"Open menu\" : (state === \"collapsed\" ? \"Open sidebar\" : \"Close sidebar\")}</p>\n            </TooltipContent>\n          </Tooltip>\n        </TooltipProvider>\n        \n        <div className=\"flex items-center gap-2 md:gap-3\">\n          <div className=\"flex items-center gap-2\">\n            <div className=\"w-8 h-8 rounded-lg bg-primary flex items-center justify-center\">\n              <span className=\"text-primary-foreground font-bold text-sm\">P</span>\n            </div>\n            <h1 className=\"type-heading font-bold text-foreground\">\n              Penkora\n            </h1>\n          </div>\n        </div>\n        \n        <form onSubmit={handleSearch} className=\"relative hidden md:block flex-1 max-w-md\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n          <Input\n            name=\"search\"\n            placeholder=\"Search posts, users, media...\"\n            className=\"pl-10 w-full\"\n            data-testid=\"input-global-search\"\n          />\n        </form>\n      </div>\n\n      <div className=\"flex items-center gap-2 md:gap-4\">\n        {/* Mobile Search Button */}\n        <Button \n          variant=\"ghost\" \n          size=\"icon\" \n          className=\"md:hidden interactive focus-ring mobile-touch-target\" \n          onClick={() => {\n            // Toggle mobile search (could expand to show search input)\n            console.log('Mobile search clicked');\n          }}\n          data-testid=\"button-mobile-search\"\n        >\n          <Search className=\"w-5 h-5\" />\n        </Button>\n        \n        {/* Theme Toggle */}\n        <ThemeToggle />\n        \n        {/* Notifications */}\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button variant=\"ghost\" size=\"icon\" className=\"relative interactive focus-ring mobile-touch-target\" data-testid=\"button-notifications\">\n              <Bell className=\"w-5 h-5\" />\n              <Badge className=\"absolute -top-1 -right-1 w-5 h-5 rounded-full p-0 flex items-center justify-center text-xs\">\n                3\n              </Badge>\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"end\" className=\"w-80\">\n            <div className=\"p-4\">\n              <h4 className=\"font-medium mb-2\">Notifications</h4>\n              <div className=\"space-y-2\">\n                <div className=\"p-2 rounded hover-elevate\">\n                  <p className=\"text-sm\">New post pending approval</p>\n                  <p className=\"text-xs text-muted-foreground\">2 minutes ago</p>\n                </div>\n                <div className=\"p-2 rounded hover-elevate\">\n                  <p className=\"text-sm\">Scheduled post published</p>\n                  <p className=\"text-xs text-muted-foreground\">1 hour ago</p>\n                </div>\n                <div className=\"p-2 rounded hover-elevate\">\n                  <p className=\"text-sm\">New user registered</p>\n                  <p className=\"text-xs text-muted-foreground\">3 hours ago</p>\n                </div>\n              </div>\n            </div>\n          </DropdownMenuContent>\n        </DropdownMenu>\n\n        {/* User Profile */}\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button variant=\"ghost\" size=\"icon\" className=\"interactive focus-ring mobile-touch-target\" data-testid=\"button-user-profile\">\n              <User className=\"w-5 h-5\" />\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"end\">\n            <DropdownMenuItem onClick={handleSettings} data-testid=\"menu-item-settings\">\n              <Settings className=\"w-4 h-4 mr-2\" />\n              Settings\n            </DropdownMenuItem>\n            <DropdownMenuSeparator />\n            <DropdownMenuItem onClick={handleLogout} data-testid=\"menu-item-logout\">\n              <LogOut className=\"w-4 h-4 mr-2\" />\n              Logout\n            </DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </div>\n    </header>\n  );\n}","size_bytes":7150},"client/src/components/UsersManager.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  Search,\n  Plus,\n  Filter,\n  Edit,\n  Trash2,\n  MoreHorizontal,\n  Shield,\n  User,\n  Crown,\n  Loader2\n} from \"lucide-react\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\nimport { useUsers, useDeleteUser } from \"@/hooks/useUsers\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport type { User as UserType } from \"@shared/schema\";\nimport UserFormDialog from \"./UserFormDialog\";\n\ninterface UsersManagerProps {\n  onCreateUser?: () => void;\n  onEditUser?: (id: string) => void;\n}\n\nexport default function UsersManager({ onCreateUser, onEditUser }: UsersManagerProps) {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [roleFilter, setRoleFilter] = useState(\"all\");\n  const [deleteUserId, setDeleteUserId] = useState<string | null>(null);\n  const [userFormOpen, setUserFormOpen] = useState(false);\n  const [editingUser, setEditingUser] = useState<UserType | null>(null);\n  const [formMode, setFormMode] = useState<\"create\" | \"edit\">(\"create\");\n  \n  const { toast } = useToast();\n  const { user: currentUser } = useAuth();\n  const { data: users = [], isLoading, error } = useUsers();\n  const deleteUserMutation = useDeleteUser();\n\n  const handleDeleteUser = async (userId: string) => {\n    try {\n      await deleteUserMutation.mutateAsync(userId);\n      toast({\n        title: \"Success\",\n        description: \"User deleted successfully\",\n      });\n      setDeleteUserId(null);\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete user\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleCreateUser = () => {\n    setFormMode(\"create\");\n    setEditingUser(null);\n    setUserFormOpen(true);\n    onCreateUser?.();\n  };\n\n  const handleEditUser = (user: UserType) => {\n    setFormMode(\"edit\");\n    setEditingUser(user);\n    setUserFormOpen(true);\n    onEditUser?.(user.id);\n  };\n\n  const getRoleIcon = (role: string) => {\n    switch (role) {\n      case \"admin\": return Crown;\n      case \"editor\": return Shield;\n      case \"author\": return User;\n      default: return User;\n    }\n  };\n\n  const getRoleColor = (role: string) => {\n    switch (role) {\n      case \"admin\": return \"text-red-500\";\n      case \"editor\": return \"text-blue-500\"; \n      case \"author\": return \"text-green-500\";\n      default: return \"text-gray-500\";\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    return status === \"active\" \n      ? { variant: \"default\" as const, color: \"bg-green-500\" }\n      : { variant: \"secondary\" as const, color: \"bg-gray-500\" };\n  };\n\n  const filteredUsers = users.filter((user: UserType) => {\n    const displayName = user.displayName || user.username;\n    const matchesSearch = displayName.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         (user.email && user.email.toLowerCase().includes(searchQuery.toLowerCase()));\n    const matchesRole = roleFilter === \"all\" || user.role === roleFilter;\n    return matchesSearch && matchesRole;\n  });\n\n  // Show loading state\n  if (isLoading) {\n    return (\n      <div className=\"p-4 md:p-6 space-y-4 md:space-y-6\">\n        <div className=\"flex items-start justify-between gap-4\">\n          <div>\n            <h1 className=\"text-2xl md:text-3xl font-semibold\">Users & Roles</h1>\n            <p className=\"text-muted-foreground text-sm md:text-base\">Manage user accounts and permissions</p>\n          </div>\n          <Button disabled size=\"sm\" className=\"shrink-0\">\n            <Plus className=\"w-4 h-4 sm:mr-2\" />\n            <span className=\"hidden sm:inline\">New User</span>\n          </Button>\n        </div>\n        <Card>\n          <CardContent className=\"p-3 md:p-4\">\n            <div className=\"flex flex-col sm:flex-row gap-4\">\n              <Skeleton className=\"h-10 flex-1\" />\n              <Skeleton className=\"h-10 w-full sm:w-[140px]\" />\n            </div>\n          </CardContent>\n        </Card>\n        <div className=\"space-y-4\">\n          {[1, 2, 3].map((i) => (\n            <Card key={i}>\n              <CardContent className=\"p-4 md:p-6\">\n                <div className=\"flex items-center gap-4\">\n                  <Skeleton className=\"w-12 h-12 rounded-full\" />\n                  <div className=\"flex-1 space-y-2\">\n                    <Skeleton className=\"h-4 w-[200px]\" />\n                    <Skeleton className=\"h-3 w-[150px]\" />\n                    <Skeleton className=\"h-3 w-[250px]\" />\n                  </div>\n                  <Skeleton className=\"w-8 h-8\" />\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  // Show error state\n  if (error) {\n    return (\n      <div className=\"p-4 md:p-6 space-y-4 md:space-y-6\">\n        <div className=\"flex items-start justify-between gap-4\">\n          <div>\n            <h1 className=\"text-2xl md:text-3xl font-semibold\">Users & Roles</h1>\n            <p className=\"text-muted-foreground text-sm md:text-base\">Manage user accounts and permissions</p>\n          </div>\n          <Button onClick={handleCreateUser} data-testid=\"button-create-user\" size=\"sm\" className=\"shrink-0\">\n            <Plus className=\"w-4 h-4 sm:mr-2\" />\n            <span className=\"hidden sm:inline\">New User</span>\n          </Button>\n        </div>\n        <Card>\n          <CardContent className=\"text-center py-8 md:py-12\">\n            <User className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n            <h3 className=\"text-lg font-medium mb-2\">Failed to load users</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              There was an error loading the user list. Please try again.\n            </p>\n            <Button variant=\"outline\" onClick={() => window.location.reload()}>\n              Try Again\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-4 md:p-6 space-y-4 md:space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-start justify-between gap-4\">\n        <div>\n          <h1 className=\"text-2xl md:text-3xl font-semibold\">Users & Roles</h1>\n          <p className=\"text-muted-foreground text-sm md:text-base\">Manage user accounts and permissions</p>\n        </div>\n        <Button onClick={handleCreateUser} data-testid=\"button-create-user\" size=\"sm\" className=\"shrink-0\">\n          <Plus className=\"w-4 h-4 sm:mr-2\" />\n          <span className=\"hidden sm:inline\">New User</span>\n        </Button>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardContent className=\"p-3 md:p-4\">\n          <div className=\"flex flex-col sm:flex-row gap-4\">\n            <div className=\"relative flex-1\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search users...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-10\"\n                data-testid=\"input-users-search\"\n              />\n            </div>\n            <Select value={roleFilter} onValueChange={setRoleFilter}>\n              <SelectTrigger className=\"w-full sm:w-[140px]\" data-testid=\"select-role-filter\">\n                <Filter className=\"w-4 h-4 mr-2\" />\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Roles</SelectItem>\n                <SelectItem value=\"admin\">Admin</SelectItem>\n                <SelectItem value=\"editor\">Editor</SelectItem>\n                <SelectItem value=\"author\">Author</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Users List */}\n      <div className=\"space-y-4\">\n        {filteredUsers.map((user: UserType) => {\n          const RoleIcon = getRoleIcon(user.role);\n          const statusBadge = getStatusBadge(\"active\");\n          \n          return (\n            <Card key={user.id} className=\"hover-elevate\" data-testid={`user-card-${user.id}`}>\n              <CardContent className=\"p-4 md:p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-4 flex-1\">\n                    <Avatar className=\"w-12 h-12\">\n                      <AvatarImage src={user.avatar || undefined} alt={user.displayName || user.username} />\n                      <AvatarFallback>\n                        {(user.displayName || user.username).slice(0, 2).toUpperCase()}\n                      </AvatarFallback>\n                    </Avatar>\n                    \n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center gap-3 mb-1\">\n                        <h3 className=\"font-semibold\">{user.displayName || user.username}</h3>\n                        <Badge \n                          variant=\"default\"\n                          className=\"text-xs capitalize\"\n                        >\n                          active\n                        </Badge>\n                      </div>\n                      \n                      <p className=\"text-sm text-muted-foreground mb-2\">{user.email || 'No email'}</p>\n                      \n                      <div className=\"flex items-center gap-2 md:gap-4 text-xs md:text-sm text-muted-foreground flex-wrap\">\n                        <div className=\"flex items-center gap-1\">\n                          <RoleIcon className={`w-4 h-4 ${getRoleColor(user.role)}`} />\n                          <span className=\"capitalize\">{user.role}</span>\n                        </div>\n                        <span>•</span>\n                        <span>Member since {new Date(user.createdAt || Date.now()).toLocaleDateString()}</span>\n                      </div>\n                    </div>\n                  </div>\n\n                  <DropdownMenu>\n                    <DropdownMenuTrigger asChild>\n                      <Button variant=\"ghost\" size=\"icon\" data-testid={`button-user-actions-${user.id}`}>\n                        <MoreHorizontal className=\"w-4 h-4\" />\n                      </Button>\n                    </DropdownMenuTrigger>\n                    <DropdownMenuContent align=\"end\">\n                      <DropdownMenuItem\n                        onClick={() => handleEditUser(user)}\n                        data-testid={`menu-edit-${user.id}`}\n                      >\n                        <Edit className=\"w-4 h-4 mr-2\" />\n                        Edit User\n                      </DropdownMenuItem>\n                      <DropdownMenuItem \n                        onClick={() => {\n                          toast({\n                            title: \"Coming Soon\",\n                            description: \"User permissions management will be available soon\",\n                          });\n                        }}\n                        data-testid={`menu-permissions-${user.id}`}\n                      >\n                        <Shield className=\"w-4 h-4 mr-2\" />\n                        Permissions\n                      </DropdownMenuItem>\n                      {user.role !== \"admin\" && currentUser?.id !== user.id && (\n                        <DropdownMenuItem \n                          className=\"text-destructive\"\n                          onClick={() => setDeleteUserId(user.id)}\n                          disabled={deleteUserMutation.isPending}\n                          data-testid={`menu-delete-${user.id}`}\n                        >\n                          {deleteUserMutation.isPending ? (\n                            <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                          ) : (\n                            <Trash2 className=\"w-4 h-4 mr-2\" />\n                          )}\n                          Delete User\n                        </DropdownMenuItem>\n                      )}\n                    </DropdownMenuContent>\n                  </DropdownMenu>\n                </div>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n\n      {filteredUsers.length === 0 && (\n        <Card>\n          <CardContent className=\"text-center py-8 md:py-12\">\n            <User className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n            <h3 className=\"text-lg font-medium mb-2\">No users found</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              {searchQuery || roleFilter !== \"all\" \n                ? \"Try adjusting your search or filters\"\n                : \"Create your first user account\"}\n            </p>\n            {!searchQuery && roleFilter === \"all\" && (\n              <Button onClick={handleCreateUser} data-testid=\"button-create-first-user\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Create User\n              </Button>\n            )}\n          </CardContent>\n        </Card>\n      )}\n      \n      {/* Delete Confirmation Dialog */}\n      <AlertDialog open={deleteUserId !== null} onOpenChange={() => setDeleteUserId(null)}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Delete User</AlertDialogTitle>\n            <AlertDialogDescription>\n              Are you sure you want to delete this user? This action cannot be undone and will permanently remove the user account and all associated data.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel disabled={deleteUserMutation.isPending}>Cancel</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={() => deleteUserId && handleDeleteUser(deleteUserId)}\n              disabled={deleteUserMutation.isPending}\n              className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n            >\n              {deleteUserMutation.isPending ? (\n                <>\n                  <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                  Deleting...\n                </>\n              ) : (\n                \"Delete User\"\n              )}\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n\n      {/* User Form Dialog */}\n      <UserFormDialog\n        open={userFormOpen}\n        onOpenChange={setUserFormOpen}\n        user={editingUser}\n        mode={formMode}\n      />\n    </div>\n  );\n}","size_bytes":15164},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/examples/AdminLayout.tsx":{"content":"import AdminLayout from '../AdminLayout';\nimport Dashboard from '../Dashboard';\n\nexport default function AdminLayoutExample() {\n  return (\n    <AdminLayout \n      currentPage=\"dashboard\"\n      onNavigate={(page) => console.log('Navigate to:', page)}\n    >\n      <Dashboard onQuickAction={(action) => console.log('Quick action:', action)} />\n    </AdminLayout>\n  );\n}","size_bytes":366},"client/src/components/examples/AdminSidebar.tsx":{"content":"import AdminSidebar from '../AdminSidebar';\n\nexport default function AdminSidebarExample() {\n  return (\n    <div className=\"h-screen\">\n      <AdminSidebar \n        activeItem=\"dashboard\"\n        onItemClick={(item) => console.log('Navigate to:', item)} \n      />\n    </div>\n  );\n}","size_bytes":280},"client/src/components/examples/Dashboard.tsx":{"content":"import Dashboard from '../Dashboard';\n\nexport default function DashboardExample() {\n  return (\n    <Dashboard onQuickAction={(action) => console.log('Quick action:', action)} />\n  );\n}","size_bytes":184},"client/src/components/examples/LayoutManager.tsx":{"content":"import LayoutManager from '../LayoutManager';\n\nexport default function LayoutManagerExample() {\n  return (\n    <LayoutManager \n      onAddSection={(type) => console.log('Add section:', type)}\n      onEditSection={(id) => console.log('Edit section:', id)}\n    />\n  );\n}","size_bytes":268},"client/src/components/examples/MediaLibrary.tsx":{"content":"import MediaLibrary from '../MediaLibrary';\n\nexport default function MediaLibraryExample() {\n  return (\n    <MediaLibrary \n      onUpload={() => console.log('Upload files')}\n      onSelectFile={(file) => console.log('Selected file:', file)}\n    />\n  );\n}","size_bytes":254},"client/src/components/examples/PostsList.tsx":{"content":"import PostsList from '../PostsList';\n\nexport default function PostsListExample() {\n  return (\n    <PostsList \n      onCreatePost={() => console.log('Create new post')}\n      onEditPost={(id) => console.log('Edit post:', id)}\n    />\n  );\n}","size_bytes":239},"client/src/components/examples/TopNavbar.tsx":{"content":"import TopNavbar from '../TopNavbar';\n\nexport default function TopNavbarExample() {\n  return (\n    <TopNavbar onSearch={(query) => console.log('Search:', query)} />\n  );\n}","size_bytes":171},"client/src/components/examples/UsersManager.tsx":{"content":"import UsersManager from '../UsersManager';\n\nexport default function UsersManagerExample() {\n  return (\n    <UsersManager \n      onCreateUser={() => console.log('Create new user')}\n      onEditUser={(id) => console.log('Edit user:', id)}\n    />\n  );\n}","size_bytes":251},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"replit.md":{"content":"# Overview\n\nPenkora is a modern, responsive Content Management System (CMS) built with React, TypeScript, and Express. The application is designed for seamless content creation and management across desktop, tablet, and mobile devices. It features a comprehensive admin interface with dashboard analytics, content management, media library, user management, and layout customization tools.\n\nThe project is currently in active development, with foundational components and UI established but requiring implementation of core backend functionality, database integration, and proper routing systems.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React 18 with TypeScript for type safety and modern component patterns\n- **Routing**: Wouter for lightweight client-side routing (needs implementation for proper URL-based navigation)\n- **State Management**: React Query (@tanstack/react-query) for server state management and caching\n- **UI Components**: Radix UI primitives with custom shadcn/ui components for consistent design system\n- **Styling**: Tailwind CSS with custom design tokens and theme variables for light/dark mode support\n- **Build Tool**: Vite for fast development and optimized production builds\n\n## Backend Architecture\n- **Server**: Express.js with TypeScript for API endpoints and middleware\n- **Database ORM**: Drizzle ORM for type-safe database operations and schema management\n- **Session Management**: Planned integration with connect-pg-simple for PostgreSQL-based sessions\n- **Development Tools**: Hot module replacement and error overlay for enhanced developer experience\n\n## Design System\n- **Component Library**: Custom components built on Radix UI primitives following Fluent Design principles\n- **Typography**: Inter font family with systematic weight and size scales\n- **Color System**: CSS custom properties with automatic light/dark mode switching\n- **Responsive Design**: Mobile-first approach with collapsible sidebar and adaptive layouts\n- **Accessibility**: ARIA-compliant components with keyboard navigation and screen reader support\n\n## Data Layer\n- **Database Schema**: Drizzle schema definitions in shared/schema.ts with PostgreSQL-specific types\n- **Storage Interface**: Abstracted storage layer with in-memory implementation for development (needs PostgreSQL integration)\n- **API Design**: RESTful endpoints with standardized error handling and JSON responses\n\n## Development Architecture\n- **Monorepo Structure**: Shared code between client and server with TypeScript path mapping\n- **Hot Reloading**: Vite development server with Express middleware integration\n- **Error Handling**: Comprehensive error boundaries and development-mode logging\n- **Type Safety**: Strict TypeScript configuration with shared types between frontend and backend\n\n# External Dependencies\n\n## Core Framework Dependencies\n- **@neondatabase/serverless**: PostgreSQL database connection via Neon's serverless driver\n- **drizzle-orm & drizzle-kit**: Type-safe ORM with schema migrations and PostgreSQL dialect support\n- **@tanstack/react-query**: Server state management, caching, and data synchronization\n- **wouter**: Lightweight routing library for client-side navigation\n\n## UI and Design Dependencies\n- **@radix-ui/react-***: Comprehensive collection of unstyled, accessible UI primitives (accordion, dialog, dropdown, etc.)\n- **tailwindcss**: Utility-first CSS framework with custom design system configuration\n- **class-variance-authority & clsx**: Dynamic className composition and variant management\n- **lucide-react**: Modern icon library with consistent design language\n\n## Development and Build Tools\n- **vite**: Fast build tool with hot module replacement and optimized bundling\n- **typescript**: Static type checking and enhanced developer experience\n- **@replit/vite-plugin-***: Replit-specific development tools and error handling\n\n## Form and Validation\n- **react-hook-form & @hookform/resolvers**: Form state management with validation\n- **zod & drizzle-zod**: Runtime type validation and schema inference\n\n## Utility Libraries\n- **date-fns**: Date manipulation and formatting utilities\n- **cmdk**: Command palette and search interface components\n- **nanoid**: Unique ID generation for client-side operations\n\nNote: The application is configured to use PostgreSQL via Neon's serverless platform, with Drizzle ORM handling database operations and migrations. Session management will be implemented using PostgreSQL-backed sessions once the database integration is completed.","size_bytes":4604},"client/src/components/SimpleMobileNav.tsx":{"content":"import {\n  Home,\n  FileText,\n  Plus,\n  Tag,\n  Layout,\n  Image,\n  Upload,\n  Calendar,\n  Users,\n  BarChart3,\n  Settings,\n  Trash2,\n} from \"lucide-react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Link, useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\n\ninterface SimpleMobileNavProps {\n  activeItem?: string;\n  onNavigate?: () => void;\n}\n\nexport default function SimpleMobileNav({ activeItem = \"dashboard\", onNavigate }: SimpleMobileNavProps) {\n  const [location] = useLocation();\n\n  const menuItems = [\n    {\n      title: \"Dashboard\",\n      url: \"/\",\n      icon: Home,\n    },\n  ];\n\n  const contentItems = [\n    {\n      title: \"All Posts\",\n      url: \"/posts\",\n      icon: FileText,\n      badge: \"124\",\n    },\n    {\n      title: \"New Post\",\n      url: \"/posts/new\",\n      icon: Plus,\n    },\n    {\n      title: \"Categories / Tags\",\n      url: \"/categories\",\n      icon: Tag,\n    },\n  ];\n\n  const layoutItems = [\n    {\n      title: \"Sections Board\",\n      url: \"/layout/sections\",\n      icon: Layout,\n    },\n    {\n      title: \"Hero / Featured\",\n      url: \"/layout/hero\",\n      icon: Layout,\n    },\n    {\n      title: \"Sidebars & Widgets\",\n      url: \"/layout/widgets\",\n      icon: Layout,\n    },\n  ];\n\n  const mediaItems = [\n    {\n      title: \"Media Library\",\n      url: \"/media\",\n      icon: Image,\n      badge: \"2.1k\",\n    },\n    {\n      title: \"Upload\",\n      url: \"/media/upload\",\n      icon: Upload,\n    },\n  ];\n\n  const systemItems = [\n    {\n      title: \"Scheduling\",\n      url: \"/schedule\",\n      icon: Calendar,\n    },\n    {\n      title: \"Users & Roles\",\n      url: \"/users\",\n      icon: Users,\n    },\n    {\n      title: \"Analytics & Reports\",\n      url: \"/analytics\",\n      icon: BarChart3,\n    },\n    {\n      title: \"Settings\",\n      url: \"/settings\",\n      icon: Settings,\n    },\n    {\n      title: \"Trash / Archived\",\n      url: \"/trash\",\n      icon: Trash2,\n    },\n  ];\n\n  const isActiveRoute = (url: string) => {\n    if (url === \"/\" && location === \"/\") return true;\n    if (url !== \"/\" && location.startsWith(url)) return true;\n    return false;\n  };\n\n  const renderMenuSection = (items: any[], title?: string) => (\n    <div className=\"px-4 py-2\">\n      {title && (\n        <h4 className=\"type-caption font-medium mb-2 px-2\">\n          {title}\n        </h4>\n      )}\n      <nav className=\"space-y-1\">\n        {items.map((item) => (\n          <Link\n            key={item.url}\n            href={item.url}\n            onClick={() => {\n              if (import.meta.env.DEV) {\n                console.log('🔗 [MOBILE NAV] Navigation clicked:', {\n                  from: location,\n                  to: item.url,\n                  title: item.title,\n                  timestamp: new Date().toISOString()\n                });\n              }\n              onNavigate?.();\n            }}\n            className={cn(\n              \"flex items-center gap-3 px-2 py-2 text-sm rounded-md interactive hover:bg-accent hover:text-accent-foreground focus-ring mobile-touch-target\",\n              isActiveRoute(item.url) \n                ? \"bg-accent text-accent-foreground font-medium\" \n                : \"text-foreground\"\n            )}\n            data-testid={`mobile-nav-${item.url.replace(/\\//g, '-').replace(/^-/, '')}`}\n          >\n            <item.icon className=\"w-4 h-4\" />\n            <span className=\"flex-1\">{item.title}</span>\n            {item.badge && (\n              <Badge variant=\"secondary\" className=\"text-xs\">\n                {item.badge}\n              </Badge>\n            )}\n          </Link>\n        ))}\n      </nav>\n    </div>\n  );\n\n  return (\n    <div className=\"flex flex-col h-full\">\n      {renderMenuSection(menuItems)}\n      {renderMenuSection(contentItems, \"Content\")}\n      {renderMenuSection(layoutItems, \"Layout Manager\")}\n      {renderMenuSection(mediaItems, \"Media Library\")}\n      {renderMenuSection(systemItems, \"System\")}\n    </div>\n  );\n}","size_bytes":3907},"client/src/components/ThemeProvider.tsx":{"content":"import React, { createContext, useContext, useEffect, useState } from 'react'\n\ntype Theme = 'dark' | 'light' | 'system'\n\ntype ThemeProviderProps = {\n  children: React.ReactNode\n  defaultTheme?: Theme\n  storageKey?: string\n}\n\ntype ThemeProviderState = {\n  theme: Theme\n  setTheme: (theme: Theme) => void\n}\n\nconst initialState: ThemeProviderState = {\n  theme: 'system',\n  setTheme: () => null,\n}\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState)\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = 'system',\n  storageKey = 'penkora-ui-theme',\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme\n  )\n\n  useEffect(() => {\n    const root = window.document.documentElement\n\n    root.classList.remove('light', 'dark')\n\n    if (theme === 'system') {\n      const systemTheme = window.matchMedia('(prefers-color-scheme: dark)')\n        .matches\n        ? 'dark'\n        : 'light'\n\n      root.classList.add(systemTheme)\n      return\n    }\n\n    root.classList.add(theme)\n  }, [theme])\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme)\n      setTheme(theme)\n    },\n  }\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  )\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext)\n\n  if (context === undefined)\n    throw new Error('useTheme must be used within a ThemeProvider')\n\n  return context\n}","size_bytes":1587},"client/src/components/ThemeToggle.tsx":{"content":"import { Moon, Sun, Monitor } from \"lucide-react\"\nimport { Button } from \"@/components/ui/button\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nimport { useTheme } from \"./ThemeProvider\"\n\nexport function ThemeToggle() {\n  const { setTheme } = useTheme()\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button \n          variant=\"ghost\" \n          size=\"icon\" \n          className=\"interactive focus-ring\"\n          aria-label=\"Toggle theme\"\n        >\n          <Sun className=\"h-5 w-5 rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n          <Moon className=\"absolute h-5 w-5 rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n          <span className=\"sr-only\">Toggle theme</span>\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\">\n        <DropdownMenuItem onClick={() => setTheme(\"light\")} className=\"interactive\">\n          <Sun className=\"mr-2 h-4 w-4\" />\n          <span>Light</span>\n        </DropdownMenuItem>\n        <DropdownMenuItem onClick={() => setTheme(\"dark\")} className=\"interactive\">\n          <Moon className=\"mr-2 h-4 w-4\" />\n          <span>Dark</span>\n        </DropdownMenuItem>\n        <DropdownMenuItem onClick={() => setTheme(\"system\")} className=\"interactive\">\n          <Monitor className=\"mr-2 h-4 w-4\" />\n          <span>System</span>\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  )\n}","size_bytes":1531},".local/state/replit/agent/progress_tracker.md":{"content":"[x] 1. Install the required packages\n[x] 2. Restart the workflow to see if the project is working\n[x] 3. Verify the project is working using the feedback tool\n[x] 4. Inform user the import is completed and they can start building, mark the import as completed using the complete_project_import tool","size_bytes":298},"client/src/components/AllPostsPage.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport React from \"react\";\nimport { Link } from \"wouter\";\nimport { Search, Filter, MoreHorizontal, Edit, Eye, Trash2, Plus, Grid, List, FileText } from \"lucide-react\";\nimport { usePostsWithDetails, useDeletePost, mockPosts } from \"@/hooks/usePosts\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { \n  Page, \n  PageHeader, \n  PageTitle, \n  PageToolbar, \n  PageBody, \n  PageActions,\n  ActionBar,\n  FAB,\n  FilterSheet\n} from \"@/components/ui/page\";\nimport { EmptyState } from \"@/components/ui/empty-state\";\nimport { LoadingCard, LoadingTable } from \"@/components/ui/loading\";\n\ninterface PostWithDetails {\n  id: string;\n  title: string;\n  slug: string;\n  excerpt: string;\n  status: \"published\" | \"draft\" | \"scheduled\";\n  viewCount: number;\n  publishedAt: string | null;\n  createdAt: string;\n  author: {\n    id: string;\n    username: string;\n    displayName: string;\n  } | null;\n  category: {\n    id: string;\n    name: string;\n    slug: string;\n    color: string;\n  } | null;\n}\n\ninterface AllPostsPageProps {\n  onCreatePost?: () => void;\n  onEditPost?: (id: string) => void;\n  onPreviewPost?: (id: string) => void;\n  onDeletePost?: (id: string) => void;\n}\n\n// Transform API data to match component expectations\nconst transformPostData = (apiPost: any): PostWithDetails => ({\n  id: apiPost.id,\n  title: apiPost.title,\n  slug: apiPost.slug,\n  excerpt: apiPost.excerpt || \"\",\n  status: apiPost.status,\n  viewCount: apiPost.viewCount || 0,\n  publishedAt: apiPost.publishedAt,\n  createdAt: apiPost.createdAt,\n  author: apiPost.author || { id: \"\", username: \"Unknown\", displayName: \"Unknown User\" },\n  category: apiPost.category || { id: \"\", name: \"Uncategorized\", slug: \"uncategorized\", color: \"#6b7280\" }\n});\n\nexport default function AllPostsPage({ \n  onCreatePost,\n  onEditPost,\n  onPreviewPost,\n  onDeletePost\n}: AllPostsPageProps) {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\");\n  const [categoryFilter, setCategoryFilter] = useState<string>(\"all\");\n  const [viewMode, setViewMode] = useState<\"grid\" | \"table\">(\"grid\");\n  const [selectedPosts, setSelectedPosts] = useState<string[]>([]);\n  \n  const { toast } = useToast();\n  \n  // Fetch posts with details (author, category info)\n  const { data: postsData, isLoading, error } = usePostsWithDetails();\n  const deleteMutation = useDeletePost();\n  \n  // Show error notification if API call fails (only once)\n  React.useEffect(() => {\n    if (error && !postsData) {\n      toast({\n        title: \"Connection Error\",\n        description: \"Unable to load posts from server.\",\n        variant: \"destructive\",\n      });\n    }\n  }, [error, postsData, toast]);\n  \n  // Use real data if available, show loading state or empty state appropriately\n  const rawPosts = postsData || [];\n  const posts: PostWithDetails[] = rawPosts.map(transformPostData);\n\n  // Filter posts based on search and filters\n  const filteredPosts = posts.filter(post => {\n    const matchesSearch = post.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         post.author?.displayName.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         post.excerpt.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesStatus = statusFilter === \"all\" || post.status === statusFilter;\n    const matchesCategory = categoryFilter === \"all\" || post.category?.name === categoryFilter;\n    return matchesSearch && matchesStatus && matchesCategory;\n  });\n  \n  // Handle post deletion\n  const handleDeletePost = async (postId: string) => {\n    try {\n      await deleteMutation.mutateAsync(postId);\n      toast({\n        title: \"Post deleted\",\n        description: \"The post has been successfully deleted.\",\n      });\n      onDeletePost?.(postId);\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete the post. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleSelectPost = (postId: string, checked: boolean) => {\n    if (checked) {\n      setSelectedPosts([...selectedPosts, postId]);\n    } else {\n      setSelectedPosts(selectedPosts.filter(id => id !== postId));\n    }\n  };\n\n  const handleSelectAll = (checked: boolean) => {\n    if (checked) {\n      setSelectedPosts(filteredPosts.map(post => post.id));\n    } else {\n      setSelectedPosts([]);\n    }\n  };\n\n  const getStatusBadge = (status: PostWithDetails[\"status\"]) => {\n    const variants = {\n      published: \"default\",\n      draft: \"secondary\", \n      scheduled: \"outline\"\n    } as const;\n    \n    return (\n      <Badge variant={variants[status]} className=\"capitalize\">\n        {status}\n      </Badge>\n    );\n  };\n\n  const PostCard = ({ post }: { post: PostWithDetails }) => (\n    <Card className=\"hover-elevate\" data-testid={`post-card-${post.id}`}>\n      <CardHeader className=\"pb-2\">\n        <div className=\"flex items-start justify-between\">\n          <div className=\"flex items-center gap-2 min-w-0 flex-1\">\n            <Checkbox\n              checked={selectedPosts.includes(post.id)}\n              onCheckedChange={(checked) => handleSelectPost(post.id, !!checked)}\n              data-testid={`post-checkbox-${post.id}`}\n            />\n            <h3 className=\"font-semibold text-sm leading-tight line-clamp-2 flex-1\">\n              {post.title}\n            </h3>\n          </div>\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"ghost\" size=\"icon\" className=\"shrink-0\" data-testid={`post-menu-${post.id}`}>\n                <MoreHorizontal className=\"h-4 w-4\" />\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\">\n              <DropdownMenuItem onClick={() => onEditPost?.(post.id)}>\n                <Edit className=\"h-4 w-4 mr-2\" />\n                Edit\n              </DropdownMenuItem>\n              <DropdownMenuItem onClick={() => onPreviewPost?.(post.id)}>\n                <Eye className=\"h-4 w-4 mr-2\" />\n                Preview\n              </DropdownMenuItem>\n              <DropdownMenuItem \n                onClick={() => handleDeletePost(post.id)}\n                className=\"text-destructive focus:text-destructive\"\n                disabled={deleteMutation.isPending}\n              >\n                <Trash2 className=\"h-4 w-4 mr-2\" />\n                Delete\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          {getStatusBadge(post.status)}\n          <span className=\"text-xs text-muted-foreground\">{post.category?.name || \"Uncategorized\"}</span>\n        </div>\n      </CardHeader>\n      <CardContent className=\"pt-2\">\n        <p className=\"text-sm text-muted-foreground line-clamp-2 mb-3\">\n          {post.excerpt}\n        </p>\n        <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n          <div className=\"flex items-center gap-2\">\n            <Avatar className=\"h-5 w-5\">\n              <AvatarFallback className=\"text-xs\">\n                {post.author?.displayName.split(\" \").map(n => n[0]).join(\"\") || \"U\"}\n              </AvatarFallback>\n            </Avatar>\n            <span>{post.author?.displayName || \"Unknown User\"}</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <span>{post.viewCount} views</span>\n            <span>•</span>\n            <span>{new Date(post.publishedAt || post.createdAt).toLocaleDateString()}</span>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n\n  const PostTableRow = ({ post }: { post: PostWithDetails }) => (\n    <TableRow key={post.id} data-testid={`post-row-${post.id}`}>\n      <TableCell className=\"w-12\">\n        <Checkbox\n          checked={selectedPosts.includes(post.id)}\n          onCheckedChange={(checked) => handleSelectPost(post.id, !!checked)}\n          data-testid={`post-checkbox-${post.id}`}\n        />\n      </TableCell>\n      <TableCell>\n        <div className=\"space-y-1\">\n          <div className=\"font-medium line-clamp-1\">{post.title}</div>\n          <div className=\"text-sm text-muted-foreground line-clamp-1\">{post.excerpt}</div>\n        </div>\n      </TableCell>\n      <TableCell>{getStatusBadge(post.status)}</TableCell>\n      <TableCell>\n        <div className=\"flex items-center gap-2\">\n          <Avatar className=\"h-6 w-6\">\n            <AvatarFallback className=\"text-xs\">\n              {post.author?.displayName.split(\" \").map(n => n[0]).join(\"\") || \"U\"}\n            </AvatarFallback>\n          </Avatar>\n          <span className=\"text-sm\">{post.author?.displayName || \"Unknown User\"}</span>\n        </div>\n      </TableCell>\n      <TableCell className=\"text-sm\">{post.category?.name || \"Uncategorized\"}</TableCell>\n      <TableCell className=\"text-sm\">{post.viewCount}</TableCell>\n      <TableCell className=\"text-sm\">{new Date(post.publishedAt || post.createdAt).toLocaleDateString()}</TableCell>\n      <TableCell className=\"w-12\">\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button variant=\"ghost\" size=\"icon\" data-testid={`post-menu-${post.id}`}>\n              <MoreHorizontal className=\"h-4 w-4\" />\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"end\">\n            <DropdownMenuItem onClick={() => onEditPost?.(post.id)}>\n              <Edit className=\"h-4 w-4 mr-2\" />\n              Edit\n            </DropdownMenuItem>\n            <DropdownMenuItem onClick={() => onPreviewPost?.(post.id)}>\n              <Eye className=\"h-4 w-4 mr-2\" />\n              Preview\n            </DropdownMenuItem>\n            <DropdownMenuItem \n              onClick={() => handleDeletePost(post.id)}\n              className=\"text-destructive focus:text-destructive\"\n              disabled={deleteMutation.isPending}\n            >\n              <Trash2 className=\"h-4 w-4 mr-2\" />\n              {deleteMutation.isPending ? \"Deleting...\" : \"Delete\"}\n            </DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </TableCell>\n    </TableRow>\n  );\n\n  const FilterControls = () => (\n    <div className=\"space-y-4\">\n      <div className=\"space-y-2\">\n        <label className=\"text-sm font-medium\">Status</label>\n        <Select value={statusFilter} onValueChange={setStatusFilter}>\n          <SelectTrigger>\n            <SelectValue />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">All Status</SelectItem>\n            <SelectItem value=\"published\">Published</SelectItem>\n            <SelectItem value=\"draft\">Draft</SelectItem>\n            <SelectItem value=\"scheduled\">Scheduled</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n      \n      <div className=\"space-y-2\">\n        <label className=\"text-sm font-medium\">Category</label>\n        <Select value={categoryFilter} onValueChange={setCategoryFilter}>\n          <SelectTrigger>\n            <SelectValue />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">All Categories</SelectItem>\n            <SelectItem value=\"Development\">Development</SelectItem>\n            <SelectItem value=\"Design\">Design</SelectItem>\n            <SelectItem value=\"Technology\">Technology</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n    </div>\n  );\n\n  return (\n    <Page data-testid=\"all-posts-page\">\n      <PageHeader>\n        <div className=\"px-4 md:px-6\">\n          <PageToolbar>\n            <PageTitle badge=\"124\">\n              All Posts\n            </PageTitle>\n            <PageActions>\n              <div className=\"hidden md:flex items-center gap-2\">\n                <Button\n                  variant={viewMode === \"grid\" ? \"default\" : \"outline\"}\n                  size=\"icon\"\n                  onClick={() => setViewMode(\"grid\")}\n                  data-testid=\"view-grid\"\n                >\n                  <Grid className=\"h-4 w-4\" />\n                </Button>\n                <Button\n                  variant={viewMode === \"table\" ? \"default\" : \"outline\"}\n                  size=\"icon\"\n                  onClick={() => setViewMode(\"table\")}\n                  data-testid=\"view-table\"\n                >\n                  <List className=\"h-4 w-4\" />\n                </Button>\n                <Link href=\"/posts/new\">\n                  <Button data-testid=\"create-post-desktop\">\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    New Post\n                  </Button>\n                </Link>\n              </div>\n            </PageActions>\n          </PageToolbar>\n          \n          <div className=\"mt-4 flex flex-col gap-3 md:flex-row md:items-center md:justify-between\">\n            <div className=\"flex items-center gap-2 flex-1 max-w-md\">\n              <div className=\"relative flex-1\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n                <Input\n                  placeholder=\"Search posts...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-9\"\n                  data-testid=\"search-posts\"\n                />\n              </div>\n              <FilterSheet title=\"Filter Posts\">\n                <FilterControls />\n              </FilterSheet>\n            </div>\n\n            {/* Desktop Filters */}\n            <div className=\"hidden md:flex items-center gap-2\">\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger className=\"w-32\">\n                  <SelectValue placeholder=\"Status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Status</SelectItem>\n                  <SelectItem value=\"published\">Published</SelectItem>\n                  <SelectItem value=\"draft\">Draft</SelectItem>\n                  <SelectItem value=\"scheduled\">Scheduled</SelectItem>\n                </SelectContent>\n              </Select>\n              \n              <Select value={categoryFilter} onValueChange={setCategoryFilter}>\n                <SelectTrigger className=\"w-36\">\n                  <SelectValue placeholder=\"Category\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Categories</SelectItem>\n                  <SelectItem value=\"Development\">Development</SelectItem>\n                  <SelectItem value=\"Design\">Design</SelectItem>\n                  <SelectItem value=\"Technology\">Technology</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </div>\n      </PageHeader>\n\n      <PageBody className=\"px-4 md:px-6\">\n        {isLoading ? (\n          viewMode === \"grid\" ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              <LoadingCard count={6} />\n            </div>\n          ) : (\n            <LoadingTable rows={10} columns={8} />\n          )\n        ) : filteredPosts.length === 0 ? (\n          searchQuery || statusFilter !== \"all\" || categoryFilter !== \"all\" ? (\n            <div className=\"text-center py-12\">\n              <h3 className=\"text-lg font-semibold mb-2\">No posts found</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Try adjusting your search or filter criteria.\n              </p>\n            </div>\n          ) : (\n            <EmptyState\n              icon={<FileText className=\"h-8 w-8 text-muted-foreground\" />}\n              title=\"No posts yet\"\n              description=\"Create your first post to get started with your content.\"\n              action={onCreatePost ? {\n                label: \"Create Post\",\n                onClick: onCreatePost\n              } : undefined}\n            />\n          )\n        ) : (\n          <>\n            {/* Selection Bar */}\n            {selectedPosts.length > 0 && (\n              <div className=\"bg-muted/50 border rounded-lg p-3 mb-4\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm font-medium\">\n                    {selectedPosts.length} post{selectedPosts.length !== 1 ? 's' : ''} selected\n                  </span>\n                  <div className=\"flex items-center gap-2\">\n                    <Button variant=\"outline\" size=\"sm\">\n                      Bulk Edit\n                    </Button>\n                    <Button variant=\"outline\" size=\"sm\" className=\"text-destructive\">\n                      Delete Selected\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Posts Content */}\n            {viewMode === \"grid\" ? (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {filteredPosts.map(post => (\n                  <PostCard key={post.id} post={post} />\n                ))}\n              </div>\n            ) : (\n              <div className=\"hidden md:block border rounded-lg\">\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead className=\"w-12\">\n                        <Checkbox\n                          checked={selectedPosts.length === filteredPosts.length && filteredPosts.length > 0}\n                          onCheckedChange={handleSelectAll}\n                          data-testid=\"select-all-posts\"\n                        />\n                      </TableHead>\n                      <TableHead>Title</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Author</TableHead>\n                      <TableHead>Category</TableHead>\n                      <TableHead>Views</TableHead>\n                      <TableHead>Date</TableHead>\n                      <TableHead className=\"w-12\"></TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {filteredPosts.map(post => (\n                      <PostTableRow key={post.id} post={post} />\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n            )}\n          </>\n        )}\n      </PageBody>\n\n      {/* Mobile FAB */}\n      <Link href=\"/posts/new\">\n        <FAB \n          aria-label=\"Create new post\"\n          data-testid=\"create-post-fab\"\n        >\n          New Post\n        </FAB>\n      </Link>\n\n      {/* Mobile Action Bar for bulk actions */}\n      <ActionBar show={selectedPosts.length > 0}>\n        <span className=\"text-sm font-medium\">\n          {selectedPosts.length} selected\n        </span>\n        <div className=\"flex gap-2\">\n          <Button variant=\"outline\" size=\"sm\">\n            Edit\n          </Button>\n          <Button variant=\"destructive\" size=\"sm\">\n            Delete\n          </Button>\n        </div>\n      </ActionBar>\n    </Page>\n  );\n}","size_bytes":19722},"client/src/components/AnalyticsPage.tsx":{"content":"import { useState } from \"react\";\nimport { TrendingUp, TrendingDown, Eye, Users, FileText, Calendar, Download, Filter, Monitor, Smartphone, Tablet } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Page, \n  PageHeader, \n  PageTitle, \n  PageToolbar, \n  PageBody, \n  PageActions,\n  FilterSheet\n} from \"@/components/ui/page\";\nimport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent\n} from \"@/components/ui/chart\";\nimport {\n  Area,\n  AreaChart,\n  PieChart,\n  Pie,\n  Cell,\n  XAxis,\n  YAxis,\n  CartesianGrid\n} from \"recharts\";\n\ninterface MetricCard {\n  title: string;\n  value: string;\n  change: string;\n  trend: \"up\" | \"down\" | \"neutral\";\n  icon: any;\n}\n\ninterface TopContent {\n  id: string;\n  title: string;\n  type: \"post\" | \"page\";\n  views: number;\n  engagement: number;\n  publishDate: string;\n}\n\ninterface AnalyticsPageProps {\n  onExport?: (format: string, period: string) => void;\n}\n\n// Mock data\nconst mockMetrics: MetricCard[] = [\n  {\n    title: \"Total Views\",\n    value: \"24,580\",\n    change: \"+12.5%\",\n    trend: \"up\",\n    icon: Eye\n  },\n  {\n    title: \"Unique Visitors\",\n    value: \"8,241\",\n    change: \"+8.2%\",\n    trend: \"up\",\n    icon: Users\n  },\n  {\n    title: \"Published Posts\",\n    value: \"42\",\n    change: \"+3\",\n    trend: \"up\",\n    icon: FileText\n  },\n  {\n    title: \"Avg. Session Duration\",\n    value: \"3m 42s\",\n    change: \"-5.3%\",\n    trend: \"down\",\n    icon: Calendar\n  }\n];\n\nconst mockTopContent: TopContent[] = [\n  {\n    id: \"1\",\n    title: \"Getting Started with React Development\",\n    type: \"post\",\n    views: 3420,\n    engagement: 85,\n    publishDate: \"2024-03-15\"\n  },\n  {\n    id: \"2\",\n    title: \"Advanced TypeScript Patterns\",\n    type: \"post\", \n    views: 2680,\n    engagement: 78,\n    publishDate: \"2024-03-10\"\n  },\n  {\n    id: \"3\",\n    title: \"About Our Company\",\n    type: \"page\",\n    views: 1940,\n    engagement: 45,\n    publishDate: \"2024-02-28\"\n  },\n  {\n    id: \"4\",\n    title: \"Modern CSS Techniques\",\n    type: \"post\",\n    views: 1580,\n    engagement: 72,\n    publishDate: \"2024-03-08\"\n  },\n  {\n    id: \"5\",\n    title: \"Contact Us\",\n    type: \"page\",\n    views: 1320,\n    engagement: 35,\n    publishDate: \"2024-02-15\"\n  }\n];\n\n// Chart data and configurations\nconst trafficData = [\n  { date: \"Mar 1\", views: 2400, visitors: 1200, pages: 3400 },\n  { date: \"Mar 5\", views: 3200, visitors: 1800, pages: 4200 },\n  { date: \"Mar 10\", views: 2800, visitors: 1600, pages: 3800 },\n  { date: \"Mar 15\", views: 4100, visitors: 2300, pages: 5200 },\n  { date: \"Mar 20\", views: 3600, visitors: 2000, pages: 4600 },\n  { date: \"Mar 25\", views: 4800, visitors: 2700, pages: 6100 },\n  { date: \"Mar 30\", views: 5200, visitors: 3000, pages: 6800 }\n];\n\nconst deviceData = [\n  { device: \"Desktop\", value: 64, count: 15736, fill: \"var(--color-desktop)\" },\n  { device: \"Mobile\", value: 28, count: 6889, fill: \"var(--color-mobile)\" },\n  { device: \"Tablet\", value: 8, count: 1966, fill: \"var(--color-tablet)\" }\n];\n\nconst trafficChartConfig = {\n  views: {\n    label: \"Views\",\n    color: \"hsl(var(--chart-1))\"\n  },\n  visitors: {\n    label: \"Visitors\", \n    color: \"hsl(var(--chart-2))\"\n  },\n  pages: {\n    label: \"Page Views\",\n    color: \"hsl(var(--chart-3))\"\n  }\n};\n\nconst deviceChartConfig = {\n  desktop: {\n    label: \"Desktop\",\n    color: \"hsl(var(--chart-1))\"\n  },\n  mobile: {\n    label: \"Mobile\",\n    color: \"hsl(var(--chart-2))\"\n  },\n  tablet: {\n    label: \"Tablet\",\n    color: \"hsl(var(--chart-3))\"\n  }\n};\n\nexport default function AnalyticsPage({ \n  onExport = (format, period) => console.log(\"Export analytics:\", format, period)\n}: AnalyticsPageProps) {\n  const [timePeriod, setTimePeriod] = useState(\"30d\");\n  const [contentFilter, setContentFilter] = useState(\"all\");\n\n  const filteredContent = mockTopContent.filter(content => {\n    if (contentFilter === \"all\") return true;\n    return content.type === contentFilter;\n  });\n\n  const MetricCard = ({ metric }: { metric: MetricCard }) => {\n    const Icon = metric.icon;\n    const TrendIcon = metric.trend === \"up\" ? TrendingUp : metric.trend === \"down\" ? TrendingDown : null;\n    \n    return (\n      <Card data-testid={`metric-${metric.title.toLowerCase().replace(/\\s+/g, \"-\")}`}>\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n          <CardTitle className=\"text-sm font-medium text-muted-foreground\">\n            {metric.title}\n          </CardTitle>\n          <Icon className=\"h-4 w-4 text-muted-foreground\" />\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-2xl font-bold\">{metric.value}</div>\n          <div className=\"flex items-center gap-1 text-xs\">\n            {TrendIcon && (\n              <TrendIcon className={`h-3 w-3 ${\n                metric.trend === \"up\" ? \"text-green-600\" : \"text-red-600\"\n              }`} />\n            )}\n            <span className={`${\n              metric.trend === \"up\" ? \"text-green-600\" : \n              metric.trend === \"down\" ? \"text-red-600\" : \"text-muted-foreground\"\n            }`}>\n              {metric.change}\n            </span>\n            <span className=\"text-muted-foreground\">from last month</span>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  };\n\n  const ContentRow = ({ content }: { content: TopContent }) => (\n    <div className=\"flex flex-col sm:flex-row sm:items-center justify-between p-3 border rounded-lg hover-elevate transition-all duration-200\" data-testid={`content-${content.id}`}>\n      <div className=\"flex-1 min-w-0 space-y-2 sm:space-y-1\">\n        <div className=\"flex items-start gap-2\">\n          <h4 className=\"font-medium line-clamp-2 flex-1\">{content.title}</h4>\n          <Badge variant=\"outline\" className=\"capitalize text-xs shrink-0\">\n            {content.type}\n          </Badge>\n        </div>\n        <div className=\"flex flex-col sm:flex-row sm:items-center gap-1 sm:gap-3\">\n          <p className=\"text-sm text-muted-foreground\">\n            Published {new Date(content.publishDate).toLocaleDateString()}\n          </p>\n          {/* Mobile: Show stats inline */}\n          <div className=\"flex items-center gap-3 sm:hidden\">\n            <span className=\"text-sm font-medium\">{content.views.toLocaleString()} views</span>\n            <span className=\"text-sm text-muted-foreground\">{content.engagement}% engagement</span>\n          </div>\n        </div>\n      </div>\n      {/* Desktop: Show stats in column */}\n      <div className=\"hidden sm:block text-right space-y-1 ml-4\">\n        <div className=\"font-medium\">{content.views.toLocaleString()} views</div>\n        <div className=\"text-sm text-muted-foreground\">{content.engagement}% engagement</div>\n      </div>\n    </div>\n  );\n\n  const FilterControls = () => (\n    <div className=\"space-y-4\">\n      <div className=\"space-y-2\">\n        <label className=\"text-sm font-medium\">Time Period</label>\n        <Select value={timePeriod} onValueChange={setTimePeriod}>\n          <SelectTrigger data-testid=\"time-period-mobile\">\n            <SelectValue />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"7d\">Last 7 days</SelectItem>\n            <SelectItem value=\"30d\">Last 30 days</SelectItem>\n            <SelectItem value=\"90d\">Last 90 days</SelectItem>\n            <SelectItem value=\"1y\">Last year</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n      \n      <div className=\"space-y-2\">\n        <label className=\"text-sm font-medium\">Content Type</label>\n        <Select value={contentFilter} onValueChange={setContentFilter}>\n          <SelectTrigger data-testid=\"content-filter-mobile\">\n            <SelectValue />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">All Content</SelectItem>\n            <SelectItem value=\"post\">Posts Only</SelectItem>\n            <SelectItem value=\"page\">Pages Only</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n    </div>\n  );\n\n  return (\n    <Page data-testid=\"analytics-page\">\n      <PageHeader>\n        <div className=\"px-4 md:px-6\">\n          <PageToolbar>\n            <PageTitle>\n              Analytics & Reports\n            </PageTitle>\n            <PageActions>\n              <div className=\"hidden md:flex items-center gap-2\">\n                <Button \n                  variant=\"outline\" \n                  onClick={() => onExport(\"pdf\", timePeriod)}\n                  data-testid=\"export-pdf\"\n                >\n                  <Download className=\"h-4 w-4 mr-2\" />\n                  Export PDF\n                </Button>\n                <Button \n                  variant=\"outline\"\n                  onClick={() => onExport(\"csv\", timePeriod)}\n                  data-testid=\"export-csv\"\n                >\n                  <Download className=\"h-4 w-4 mr-2\" />\n                  Export CSV\n                </Button>\n              </div>\n            </PageActions>\n          </PageToolbar>\n          \n          <div className=\"mt-4 flex flex-col gap-3 md:flex-row md:items-center md:justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <FilterSheet title=\"Analytics Filters\" data-testid=\"analytics-filter-sheet\">\n                <FilterControls />\n              </FilterSheet>\n            </div>\n\n            {/* Desktop Filters */}\n            <div className=\"hidden md:flex items-center gap-2\">\n              <Select value={timePeriod} onValueChange={setTimePeriod}>\n                <SelectTrigger className=\"w-36\" data-testid=\"time-period-desktop\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"7d\">Last 7 days</SelectItem>\n                  <SelectItem value=\"30d\">Last 30 days</SelectItem>\n                  <SelectItem value=\"90d\">Last 90 days</SelectItem>\n                  <SelectItem value=\"1y\">Last year</SelectItem>\n                </SelectContent>\n              </Select>\n              \n              <Select value={contentFilter} onValueChange={setContentFilter}>\n                <SelectTrigger className=\"w-32\" data-testid=\"content-filter-desktop\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Content</SelectItem>\n                  <SelectItem value=\"post\">Posts</SelectItem>\n                  <SelectItem value=\"page\">Pages</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </div>\n      </PageHeader>\n\n      <PageBody className=\"px-4 md:px-6\">\n        {/* Key Metrics */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-8\">\n          {mockMetrics.map(metric => (\n            <MetricCard key={metric.title} metric={metric} />\n          ))}\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Traffic Overview Chart */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Traffic Overview</CardTitle>\n              <p className=\"text-sm text-muted-foreground\">Website traffic trends over time</p>\n            </CardHeader>\n            <CardContent>\n              <ChartContainer config={trafficChartConfig} className=\"h-64 w-full\" data-testid=\"traffic-overview-chart\">\n                <AreaChart data={trafficData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" className=\"stroke-muted\" />\n                  <XAxis \n                    dataKey=\"date\" \n                    tick={{ fontSize: 12 }}\n                    className=\"text-muted-foreground\"\n                  />\n                  <YAxis \n                    tick={{ fontSize: 12 }}\n                    className=\"text-muted-foreground\"\n                  />\n                  <ChartTooltip \n                    content={<ChartTooltipContent />}\n                    cursor={{ stroke: \"hsl(var(--muted-foreground))\", strokeWidth: 1 }}\n                  />\n                  <ChartLegend content={<ChartLegendContent />} />\n                  <Area\n                    type=\"monotone\"\n                    dataKey=\"views\"\n                    stackId=\"1\"\n                    stroke={trafficChartConfig.views.color}\n                    fill={trafficChartConfig.views.color}\n                    fillOpacity={0.6}\n                  />\n                  <Area\n                    type=\"monotone\"\n                    dataKey=\"visitors\"\n                    stackId=\"1\"\n                    stroke={trafficChartConfig.visitors.color}\n                    fill={trafficChartConfig.visitors.color}\n                    fillOpacity={0.6}\n                  />\n                </AreaChart>\n              </ChartContainer>\n            </CardContent>\n          </Card>\n\n          {/* Device Breakdown Chart */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Device Breakdown</CardTitle>\n              <p className=\"text-sm text-muted-foreground\">Traffic by device type</p>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {/* Mobile-first: Show bars on small screens */}\n                <div className=\"md:hidden space-y-3\">\n                  {deviceData.map((device) => {\n                    const Icon = device.device === \"Desktop\" ? Monitor : \n                                device.device === \"Mobile\" ? Smartphone : Tablet;\n                    return (\n                      <div key={device.device} className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-2\">\n                          <Icon className=\"h-4 w-4\" style={{ color: device.fill }} />\n                          <span className=\"text-sm font-medium\">{device.device}</span>\n                        </div>\n                        <div className=\"flex items-center gap-2\">\n                          <div className=\"w-20 h-2 bg-muted rounded-full overflow-hidden\">\n                            <div \n                              className=\"h-full rounded-full\" \n                              style={{ \n                                width: `${device.value}%`, \n                                backgroundColor: device.fill \n                              }}\n                            />\n                          </div>\n                          <span className=\"text-sm text-muted-foreground font-medium\">\n                            {device.value}%\n                          </span>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n                \n                {/* Desktop: Show pie chart */}\n                <div className=\"hidden md:block\">\n                  <ChartContainer config={deviceChartConfig} className=\"h-48 w-full\" data-testid=\"device-breakdown-chart\">\n                    <PieChart>\n                      <Pie\n                        data={deviceData}\n                        cx=\"50%\"\n                        cy=\"50%\"\n                        outerRadius={70}\n                        dataKey=\"value\"\n                        nameKey=\"device\"\n                        label={({ device, value }) => `${device}: ${value}%`}\n                        labelLine={false}\n                      />\n                      <ChartTooltip \n                        content={<ChartTooltipContent />}\n                      />\n                    </PieChart>\n                  </ChartContainer>\n                </div>\n                \n                {/* Summary stats */}\n                <div className=\"grid grid-cols-3 gap-2 pt-2 border-t\">\n                  {deviceData.map((device) => (\n                    <div key={device.device} className=\"text-center\">\n                      <div className=\"text-lg font-semibold\">{device.count.toLocaleString()}</div>\n                      <div className=\"text-xs text-muted-foreground\">{device.device}</div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Top Performing Content - Enhanced */}\n        <Card className=\"mt-6\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <div>\n              <CardTitle>Top Performing Content</CardTitle>\n              <p className=\"text-sm text-muted-foreground mt-1\">\n                {filteredContent.length} {contentFilter === \"all\" ? \"items\" : contentFilter + \"s\"} shown\n              </p>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Badge variant=\"secondary\" className=\"text-xs\">\n                {timePeriod === \"7d\" ? \"Last week\" : \n                 timePeriod === \"30d\" ? \"Last month\" : \n                 timePeriod === \"90d\" ? \"Last quarter\" : \"Last year\"}\n              </Badge>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {filteredContent.map((content, index) => (\n                <div key={content.id} className=\"relative\">\n                  {/* Ranking indicator */}\n                  <div className=\"absolute -left-1 top-3 w-1 h-6 bg-gradient-to-b from-yellow-400 via-orange-400 to-red-400 rounded-full opacity-60\" \n                       style={{ opacity: 1 - (index * 0.15) }} />\n                  <ContentRow content={content} />\n                </div>\n              ))}\n              \n              {filteredContent.length === 0 && (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <FileText className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n                  <p>No content found for the selected filters</p>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Recent Activity - Enhanced with better mobile UX */}\n        <Card className=\"mt-6\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center justify-between\">\n              Recent Activity\n              <Badge variant=\"outline\" className=\"text-xs\">\n                Live\n              </Badge>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              <div className=\"flex items-start gap-3 p-3 border rounded-lg hover-elevate transition-all duration-200\">\n                <div className=\"w-2 h-2 bg-green-500 rounded-full mt-2 animate-pulse\"></div>\n                <div className=\"flex-1 min-w-0\">\n                  <p className=\"text-sm font-medium\">New user registered from organic search</p>\n                  <p className=\"text-xs text-muted-foreground\">2 minutes ago • From Google</p>\n                  <div className=\"mt-1\">\n                    <Badge variant=\"secondary\" className=\"text-xs\">+1 User</Badge>\n                  </div>\n                </div>\n                <div className=\"text-right hidden sm:block\">\n                  <div className=\"text-xs text-muted-foreground\">SEO</div>\n                </div>\n              </div>\n              \n              <div className=\"flex items-start gap-3 p-3 border rounded-lg hover-elevate transition-all duration-200\">\n                <div className=\"w-2 h-2 bg-blue-500 rounded-full mt-2\"></div>\n                <div className=\"flex-1 min-w-0\">\n                  <p className=\"text-sm font-medium\">Post \"React Development\" gained 50 new views</p>\n                  <p className=\"text-xs text-muted-foreground\">15 minutes ago • Trending up</p>\n                  <div className=\"mt-1\">\n                    <Badge variant=\"secondary\" className=\"text-xs\">+50 Views</Badge>\n                  </div>\n                </div>\n                <div className=\"text-right hidden sm:block\">\n                  <TrendingUp className=\"h-4 w-4 text-green-500\" />\n                </div>\n              </div>\n              \n              <div className=\"flex items-start gap-3 p-3 border rounded-lg hover-elevate transition-all duration-200\">\n                <div className=\"w-2 h-2 bg-purple-500 rounded-full mt-2\"></div>\n                <div className=\"flex-1 min-w-0\">\n                  <p className=\"text-sm font-medium\">Social media referral increased by 15%</p>\n                  <p className=\"text-xs text-muted-foreground\">1 hour ago • Twitter, Facebook</p>\n                  <div className=\"mt-1\">\n                    <Badge variant=\"secondary\" className=\"text-xs\">+15% Referrals</Badge>\n                  </div>\n                </div>\n                <div className=\"text-right hidden sm:block\">\n                  <div className=\"text-xs text-muted-foreground\">Social</div>\n                </div>\n              </div>\n              \n              {/* Mobile-specific: Show more button */}\n              <div className=\"md:hidden pt-2\">\n                <Button variant=\"ghost\" size=\"sm\" className=\"w-full\">\n                  View All Activity\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </PageBody>\n    </Page>\n  );\n}","size_bytes":21260},"client/src/components/CategoriesPage.tsx":{"content":"import { useState } from \"react\";\nimport { Search, Plus, MoreHorizontal, Edit, Trash2, FolderPlus, Tag } from \"lucide-react\";\nimport { useCategories, useCreateCategory, useUpdateCategory, useDeleteCategory } from \"@/hooks/useCategories\";\nimport { useTags, useCreateTag, useUpdateTag, useDeleteTag } from \"@/hooks/useTags\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { \n  Page, \n  PageHeader, \n  PageTitle, \n  PageToolbar, \n  PageBody, \n  PageActions,\n  FAB\n} from \"@/components/ui/page\";\nimport { EmptyState } from \"@/components/ui/empty-state\";\n\ninterface Category {\n  id: string;\n  name: string;\n  slug: string;\n  description?: string;\n  postCount: number;\n  color?: string;\n}\n\ninterface Tag {\n  id: string;\n  name: string;\n  slug: string;\n  postCount: number;\n}\n\ninterface CategoriesPageProps {\n  onCreateCategory?: (data: any) => void;\n  onEditCategory?: (id: string, data: any) => void;\n  onDeleteCategory?: (id: string) => void;\n  onCreateTag?: (data: any) => void;\n  onEditTag?: (id: string, data: any) => void;\n  onDeleteTag?: (id: string) => void;\n}\n\n// Mock data\nconst mockCategories: Category[] = [\n  { id: \"1\", name: \"Development\", slug: \"development\", description: \"Programming and software development content\", postCount: 45, color: \"#3b82f6\" },\n  { id: \"2\", name: \"Design\", slug: \"design\", description: \"UI/UX design and visual content\", postCount: 23, color: \"#8b5cf6\" },\n  { id: \"3\", name: \"Technology\", slug: \"technology\", description: \"Latest tech news and trends\", postCount: 31, color: \"#06b6d4\" },\n];\n\nconst mockTags: Tag[] = [\n  { id: \"1\", name: \"React\", slug: \"react\", postCount: 18 },\n  { id: \"2\", name: \"TypeScript\", slug: \"typescript\", postCount: 15 },\n  { id: \"3\", name: \"CSS\", slug: \"css\", postCount: 12 },\n  { id: \"4\", name: \"JavaScript\", slug: \"javascript\", postCount: 22 },\n  { id: \"5\", name: \"Tutorial\", slug: \"tutorial\", postCount: 8 },\n];\n\nexport default function CategoriesPage({ \n  onCreateCategory = (data) => console.log(\"Create category:\", data),\n  onEditCategory = (id, data) => console.log(\"Edit category:\", id, data),\n  onDeleteCategory = (id) => console.log(\"Delete category:\", id),\n  onCreateTag = (data) => console.log(\"Create tag:\", data),\n  onEditTag = (id, data) => console.log(\"Edit tag:\", id, data),\n  onDeleteTag = (id) => console.log(\"Delete tag:\", id)\n}: CategoriesPageProps) {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [activeTab, setActiveTab] = useState(\"categories\");\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [newItemData, setNewItemData] = useState({ name: \"\", description: \"\" });\n  \n  const { toast } = useToast();\n  const { data: categories = [], isLoading: categoriesLoading } = useCategories();\n  const { data: tags = [], isLoading: tagsLoading } = useTags();\n  const createCategoryMutation = useCreateCategory();\n  const updateCategoryMutation = useUpdateCategory();\n  const deleteCategoryMutation = useDeleteCategory();\n  const createTagMutation = useCreateTag();\n  const updateTagMutation = useUpdateTag();\n  const deleteTagMutation = useDeleteTag();\n\n  const filteredCategories = categories.filter((category: any) =>\n    category.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    category.description?.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const filteredTags = tags.filter((tag: any) =>\n    tag.name.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const handleCreateItem = async () => {\n    try {\n      const slug = newItemData.name.toLowerCase().replace(/[^a-z0-9]+/g, \"-\").replace(/(^-|-$)/g, \"\");\n      \n      if (activeTab === \"categories\") {\n        await createCategoryMutation.mutateAsync({\n          name: newItemData.name,\n          description: newItemData.description,\n          slug\n        });\n        toast({\n          title: \"Success\",\n          description: \"Category created successfully.\",\n        });\n        onCreateCategory({\n          name: newItemData.name,\n          description: newItemData.description,\n          slug\n        });\n      } else {\n        await createTagMutation.mutateAsync({\n          name: newItemData.name,\n          slug\n        });\n        toast({\n          title: \"Success\",\n          description: \"Tag created successfully.\",\n        });\n        onCreateTag({\n          name: newItemData.name,\n          slug\n        });\n      }\n      setNewItemData({ name: \"\", description: \"\" });\n      setIsCreateDialogOpen(false);\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: error.message || `Failed to create ${activeTab.slice(0, -1)}. Please try again.`,\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleDeleteCategory = async (id: string) => {\n    try {\n      await deleteCategoryMutation.mutateAsync(id);\n      toast({\n        title: \"Success\",\n        description: \"Category deleted successfully.\",\n      });\n      onDeleteCategory(id);\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete category. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleDeleteTag = async (id: string) => {\n    try {\n      await deleteTagMutation.mutateAsync(id);\n      toast({\n        title: \"Success\",\n        description: \"Tag deleted successfully.\",\n      });\n      onDeleteTag(id);\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete tag. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const CategoryCard = ({ category }: { category: Category }) => (\n    <Card className=\"hover-elevate\" data-testid={`category-card-${category.id}`}>\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-start justify-between\">\n          <div className=\"flex items-center gap-3 min-w-0 flex-1\">\n            <div \n              className=\"w-4 h-4 rounded-full shrink-0\"\n              style={{ backgroundColor: category.color }}\n            />\n            <div className=\"min-w-0 flex-1\">\n              <CardTitle className=\"text-base line-clamp-1\">{category.name}</CardTitle>\n              <p className=\"text-sm text-muted-foreground mt-1\">\n                /{category.slug}\n              </p>\n            </div>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Badge variant=\"secondary\" className=\"text-xs\">\n              {category.postCount} posts\n            </Badge>\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"ghost\" size=\"icon\" className=\"shrink-0\" data-testid={`category-menu-${category.id}`}>\n                  <MoreHorizontal className=\"h-4 w-4\" />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\">\n                <DropdownMenuItem onClick={() => onEditCategory(category.id, category)}>\n                  <Edit className=\"h-4 w-4 mr-2\" />\n                  Edit\n                </DropdownMenuItem>\n                <DropdownMenuItem \n                  onClick={() => handleDeleteCategory(category.id)}\n                  className=\"text-destructive focus:text-destructive\"\n                >\n                  <Trash2 className=\"h-4 w-4 mr-2\" />\n                  Delete\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n        </div>\n      </CardHeader>\n      {category.description && (\n        <CardContent className=\"pt-0\">\n          <p className=\"text-sm text-muted-foreground line-clamp-2\">\n            {category.description}\n          </p>\n        </CardContent>\n      )}\n    </Card>\n  );\n\n  const TagCard = ({ tag }: { tag: Tag }) => (\n    <Card className=\"hover-elevate\" data-testid={`tag-card-${tag.id}`}>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2 min-w-0 flex-1\">\n            <Tag className=\"h-4 w-4 text-muted-foreground shrink-0\" />\n            <div className=\"min-w-0 flex-1\">\n              <CardTitle className=\"text-base line-clamp-1\">{tag.name}</CardTitle>\n              <p className=\"text-sm text-muted-foreground\">\n                /{tag.slug}\n              </p>\n            </div>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Badge variant=\"secondary\" className=\"text-xs\">\n              {tag.postCount}\n            </Badge>\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"ghost\" size=\"icon\" className=\"shrink-0\" data-testid={`tag-menu-${tag.id}`}>\n                  <MoreHorizontal className=\"h-4 w-4\" />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\">\n                <DropdownMenuItem onClick={() => onEditTag(tag.id, tag)}>\n                  <Edit className=\"h-4 w-4 mr-2\" />\n                  Edit\n                </DropdownMenuItem>\n                <DropdownMenuItem \n                  onClick={() => handleDeleteTag(tag.id)}\n                  className=\"text-destructive focus:text-destructive\"\n                >\n                  <Trash2 className=\"h-4 w-4 mr-2\" />\n                  Delete\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n        </div>\n      </CardHeader>\n    </Card>\n  );\n\n  const CreateDialog = () => (\n    <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n      <DialogContent data-testid=\"create-dialog\">\n        <DialogHeader>\n          <DialogTitle>\n            Create New {activeTab === \"categories\" ? \"Category\" : \"Tag\"}\n          </DialogTitle>\n        </DialogHeader>\n        <div className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"name\">Name *</Label>\n            <Input\n              id=\"name\"\n              placeholder={`Enter ${activeTab === \"categories\" ? \"category\" : \"tag\"} name...`}\n              value={newItemData.name}\n              onChange={(e) => setNewItemData(prev => ({ ...prev, name: e.target.value }))}\n              data-testid=\"item-name\"\n            />\n          </div>\n          {activeTab === \"categories\" && (\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"description\">Description</Label>\n              <Textarea\n                id=\"description\"\n                placeholder=\"Enter category description...\"\n                value={newItemData.description}\n                onChange={(e) => setNewItemData(prev => ({ ...prev, description: e.target.value }))}\n                className=\"h-20\"\n                data-testid=\"item-description\"\n              />\n            </div>\n          )}\n          <div className=\"flex justify-end gap-2\">\n            <Button variant=\"outline\" onClick={() => setIsCreateDialogOpen(false)}>\n              Cancel\n            </Button>\n            <Button onClick={handleCreateItem} disabled={!newItemData.name.trim()}>\n              Create {activeTab === \"categories\" ? \"Category\" : \"Tag\"}\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n\n  return (\n    <Page data-testid=\"categories-page\">\n      <PageHeader>\n        <div className=\"px-4 md:px-6\">\n          <PageToolbar>\n            <PageTitle>\n              Categories & Tags\n            </PageTitle>\n            <PageActions>\n              <div className=\"hidden md:flex items-center gap-2\">\n                <Button onClick={() => setIsCreateDialogOpen(true)} data-testid=\"create-desktop\">\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  New {activeTab === \"categories\" ? \"Category\" : \"Tag\"}\n                </Button>\n              </div>\n            </PageActions>\n          </PageToolbar>\n          \n          <div className=\"mt-4\">\n            <div className=\"relative max-w-md\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n              <Input\n                placeholder={`Search ${activeTab}...`}\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-9\"\n                data-testid=\"search-input\"\n              />\n            </div>\n          </div>\n        </div>\n      </PageHeader>\n\n      <PageBody className=\"px-4 md:px-6\">\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-2 max-w-md\">\n            <TabsTrigger value=\"categories\" className=\"flex items-center gap-2\">\n              <FolderPlus className=\"h-4 w-4\" />\n              Categories ({mockCategories.length})\n            </TabsTrigger>\n            <TabsTrigger value=\"tags\" className=\"flex items-center gap-2\">\n              <Tag className=\"h-4 w-4\" />\n              Tags ({mockTags.length})\n            </TabsTrigger>\n          </TabsList>\n          \n          <TabsContent value=\"categories\" className=\"space-y-4\">\n            {filteredCategories.length === 0 ? (\n              searchQuery ? (\n                <div className=\"text-center py-12\">\n                  <h3 className=\"text-lg font-semibold mb-2\">No categories found</h3>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Try adjusting your search terms.\n                  </p>\n                </div>\n              ) : (\n                <EmptyState\n                  icon={<FolderPlus className=\"h-8 w-8 text-muted-foreground\" />}\n                  title=\"No categories yet\"\n                  description=\"Create your first category to organize your posts.\"\n                  action={{\n                    label: \"Create Category\",\n                    onClick: () => setIsCreateDialogOpen(true)\n                  }}\n                />\n              )\n            ) : (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {filteredCategories.map(category => (\n                  <CategoryCard key={category.id} category={category} />\n                ))}\n              </div>\n            )}\n          </TabsContent>\n          \n          <TabsContent value=\"tags\" className=\"space-y-4\">\n            {filteredTags.length === 0 ? (\n              searchQuery ? (\n                <div className=\"text-center py-12\">\n                  <h3 className=\"text-lg font-semibold mb-2\">No tags found</h3>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Try adjusting your search terms.\n                  </p>\n                </div>\n              ) : (\n                <EmptyState\n                  icon={<Tag className=\"h-8 w-8 text-muted-foreground\" />}\n                  title=\"No tags yet\"\n                  description=\"Create your first tag to help categorize your content.\"\n                  action={{\n                    label: \"Create Tag\",\n                    onClick: () => setIsCreateDialogOpen(true)\n                  }}\n                />\n              )\n            ) : (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n                {filteredTags.map(tag => (\n                  <TagCard key={tag.id} tag={tag} />\n                ))}\n              </div>\n            )}\n          </TabsContent>\n        </Tabs>\n      </PageBody>\n\n      {/* Mobile FAB */}\n      <FAB \n        onClick={() => setIsCreateDialogOpen(true)}\n        aria-label={`Create new ${activeTab === \"categories\" ? \"category\" : \"tag\"}`}\n        data-testid=\"create-fab\"\n      >\n        New {activeTab === \"categories\" ? \"Category\" : \"Tag\"}\n      </FAB>\n\n      <CreateDialog />\n    </Page>\n  );\n}","size_bytes":16340},"client/src/components/MediaLibraryPage.tsx":{"content":"import { useState } from \"react\";\nimport { Search, Grid, List, Upload, Filter, MoreHorizontal, Download, Eye, Trash2, Folder, Image, Video, FileText } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { \n  Page, \n  PageHeader, \n  PageTitle, \n  PageToolbar, \n  PageBody, \n  PageActions,\n  ActionBar,\n  FAB,\n  FilterSheet\n} from \"@/components/ui/page\";\nimport { EmptyState } from \"@/components/ui/empty-state\";\nimport { LoadingGrid } from \"@/components/ui/loading\";\n\ninterface MediaFile {\n  id: string;\n  name: string;\n  type: \"image\" | \"video\" | \"audio\" | \"document\";\n  url: string;\n  size: number;\n  uploadDate: string;\n  dimensions?: { width: number; height: number };\n  duration?: number;\n  mimeType: string;\n}\n\ninterface MediaLibraryPageProps {\n  onUpload?: () => void;\n  onSelect?: (file: MediaFile) => void;\n  onDelete?: (ids: string[]) => void;\n  onDownload?: (ids: string[]) => void;\n}\n\n// Mock data\nconst mockFiles: MediaFile[] = [\n  {\n    id: \"1\",\n    name: \"hero-banner.jpg\",\n    type: \"image\",\n    url: \"/images/hero-banner.jpg\",\n    size: 245760,\n    uploadDate: \"2024-03-15\",\n    dimensions: { width: 1920, height: 1080 },\n    mimeType: \"image/jpeg\"\n  },\n  {\n    id: \"2\", \n    name: \"product-demo.mp4\",\n    type: \"video\",\n    url: \"/videos/product-demo.mp4\",\n    size: 15728640,\n    uploadDate: \"2024-03-14\",\n    dimensions: { width: 1280, height: 720 },\n    duration: 120,\n    mimeType: \"video/mp4\"\n  },\n  {\n    id: \"3\",\n    name: \"user-guide.pdf\",\n    type: \"document\",\n    url: \"/documents/user-guide.pdf\",\n    size: 1048576,\n    uploadDate: \"2024-03-13\",\n    mimeType: \"application/pdf\"\n  },\n  {\n    id: \"4\",\n    name: \"logo-variants.png\",\n    type: \"image\",\n    url: \"/images/logo-variants.png\",\n    size: 89600,\n    uploadDate: \"2024-03-12\",\n    dimensions: { width: 800, height: 600 },\n    mimeType: \"image/png\"\n  },\n  {\n    id: \"5\",\n    name: \"background-music.mp3\",\n    type: \"audio\",\n    url: \"/audio/background-music.mp3\",\n    size: 5242880,\n    uploadDate: \"2024-03-11\",\n    duration: 180,\n    mimeType: \"audio/mpeg\"\n  }\n];\n\nexport default function MediaLibraryPage({ \n  onUpload = () => console.log(\"Upload files\"),\n  onSelect = (file) => console.log(\"Select file:\", file),\n  onDelete = (ids) => console.log(\"Delete files:\", ids),\n  onDownload = (ids) => console.log(\"Download files:\", ids)\n}: MediaLibraryPageProps) {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [typeFilter, setTypeFilter] = useState<string>(\"all\");\n  const [viewMode, setViewMode] = useState<\"grid\" | \"list\">(\"grid\");\n  const [selectedFiles, setSelectedFiles] = useState<string[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Filter files based on search and filters\n  const filteredFiles = mockFiles.filter(file => {\n    const matchesSearch = file.name.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesType = typeFilter === \"all\" || file.type === typeFilter;\n    return matchesSearch && matchesType;\n  });\n\n  const handleSelectFile = (fileId: string, checked: boolean) => {\n    if (checked) {\n      setSelectedFiles([...selectedFiles, fileId]);\n    } else {\n      setSelectedFiles(selectedFiles.filter(id => id !== fileId));\n    }\n  };\n\n  const handleSelectAll = (checked: boolean) => {\n    if (checked) {\n      setSelectedFiles(filteredFiles.map(file => file.id));\n    } else {\n      setSelectedFiles([]);\n    }\n  };\n\n  const formatFileSize = (bytes: number) => {\n    const units = ['B', 'KB', 'MB', 'GB'];\n    let size = bytes;\n    let unitIndex = 0;\n    \n    while (size >= 1024 && unitIndex < units.length - 1) {\n      size /= 1024;\n      unitIndex++;\n    }\n    \n    return `${size.toFixed(1)} ${units[unitIndex]}`;\n  };\n\n  const getFileIcon = (type: MediaFile[\"type\"]) => {\n    const icons = {\n      image: Image,\n      video: Video,\n      audio: Video, // Using video icon for audio\n      document: FileText\n    };\n    return icons[type] || FileText;\n  };\n\n  const getFileTypeColor = (type: MediaFile[\"type\"]) => {\n    const colors = {\n      image: \"bg-blue-500\",\n      video: \"bg-purple-500\", \n      audio: \"bg-green-500\",\n      document: \"bg-orange-500\"\n    };\n    return colors[type] || \"bg-gray-500\";\n  };\n\n  const MediaGridItem = ({ file }: { file: MediaFile }) => {\n    const Icon = getFileIcon(file.type);\n    \n    return (\n      <Card className=\"hover-elevate group\" data-testid={`media-item-${file.id}`}>\n        <CardContent className=\"p-3\">\n          <div className=\"flex items-start justify-between mb-2\">\n            <Checkbox\n              checked={selectedFiles.includes(file.id)}\n              onCheckedChange={(checked) => handleSelectFile(file.id, !!checked)}\n              data-testid={`file-checkbox-${file.id}`}\n            />\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"ghost\" size=\"icon\" className=\"shrink-0 opacity-0 group-hover:opacity-100\" data-testid={`file-menu-${file.id}`}>\n                  <MoreHorizontal className=\"h-4 w-4\" />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\">\n                <DropdownMenuItem onClick={() => onSelect(file)}>\n                  <Eye className=\"h-4 w-4 mr-2\" />\n                  View\n                </DropdownMenuItem>\n                <DropdownMenuItem onClick={() => onDownload([file.id])}>\n                  <Download className=\"h-4 w-4 mr-2\" />\n                  Download\n                </DropdownMenuItem>\n                <DropdownMenuItem \n                  onClick={() => onDelete([file.id])}\n                  className=\"text-destructive focus:text-destructive\"\n                >\n                  <Trash2 className=\"h-4 w-4 mr-2\" />\n                  Delete\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n          \n          <div className=\"aspect-square bg-muted rounded-lg flex items-center justify-center mb-3 relative overflow-hidden\">\n            {file.type === \"image\" ? (\n              <img \n                src={file.url} \n                alt={file.name}\n                className=\"w-full h-full object-cover\"\n                onError={(e) => {\n                  const target = e.target as HTMLImageElement;\n                  target.style.display = \"none\";\n                  target.nextElementSibling?.classList.remove(\"hidden\");\n                }}\n              />\n            ) : null}\n            <div className={`absolute inset-0 flex items-center justify-center ${file.type === \"image\" ? \"hidden\" : \"\"}`}>\n              <div className={`p-3 rounded-full ${getFileTypeColor(file.type)}`}>\n                <Icon className=\"h-6 w-6 text-white\" />\n              </div>\n            </div>\n            {file.duration && (\n              <div className=\"absolute bottom-2 right-2 bg-black/75 text-white text-xs px-1.5 py-0.5 rounded\">\n                {Math.floor(file.duration / 60)}:{(file.duration % 60).toString().padStart(2, \"0\")}\n              </div>\n            )}\n          </div>\n          \n          <div className=\"space-y-1\">\n            <p className=\"text-sm font-medium line-clamp-1\" title={file.name}>\n              {file.name}\n            </p>\n            <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n              <span>{formatFileSize(file.size)}</span>\n              {file.dimensions && (\n                <span>{file.dimensions.width}×{file.dimensions.height}</span>\n              )}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              {new Date(file.uploadDate).toLocaleDateString()}\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  };\n\n  const MediaListItem = ({ file }: { file: MediaFile }) => {\n    const Icon = getFileIcon(file.type);\n    \n    return (\n      <div className=\"flex items-center gap-3 p-3 border rounded-lg hover-elevate group\" data-testid={`media-item-${file.id}`}>\n        <Checkbox\n          checked={selectedFiles.includes(file.id)}\n          onCheckedChange={(checked) => handleSelectFile(file.id, !!checked)}\n          data-testid={`file-checkbox-${file.id}`}\n        />\n        \n        <div className={`p-2 rounded ${getFileTypeColor(file.type)}`}>\n          <Icon className=\"h-4 w-4 text-white\" />\n        </div>\n        \n        <div className=\"flex-1 min-w-0\">\n          <p className=\"font-medium line-clamp-1\">{file.name}</p>\n          <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n            <span>{formatFileSize(file.size)}</span>\n            {file.dimensions && (\n              <>\n                <span>•</span>\n                <span>{file.dimensions.width}×{file.dimensions.height}</span>\n              </>\n            )}\n            {file.duration && (\n              <>\n                <span>•</span>\n                <span>{Math.floor(file.duration / 60)}:{(file.duration % 60).toString().padStart(2, \"0\")}</span>\n              </>\n            )}\n            <span>•</span>\n            <span>{new Date(file.uploadDate).toLocaleDateString()}</span>\n          </div>\n        </div>\n        \n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button variant=\"ghost\" size=\"icon\" className=\"shrink-0 opacity-0 group-hover:opacity-100\" data-testid={`file-menu-${file.id}`}>\n              <MoreHorizontal className=\"h-4 w-4\" />\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"end\">\n            <DropdownMenuItem onClick={() => onSelect(file)}>\n              <Eye className=\"h-4 w-4 mr-2\" />\n              View\n            </DropdownMenuItem>\n            <DropdownMenuItem onClick={() => onDownload([file.id])}>\n              <Download className=\"h-4 w-4 mr-2\" />\n              Download\n            </DropdownMenuItem>\n            <DropdownMenuItem \n              onClick={() => onDelete([file.id])}\n              className=\"text-destructive focus:text-destructive\"\n            >\n              <Trash2 className=\"h-4 w-4 mr-2\" />\n              Delete\n            </DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </div>\n    );\n  };\n\n  const FilterControls = () => (\n    <div className=\"space-y-4\">\n      <div className=\"space-y-2\">\n        <label className=\"text-sm font-medium\">File Type</label>\n        <Select value={typeFilter} onValueChange={setTypeFilter}>\n          <SelectTrigger>\n            <SelectValue />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">All Types</SelectItem>\n            <SelectItem value=\"image\">Images</SelectItem>\n            <SelectItem value=\"video\">Videos</SelectItem>\n            <SelectItem value=\"audio\">Audio</SelectItem>\n            <SelectItem value=\"document\">Documents</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n    </div>\n  );\n\n  return (\n    <Page data-testid=\"media-library-page\">\n      <PageHeader>\n        <div className=\"px-4 md:px-6\">\n          <PageToolbar>\n            <PageTitle badge=\"2.1k\">\n              Media Library\n            </PageTitle>\n            <PageActions>\n              <div className=\"hidden md:flex items-center gap-2\">\n                <Button\n                  variant={viewMode === \"grid\" ? \"default\" : \"outline\"}\n                  size=\"icon\"\n                  onClick={() => setViewMode(\"grid\")}\n                  data-testid=\"view-grid\"\n                >\n                  <Grid className=\"h-4 w-4\" />\n                </Button>\n                <Button\n                  variant={viewMode === \"list\" ? \"default\" : \"outline\"}\n                  size=\"icon\"\n                  onClick={() => setViewMode(\"list\")}\n                  data-testid=\"view-list\"\n                >\n                  <List className=\"h-4 w-4\" />\n                </Button>\n                <Button onClick={onUpload} data-testid=\"upload-desktop\">\n                  <Upload className=\"h-4 w-4 mr-2\" />\n                  Upload\n                </Button>\n              </div>\n            </PageActions>\n          </PageToolbar>\n          \n          <div className=\"mt-4 flex flex-col gap-3 md:flex-row md:items-center md:justify-between\">\n            <div className=\"flex items-center gap-2 flex-1 max-w-md\">\n              <div className=\"relative flex-1\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n                <Input\n                  placeholder=\"Search files...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-9\"\n                  data-testid=\"search-files\"\n                />\n              </div>\n              <FilterSheet title=\"Filter Files\">\n                <FilterControls />\n              </FilterSheet>\n            </div>\n\n            {/* Desktop Filters */}\n            <div className=\"hidden md:flex items-center gap-2\">\n              <Select value={typeFilter} onValueChange={setTypeFilter}>\n                <SelectTrigger className=\"w-36\">\n                  <SelectValue placeholder=\"File Type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Types</SelectItem>\n                  <SelectItem value=\"image\">Images</SelectItem>\n                  <SelectItem value=\"video\">Videos</SelectItem>\n                  <SelectItem value=\"audio\">Audio</SelectItem>\n                  <SelectItem value=\"document\">Documents</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </div>\n      </PageHeader>\n\n      <PageBody className=\"px-4 md:px-6\">\n        {isLoading ? (\n          <LoadingGrid items={12} columns={viewMode === \"grid\" ? 4 : 1} />\n        ) : filteredFiles.length === 0 ? (\n          searchQuery || typeFilter !== \"all\" ? (\n            <div className=\"text-center py-12\">\n              <h3 className=\"text-lg font-semibold mb-2\">No files found</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Try adjusting your search or filter criteria.\n              </p>\n            </div>\n          ) : (\n            <EmptyState\n              icon={<Folder className=\"h-8 w-8 text-muted-foreground\" />}\n              title=\"No media files\"\n              description=\"Upload images, videos, and documents to your media library.\"\n              action={{\n                label: \"Upload Files\",\n                onClick: onUpload\n              }}\n            />\n          )\n        ) : (\n          <>\n            {/* Selection Bar */}\n            {selectedFiles.length > 0 && (\n              <div className=\"bg-muted/50 border rounded-lg p-3 mb-4\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm font-medium\">\n                    {selectedFiles.length} file{selectedFiles.length !== 1 ? 's' : ''} selected\n                  </span>\n                  <div className=\"flex items-center gap-2\">\n                    <Button variant=\"outline\" size=\"sm\" onClick={() => onDownload(selectedFiles)}>\n                      <Download className=\"h-4 w-4 mr-1\" />\n                      Download\n                    </Button>\n                    <Button variant=\"outline\" size=\"sm\" className=\"text-destructive\" onClick={() => onDelete(selectedFiles)}>\n                      <Trash2 className=\"h-4 w-4 mr-1\" />\n                      Delete\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Files Content */}\n            {viewMode === \"grid\" ? (\n              <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4\">\n                {filteredFiles.map(file => (\n                  <MediaGridItem key={file.id} file={file} />\n                ))}\n              </div>\n            ) : (\n              <div className=\"space-y-2\">\n                {filteredFiles.map(file => (\n                  <MediaListItem key={file.id} file={file} />\n                ))}\n              </div>\n            )}\n          </>\n        )}\n      </PageBody>\n\n      {/* Mobile FAB */}\n      <FAB \n        onClick={onUpload}\n        aria-label=\"Upload files\"\n        data-testid=\"upload-fab\"\n      >\n        Upload\n      </FAB>\n\n      {/* Mobile Action Bar for bulk actions */}\n      <ActionBar show={selectedFiles.length > 0}>\n        <span className=\"text-sm font-medium\">\n          {selectedFiles.length} selected\n        </span>\n        <div className=\"flex gap-2\">\n          <Button variant=\"outline\" size=\"sm\" onClick={() => onDownload(selectedFiles)}>\n            <Download className=\"h-4 w-4\" />\n          </Button>\n          <Button variant=\"destructive\" size=\"sm\" onClick={() => onDelete(selectedFiles)}>\n            <Trash2 className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </ActionBar>\n    </Page>\n  );\n}","size_bytes":17364},"client/src/components/NewPostPage.tsx":{"content":"import { useState, useRef, useEffect, useCallback, useMemo } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { ArrowLeft, Save, Eye, MoreHorizontal, ImagePlus, Tag, Settings, Globe } from \"lucide-react\";\nimport { useCreatePost } from \"@/hooks/usePosts\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useCategories } from \"@/hooks/useCategories\";\nimport { useCreateTagsFromNames } from \"@/hooks/useTags\";\nimport { insertPostSchema } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  Page, \n  PageHeader, \n  PageTitle, \n  PageToolbar, \n  PageBody, \n  PageActions,\n  ActionBar\n} from \"@/components/ui/page\";\nimport { RichTextEditor, type RichTextEditorRef } from \"@/components/ui/rich-text-editor\";\nimport { PostPreviewModal } from \"./PostPreviewModal\";\n\ninterface NewPostPageProps {\n  mode?: 'create' | 'edit';\n  initialData?: any;\n  isLoading?: boolean;\n  onSave?: (data: any) => void;\n  onPublish?: (data: any) => void;\n  onPreview?: (data: any) => void;\n}\n\nexport default function NewPostPage({ \n  mode = 'create',\n  initialData,\n  isLoading: externalLoading = false,\n  onSave,\n  onPublish,\n  onPreview = (data) => console.log(\"Preview post:\", data)\n}: NewPostPageProps) {\n  const [, setLocation] = useLocation();\n  const [activeTab, setActiveTab] = useState(\"content\");\n  const editorRef = useRef<RichTextEditorRef>(null);\n  const { toast } = useToast();\n  const createPostMutation = useCreatePost();\n  const createTagsMutation = useCreateTagsFromNames();\n  const { data: categories = [] } = useCategories();\n  const isLoading = externalLoading || createPostMutation.isPending || createTagsMutation.isPending;\n  const [formData, setFormData] = useState(() => initialData || {\n    title: \"\",\n    content: \"\",\n    excerpt: \"\",\n    category: \"\",\n    tags: [] as string[],\n    status: \"draft\",\n    featured: false,\n    allowComments: true,\n    seoTitle: \"\",\n    seoDescription: \"\",\n    publishDate: \"\"\n  });\n\n  // Update form data when initialData changes (for edit mode)\n  useEffect(() => {\n    if (initialData && mode === 'edit') {\n      setFormData(initialData);\n      setIsDirty(false);\n    }\n  }, [initialData, mode]);\n\n  const [newTag, setNewTag] = useState(\"\");\n  const [isDirty, setIsDirty] = useState(false);\n  const [previewData, setPreviewData] = useState<any>(null);\n  const [isPreviewOpen, setIsPreviewOpen] = useState(false);\n\n  // Optimized update function to prevent unnecessary re-renders\n  const updateField = useCallback((field: string, value: any) => {\n    setFormData((prev: any) => {\n      // Only update if the value actually changed\n      if (prev[field] === value) return prev;\n      return { ...prev, [field]: value };\n    });\n    // Set dirty state in a separate effect to prevent re-render cascade\n    setTimeout(() => setIsDirty(true), 0);\n  }, []);\n\n  // Stable tag functions to prevent re-renders\n  const addTag = useCallback(() => {\n    if (newTag.trim()) {\n      setFormData((prev: any) => {\n        if (prev.tags.includes(newTag.trim())) return prev;\n        return { ...prev, tags: [...prev.tags, newTag.trim()] };\n      });\n      setNewTag(\"\");\n      setTimeout(() => setIsDirty(true), 0);\n    }\n  }, [newTag]);\n\n  const removeTag = useCallback((tagToRemove: string) => {\n    setFormData((prev: any) => ({\n      ...prev,\n      tags: prev.tags.filter((tag: string) => tag !== tagToRemove)\n    }));\n    setTimeout(() => setIsDirty(true), 0);\n  }, []);\n\n  const handleSave = async () => {\n    try {\n      if (onSave) {\n        // For edit mode, resolve tag names to IDs\n        if (formData.tags && formData.tags.length > 0) {\n          const tagIds = await createTagsMutation.mutateAsync(formData.tags);\n          onSave({ ...formData, tags: tagIds });\n        } else {\n          onSave(formData);\n        }\n        return;\n      }\n      \n      // Validate required fields\n      if (!formData.title.trim()) {\n        toast({\n          title: \"Validation Error\",\n          description: \"Post title is required.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      \n      // Create slug from title if not provided\n      const slug = formData.title.toLowerCase()\n        .replace(/[^a-z0-9]+/g, '-')\n        .replace(/(^-|-$)/g, '');\n      \n      let postData = {\n        ...formData,\n        slug,\n        status: \"draft\",\n        categoryId: formData.category // Map category to categoryId\n      };\n      \n      // Remove the old category field\n      delete (postData as any).category;\n      \n      // Resolve tag names to IDs if tags exist\n      if (formData.tags && formData.tags.length > 0) {\n        const tagIds = await createTagsMutation.mutateAsync(formData.tags);\n        postData = { ...postData, tags: tagIds };\n      }\n      \n      await createPostMutation.mutateAsync(postData);\n      \n      toast({\n        title: \"Success\",\n        description: \"Post saved as draft successfully.\",\n      });\n      \n      setIsDirty(false);\n      // Navigate back to posts list\n      setLocation(\"/posts\");\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to save post. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handlePublish = async () => {\n    try {\n      if (onPublish) {\n        // For edit mode, resolve tag names to IDs and map category\n        let publishData = { \n          ...formData, \n          status: \"published\",\n          categoryId: formData.category\n        };\n        delete (publishData as any).category;\n        \n        if (formData.tags && formData.tags.length > 0) {\n          const tagIds = await createTagsMutation.mutateAsync(formData.tags);\n          onPublish({ ...publishData, tags: tagIds });\n        } else {\n          onPublish(publishData);\n        }\n        return;\n      }\n      \n      // Validate required fields\n      if (!formData.title.trim()) {\n        toast({\n          title: \"Validation Error\",\n          description: \"Post title is required.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      \n      if (!formData.content.trim()) {\n        toast({\n          title: \"Validation Error\",\n          description: \"Post content is required.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      \n      // Create slug from title if not provided\n      const slug = formData.title.toLowerCase()\n        .replace(/[^a-z0-9]+/g, '-')\n        .replace(/(^-|-$)/g, '');\n      \n      let postData = {\n        ...formData,\n        slug,\n        status: \"published\",\n        publishedAt: new Date().toISOString(),\n        categoryId: formData.category // Map category to categoryId\n      };\n      \n      // Remove the old category field\n      delete (postData as any).category;\n      \n      // Resolve tag names to IDs if tags exist\n      if (formData.tags && formData.tags.length > 0) {\n        const tagIds = await createTagsMutation.mutateAsync(formData.tags);\n        postData = { ...postData, tags: tagIds };\n      }\n      \n      await createPostMutation.mutateAsync(postData);\n      \n      toast({\n        title: \"Success\",\n        description: \"Post published successfully!\",\n      });\n      \n      setIsDirty(false);\n      // Navigate back to posts list\n      setLocation(\"/posts\");\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to publish post. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handlePreview = useCallback(() => {\n    setPreviewData(formData);\n    setIsPreviewOpen(true);\n    onPreview(formData);\n  }, [formData, onPreview]);\n\n  const ContentTab = useCallback(() => (\n    <div className=\"space-y-6\">\n      <div className=\"space-y-2\">\n        <Label htmlFor=\"title\">Title *</Label>\n        <Input\n          id=\"title\"\n          placeholder=\"Enter your post title...\"\n          value={formData.title}\n          onChange={(e) => updateField(\"title\", e.target.value)}\n          className=\"text-lg font-medium\"\n          data-testid=\"post-title\"\n        />\n      </div>\n\n      <div className=\"space-y-2\">\n        <Label htmlFor=\"content\">Content *</Label>\n        <RichTextEditor\n          ref={editorRef}\n          content={formData.content}\n          placeholder=\"Write your post content here...\"\n          onChange={(content) => updateField(\"content\", content)}\n          editorClassName=\"min-h-[300px] md:min-h-[400px]\"\n        />\n        <p className=\"text-xs text-muted-foreground\">\n          {editorRef.current?.getText().length || 0} characters\n        </p>\n      </div>\n\n      <div className=\"space-y-2\">\n        <Label htmlFor=\"excerpt\">Excerpt</Label>\n        <Textarea\n          id=\"excerpt\"\n          placeholder=\"Brief description of your post...\"\n          value={formData.excerpt}\n          onChange={(e) => updateField(\"excerpt\", e.target.value)}\n          className=\"h-20\"\n          data-testid=\"post-excerpt\"\n        />\n        <p className=\"text-xs text-muted-foreground\">\n          Optional summary that appears in post previews\n        </p>\n      </div>\n\n      <div className=\"flex gap-2\">\n        <Button variant=\"outline\" size=\"sm\" className=\"flex-1\">\n          <ImagePlus className=\"h-4 w-4 mr-2\" />\n          Add Media\n        </Button>\n        <Button variant=\"outline\" size=\"sm\" onClick={handlePreview}>\n          <Eye className=\"h-4 w-4 mr-2\" />\n          Preview\n        </Button>\n      </div>\n    </div>\n  ), [formData.title, formData.content, formData.excerpt, updateField, handlePreview]);\n\n  const MetaTab = useCallback(() => (\n    <div className=\"space-y-6\">\n      <div className=\"space-y-4\">\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"category\">Category</Label>\n          <Select value={formData.category} onValueChange={(value) => updateField(\"category\", value)}>\n            <SelectTrigger data-testid=\"post-category\">\n              <SelectValue placeholder=\"Select category\" />\n            </SelectTrigger>\n            <SelectContent>\n              {categories.map((category: any) => (\n                <SelectItem key={category.id} value={category.id}>\n                  {category.name}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label>Tags</Label>\n          <div className=\"flex gap-2\">\n            <Input\n              placeholder=\"Add a tag...\"\n              value={newTag}\n              onChange={(e) => setNewTag(e.target.value)}\n              onKeyPress={(e) => e.key === \"Enter\" && (e.preventDefault(), addTag())}\n              className=\"flex-1\"\n              data-testid=\"new-tag-input\"\n            />\n            <Button type=\"button\" onClick={addTag} size=\"sm\">\n              <Tag className=\"h-4 w-4\" />\n            </Button>\n          </div>\n          {formData.tags.length > 0 && (\n            <div className=\"flex flex-wrap gap-2 mt-2\">\n              {formData.tags.map((tag: string) => (\n                <Badge \n                  key={tag} \n                  variant=\"secondary\" \n                  className=\"cursor-pointer hover:bg-destructive hover:text-destructive-foreground\"\n                  onClick={() => removeTag(tag)}\n                  data-testid={`tag-${tag}`}\n                >\n                  {tag} ×\n                </Badge>\n              ))}\n            </div>\n          )}\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"publishDate\">Publish Date</Label>\n          <Input\n            id=\"publishDate\"\n            type=\"datetime-local\"\n            value={formData.publishDate}\n            onChange={(e) => updateField(\"publishDate\", e.target.value)}\n            data-testid=\"publish-date\"\n          />\n          <p className=\"text-xs text-muted-foreground\">\n            Leave empty to publish immediately\n          </p>\n        </div>\n      </div>\n\n      <Separator />\n\n      <div className=\"space-y-4\">\n        <h4 className=\"font-medium\">Post Options</h4>\n        \n        <div className=\"flex items-center justify-between\">\n          <div className=\"space-y-0.5\">\n            <Label>Featured Post</Label>\n            <p className=\"text-sm text-muted-foreground\">\n              Show this post prominently\n            </p>\n          </div>\n          <Switch\n            checked={formData.featured}\n            onCheckedChange={(checked) => updateField(\"featured\", checked)}\n            data-testid=\"featured-toggle\"\n          />\n        </div>\n\n        <div className=\"flex items-center justify-between\">\n          <div className=\"space-y-0.5\">\n            <Label>Allow Comments</Label>\n            <p className=\"text-sm text-muted-foreground\">\n              Let readers comment on this post\n            </p>\n          </div>\n          <Switch\n            checked={formData.allowComments}\n            onCheckedChange={(checked) => updateField(\"allowComments\", checked)}\n            data-testid=\"comments-toggle\"\n          />\n        </div>\n      </div>\n    </div>\n  ), [formData.category, formData.tags, formData.publishDate, formData.featured, formData.allowComments, newTag, updateField, addTag, removeTag]);\n\n  const SeoTab = useCallback(() => (\n    <div className=\"space-y-6\">\n      <div className=\"space-y-2\">\n        <Label htmlFor=\"seoTitle\">SEO Title</Label>\n        <Input\n          id=\"seoTitle\"\n          placeholder=\"SEO optimized title...\"\n          value={formData.seoTitle}\n          onChange={(e) => updateField(\"seoTitle\", e.target.value)}\n          data-testid=\"seo-title\"\n        />\n        <p className=\"text-xs text-muted-foreground\">\n          {formData.seoTitle.length}/60 characters recommended\n        </p>\n      </div>\n\n      <div className=\"space-y-2\">\n        <Label htmlFor=\"seoDescription\">Meta Description</Label>\n        <Textarea\n          id=\"seoDescription\"\n          placeholder=\"Brief description for search engines...\"\n          value={formData.seoDescription}\n          onChange={(e) => updateField(\"seoDescription\", e.target.value)}\n          className=\"h-20\"\n          data-testid=\"seo-description\"\n        />\n        <p className=\"text-xs text-muted-foreground\">\n          {formData.seoDescription.length}/160 characters recommended\n        </p>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-sm\">Search Preview</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-1\">\n          <div className=\"text-lg text-blue-600 font-medium line-clamp-1\">\n            {formData.seoTitle || formData.title || \"Your Post Title\"}\n          </div>\n          <div className=\"text-sm text-green-700\">\n            yoursite.com/posts/{formData.title.toLowerCase().replace(/\\s+/g, \"-\") || \"post-slug\"}\n          </div>\n          <div className=\"text-sm text-gray-600 line-clamp-2\">\n            {formData.seoDescription || formData.excerpt || \"Your post description will appear here...\"}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  ), [formData.seoTitle, formData.seoDescription, formData.title, formData.excerpt, updateField]);\n\n  return (\n    <Page data-testid=\"new-post-page\">\n      <PageHeader>\n        <div className=\"px-4 md:px-6\">\n          <PageToolbar>\n            <div className=\"flex items-center gap-3\">\n              <Button \n                variant=\"ghost\" \n                size=\"icon\" \n                onClick={() => setLocation(\"/posts\")}\n                data-testid=\"back-button\"\n                aria-label=\"Go back to posts\"\n                className=\"hover:bg-accent\"\n              >\n                <ArrowLeft className=\"h-5 w-5\" />\n              </Button>\n              <div className=\"flex items-center gap-2\">\n                <PageTitle className=\"type-heading\">\n                  {formData.title || (mode === 'edit' ? \"Edit Post\" : \"New Post\")}\n                </PageTitle>\n                {isDirty && (\n                  <Badge variant=\"outline\" className=\"text-xs bg-warning/10 text-warning border-warning/20\">\n                    Unsaved\n                  </Badge>\n                )}\n              </div>\n            </div>\n            <PageActions>\n              <div className=\"hidden md:flex items-center gap-2\">\n                <Button variant=\"outline\" onClick={handlePreview} data-testid=\"preview-desktop\">\n                  <Eye className=\"h-4 w-4 mr-2\" />\n                  Preview\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  onClick={handleSave} \n                  disabled={isLoading}\n                  data-testid=\"save-desktop\"\n                >\n                  <Save className=\"h-4 w-4 mr-2\" />\n                  {isLoading ? \"Saving...\" : (mode === 'edit' ? \"Save Changes\" : \"Save Draft\")}\n                </Button>\n                <Button \n                  onClick={handlePublish} \n                  disabled={isLoading}\n                  data-testid=\"publish-desktop\"\n                >\n                  <Globe className=\"h-4 w-4 mr-2\" />\n                  {isLoading ? \"Publishing...\" : \"Publish\"}\n                </Button>\n                <DropdownMenu>\n                  <DropdownMenuTrigger asChild>\n                    <Button variant=\"ghost\" size=\"icon\" data-testid=\"more-actions\">\n                      <MoreHorizontal className=\"h-4 w-4\" />\n                    </Button>\n                  </DropdownMenuTrigger>\n                  <DropdownMenuContent align=\"end\">\n                    <DropdownMenuItem>Schedule Post</DropdownMenuItem>\n                    <DropdownMenuItem>Save as Template</DropdownMenuItem>\n                    <DropdownMenuItem className=\"text-destructive\">Discard Changes</DropdownMenuItem>\n                  </DropdownMenuContent>\n                </DropdownMenu>\n              </div>\n            </PageActions>\n          </PageToolbar>\n        </div>\n      </PageHeader>\n\n      <PageBody className=\"px-4 md:px-6\">\n        {/* Mobile Tabs */}\n        <div className=\"md:hidden\">\n          <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-4\">\n            <TabsList className=\"grid w-full grid-cols-3\">\n              <TabsTrigger value=\"content\" className=\"text-xs\">\n                <div className=\"flex flex-col items-center gap-1\">\n                  <span>Content</span>\n                </div>\n              </TabsTrigger>\n              <TabsTrigger value=\"meta\" className=\"text-xs\">\n                <div className=\"flex flex-col items-center gap-1\">\n                  <span>Settings</span>\n                </div>\n              </TabsTrigger>\n              <TabsTrigger value=\"seo\" className=\"text-xs\">\n                <div className=\"flex flex-col items-center gap-1\">\n                  <span>SEO</span>\n                </div>\n              </TabsTrigger>\n            </TabsList>\n            \n            <TabsContent value=\"content\" className=\"space-y-4\">\n              <ContentTab />\n            </TabsContent>\n            \n            <TabsContent value=\"meta\" className=\"space-y-4\">\n              <MetaTab />\n            </TabsContent>\n            \n            <TabsContent value=\"seo\" className=\"space-y-4\">\n              <SeoTab />\n            </TabsContent>\n          </Tabs>\n        </div>\n\n        {/* Desktop Layout */}\n        <div className=\"hidden md:grid md:grid-cols-3 md:gap-6\">\n          <div className=\"md:col-span-2 space-y-6\">\n            <ContentTab />\n          </div>\n          \n          <div className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Settings className=\"h-4 w-4\" />\n                  Post Settings\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <MetaTab />\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Globe className=\"h-4 w-4\" />\n                  SEO Settings\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <SeoTab />\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </PageBody>\n\n      {/* Mobile Action Bar */}\n      <ActionBar show={true}>\n        <div className=\"flex items-center gap-2\">\n          <Button \n            variant=\"outline\" \n            size=\"sm\" \n            onClick={handleSave} \n            disabled={isLoading}\n            data-testid=\"save-mobile\"\n          >\n            <Save className=\"h-4 w-4 mr-1\" />\n            {isLoading ? \"Saving...\" : (mode === 'edit' ? \"Save\" : \"Save\")}\n          </Button>\n          <Button \n            size=\"sm\" \n            onClick={handlePublish} \n            disabled={isLoading}\n            data-testid=\"publish-mobile\"\n          >\n            <Globe className=\"h-4 w-4 mr-1\" />\n            {isLoading ? \"Publishing...\" : \"Publish\"}\n          </Button>\n        </div>\n        <Button variant=\"outline\" size=\"sm\" onClick={handlePreview} data-testid=\"preview-mobile\">\n          <Eye className=\"h-4 w-4\" />\n        </Button>\n      </ActionBar>\n      \n      {/* Preview Modal */}\n      {previewData && (\n        <PostPreviewModal\n          isOpen={isPreviewOpen}\n          onClose={() => setIsPreviewOpen(false)}\n          postData={previewData}\n        />\n      )}\n    </Page>\n  );\n}","size_bytes":22061},"client/src/components/SchedulingPage.tsx":{"content":"import { useState } from \"react\";\nimport { Calendar, Clock, Plus, Filter, MoreHorizontal, Edit, Trash2, AlertCircle, CheckCircle } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { \n  Page, \n  PageHeader, \n  PageTitle, \n  PageToolbar, \n  PageBody, \n  PageActions,\n  FAB,\n  FilterSheet\n} from \"@/components/ui/page\";\nimport { EmptyStates } from \"@/components/ui/empty-state\";\n\ninterface ScheduledPost {\n  id: string;\n  title: string;\n  type: \"post\" | \"page\" | \"social\";\n  scheduledDate: string;\n  status: \"scheduled\" | \"published\" | \"failed\" | \"cancelled\";\n  author: string;\n  platform?: string;\n}\n\ninterface SchedulingPageProps {\n  onCreateSchedule?: () => void;\n  onEditSchedule?: (id: string) => void;\n  onDeleteSchedule?: (id: string) => void;\n  onPublishNow?: (id: string) => void;\n}\n\n// Mock data\nconst mockScheduledPosts: ScheduledPost[] = [\n  {\n    id: \"1\",\n    title: \"Getting Started with React Development\",\n    type: \"post\",\n    scheduledDate: \"2024-03-20T10:00:00\",\n    status: \"scheduled\",\n    author: \"John Doe\"\n  },\n  {\n    id: \"2\",\n    title: \"New Product Launch Announcement\",\n    type: \"social\",\n    scheduledDate: \"2024-03-19T14:30:00\",\n    status: \"published\",\n    author: \"Marketing Team\",\n    platform: \"Twitter\"\n  },\n  {\n    id: \"3\",\n    title: \"Weekly Newsletter Content\",\n    type: \"post\",\n    scheduledDate: \"2024-03-21T09:00:00\",\n    status: \"failed\",\n    author: \"Jane Smith\"\n  },\n  {\n    id: \"4\",\n    title: \"About Us Page Update\",\n    type: \"page\",\n    scheduledDate: \"2024-03-22T16:00:00\",\n    status: \"scheduled\",\n    author: \"Admin\"\n  }\n];\n\nexport default function SchedulingPage({ \n  onCreateSchedule = () => console.log(\"Create schedule\"),\n  onEditSchedule = (id) => console.log(\"Edit schedule:\", id),\n  onDeleteSchedule = (id) => console.log(\"Delete schedule:\", id),\n  onPublishNow = (id) => console.log(\"Publish now:\", id)\n}: SchedulingPageProps) {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\");\n  const [typeFilter, setTypeFilter] = useState<string>(\"all\");\n\n  const filteredPosts = mockScheduledPosts.filter(post => {\n    const matchesSearch = post.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         post.author.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesStatus = statusFilter === \"all\" || post.status === statusFilter;\n    const matchesType = typeFilter === \"all\" || post.type === typeFilter;\n    return matchesSearch && matchesStatus && matchesType;\n  });\n\n  const getStatusBadge = (status: ScheduledPost[\"status\"]) => {\n    const variants = {\n      scheduled: { variant: \"secondary\" as const, icon: Clock },\n      published: { variant: \"default\" as const, icon: CheckCircle },\n      failed: { variant: \"destructive\" as const, icon: AlertCircle },\n      cancelled: { variant: \"outline\" as const, icon: AlertCircle }\n    };\n    \n    const config = variants[status];\n    const Icon = config.icon;\n    \n    return (\n      <Badge variant={config.variant} className=\"capitalize flex items-center gap-1\">\n        <Icon className=\"h-3 w-3\" />\n        {status}\n      </Badge>\n    );\n  };\n\n  const getTypeBadge = (type: ScheduledPost[\"type\"]) => {\n    const colors = {\n      post: \"bg-blue-100 text-blue-800\",\n      page: \"bg-green-100 text-green-800\", \n      social: \"bg-purple-100 text-purple-800\"\n    };\n    \n    return (\n      <Badge variant=\"outline\" className={`capitalize ${colors[type]}`}>\n        {type}\n      </Badge>\n    );\n  };\n\n  const formatDateTime = (dateString: string) => {\n    const date = new Date(dateString);\n    const now = new Date();\n    const diffMs = date.getTime() - now.getTime();\n    const diffDays = Math.ceil(diffMs / (1000 * 60 * 60 * 24));\n    \n    const timeStr = date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n    const dateStr = date.toLocaleDateString();\n    \n    let relative = \"\";\n    if (diffDays === 0) relative = \"Today\";\n    else if (diffDays === 1) relative = \"Tomorrow\";\n    else if (diffDays === -1) relative = \"Yesterday\";\n    else if (diffDays > 1) relative = `In ${diffDays} days`;\n    else if (diffDays < -1) relative = `${Math.abs(diffDays)} days ago`;\n    \n    return { timeStr, dateStr, relative };\n  };\n\n  const ScheduleCard = ({ post }: { post: ScheduledPost }) => {\n    const { timeStr, dateStr, relative } = formatDateTime(post.scheduledDate);\n    \n    return (\n      <Card className=\"hover-elevate\" data-testid={`schedule-card-${post.id}`}>\n        <CardHeader className=\"pb-3\">\n          <div className=\"flex items-start justify-between\">\n            <div className=\"min-w-0 flex-1\">\n              <CardTitle className=\"text-base line-clamp-2 mb-2\">{post.title}</CardTitle>\n              <div className=\"flex items-center gap-2 flex-wrap\">\n                {getStatusBadge(post.status)}\n                {getTypeBadge(post.type)}\n                {post.platform && (\n                  <Badge variant=\"outline\" className=\"text-xs\">\n                    {post.platform}\n                  </Badge>\n                )}\n              </div>\n            </div>\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"ghost\" size=\"icon\" className=\"shrink-0\" data-testid={`schedule-menu-${post.id}`}>\n                  <MoreHorizontal className=\"h-4 w-4\" />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\">\n                <DropdownMenuItem onClick={() => onEditSchedule(post.id)}>\n                  <Edit className=\"h-4 w-4 mr-2\" />\n                  Edit\n                </DropdownMenuItem>\n                {post.status === \"scheduled\" && (\n                  <DropdownMenuItem onClick={() => onPublishNow(post.id)}>\n                    <CheckCircle className=\"h-4 w-4 mr-2\" />\n                    Publish Now\n                  </DropdownMenuItem>\n                )}\n                <DropdownMenuItem \n                  onClick={() => onDeleteSchedule(post.id)}\n                  className=\"text-destructive focus:text-destructive\"\n                >\n                  <Trash2 className=\"h-4 w-4 mr-2\" />\n                  Delete\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n        </CardHeader>\n        <CardContent className=\"pt-0\">\n          <div className=\"flex items-center justify-between text-sm\">\n            <div className=\"text-muted-foreground\">\n              By {post.author}\n            </div>\n            <div className=\"text-right\">\n              <div className=\"font-medium\">{relative}</div>\n              <div className=\"text-xs text-muted-foreground\">\n                {dateStr} at {timeStr}\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  };\n\n  const FilterControls = () => (\n    <div className=\"space-y-4\">\n      <div className=\"space-y-2\">\n        <label className=\"text-sm font-medium\">Status</label>\n        <Select value={statusFilter} onValueChange={setStatusFilter}>\n          <SelectTrigger>\n            <SelectValue />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">All Status</SelectItem>\n            <SelectItem value=\"scheduled\">Scheduled</SelectItem>\n            <SelectItem value=\"published\">Published</SelectItem>\n            <SelectItem value=\"failed\">Failed</SelectItem>\n            <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n      \n      <div className=\"space-y-2\">\n        <label className=\"text-sm font-medium\">Type</label>\n        <Select value={typeFilter} onValueChange={setTypeFilter}>\n          <SelectTrigger>\n            <SelectValue />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">All Types</SelectItem>\n            <SelectItem value=\"post\">Posts</SelectItem>\n            <SelectItem value=\"page\">Pages</SelectItem>\n            <SelectItem value=\"social\">Social Media</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n    </div>\n  );\n\n  const scheduledCount = mockScheduledPosts.filter(p => p.status === \"scheduled\").length;\n  const failedCount = mockScheduledPosts.filter(p => p.status === \"failed\").length;\n\n  return (\n    <Page data-testid=\"scheduling-page\">\n      <PageHeader>\n        <div className=\"px-4 md:px-6\">\n          <PageToolbar>\n            <PageTitle badge={scheduledCount.toString()}>\n              Scheduling\n            </PageTitle>\n            <PageActions>\n              <div className=\"hidden md:flex items-center gap-2\">\n                <Button onClick={onCreateSchedule} data-testid=\"create-schedule-desktop\">\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Schedule Content\n                </Button>\n              </div>\n            </PageActions>\n          </PageToolbar>\n          \n          <div className=\"mt-4 flex flex-col gap-3 md:flex-row md:items-center md:justify-between\">\n            <div className=\"flex items-center gap-2 flex-1 max-w-md\">\n              <div className=\"relative flex-1\">\n                <Calendar className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n                <Input\n                  placeholder=\"Search scheduled content...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-9\"\n                  data-testid=\"search-scheduled\"\n                />\n              </div>\n              <FilterSheet title=\"Filter Schedule\">\n                <FilterControls />\n              </FilterSheet>\n            </div>\n\n            {/* Desktop Filters */}\n            <div className=\"hidden md:flex items-center gap-2\">\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger className=\"w-32\">\n                  <SelectValue placeholder=\"Status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Status</SelectItem>\n                  <SelectItem value=\"scheduled\">Scheduled</SelectItem>\n                  <SelectItem value=\"published\">Published</SelectItem>\n                  <SelectItem value=\"failed\">Failed</SelectItem>\n                  <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n                </SelectContent>\n              </Select>\n              \n              <Select value={typeFilter} onValueChange={setTypeFilter}>\n                <SelectTrigger className=\"w-32\">\n                  <SelectValue placeholder=\"Type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Types</SelectItem>\n                  <SelectItem value=\"post\">Posts</SelectItem>\n                  <SelectItem value=\"page\">Pages</SelectItem>\n                  <SelectItem value=\"social\">Social</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </div>\n      </PageHeader>\n\n      <PageBody className=\"px-4 md:px-6\">\n        {/* Quick Stats */}\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-6\">\n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"text-2xl font-bold text-blue-600\">{scheduledCount}</div>\n              <div className=\"text-sm text-muted-foreground\">Scheduled</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"text-2xl font-bold text-green-600\">\n                {mockScheduledPosts.filter(p => p.status === \"published\").length}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Published</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"text-2xl font-bold text-red-600\">{failedCount}</div>\n              <div className=\"text-sm text-muted-foreground\">Failed</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"text-2xl font-bold text-gray-600\">{mockScheduledPosts.length}</div>\n              <div className=\"text-sm text-muted-foreground\">Total</div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {filteredPosts.length === 0 ? (\n          searchQuery || statusFilter !== \"all\" || typeFilter !== \"all\" ? (\n            <div className=\"text-center py-12\">\n              <h3 className=\"text-lg font-semibold mb-2\">No scheduled content found</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Try adjusting your search or filter criteria.\n              </p>\n            </div>\n          ) : (\n            <EmptyStates.Schedule onCreateSchedule={onCreateSchedule} />\n          )\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {filteredPosts.map(post => (\n              <ScheduleCard key={post.id} post={post} />\n            ))}\n          </div>\n        )}\n      </PageBody>\n\n      {/* Mobile FAB */}\n      <FAB \n        onClick={onCreateSchedule}\n        aria-label=\"Schedule new content\"\n        data-testid=\"schedule-fab\"\n      >\n        Schedule\n      </FAB>\n    </Page>\n  );\n}","size_bytes":13857},"client/src/components/SettingsPage.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Save, Globe, Shield, Bell, Database, Palette, Users, Mail, CheckCircle, AlertCircle, Info, Loader2, UserCircle, Eye, EyeOff } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { \n  Page, \n  PageHeader, \n  PageTitle, \n  PageToolbar, \n  PageBody, \n  ActionBar\n} from \"@/components/ui/page\";\n\ninterface SettingsPageProps {\n  onSave?: (settings: any) => void;\n}\n\nexport default function SettingsPage({ \n  onSave = (settings) => {\n    // Safe logging - exclude sensitive fields\n    const { smtpPassword, ...safeSettings } = settings;\n    console.log(\"Save settings (sensitive fields redacted):\", safeSettings);\n  }\n}: SettingsPageProps) {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [activeTab, setActiveTab] = useState(\"profile\");\n  const [isDirty, setIsDirty] = useState(false);\n  const [isSaving, setIsSaving] = useState(false);\n  const [saveSuccess, setSaveSuccess] = useState(false);\n  const [validationErrors, setValidationErrors] = useState<Record<string, string>>({});\n  const [showCurrentPassword, setShowCurrentPassword] = useState(false);\n  const [showNewPassword, setShowNewPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [profileSettings, setProfileSettings] = useState({\n    displayName: user?.displayName || \"\",\n    email: user?.email || \"\",\n    currentPassword: \"\",\n    newPassword: \"\",\n    confirmPassword: \"\"\n  });\n  const [settings, setSettings] = useState({\n    // General\n    siteName: \"Penkora CMS\",\n    siteDescription: \"A modern content management system\",\n    siteUrl: \"https://penkora.com\",\n    timezone: \"UTC\",\n    language: \"en\",\n    \n    // SEO\n    metaTitle: \"Penkora - Content Management System\",\n    metaDescription: \"Manage your content with ease using Penkora CMS\",\n    \n    // Email\n    emailProvider: \"smtp\",\n    smtpHost: \"\",\n    smtpPort: \"587\",\n    smtpUsername: \"\",\n    smtpPassword: \"\",\n    fromEmail: \"noreply@penkora.com\",\n    fromName: \"Penkora\",\n    \n    // Security\n    enableTwoFactor: false,\n    sessionTimeout: \"24\",\n    passwordMinLength: \"8\",\n    enableLoginAttempts: true,\n    maxLoginAttempts: \"5\",\n    \n    // Notifications\n    emailNotifications: true,\n    browserNotifications: false,\n    digestEmail: true,\n    securityAlerts: true,\n    \n    // Content\n    defaultPostStatus: \"draft\",\n    enableComments: true,\n    moderateComments: true,\n    allowRegistration: false,\n    defaultUserRole: \"subscriber\"\n  });\n\n  const updateSetting = (key: string, value: any) => {\n    setSettings(prev => ({ ...prev, [key]: value }));\n    setIsDirty(true);\n    setSaveSuccess(false);\n    \n    // Clear validation error for this field\n    if (validationErrors[key]) {\n      setValidationErrors(prev => {\n        const { [key]: removed, ...rest } = prev;\n        return rest;\n      });\n    }\n  };\n\n  const updateProfileSetting = (key: string, value: any) => {\n    setProfileSettings(prev => ({ ...prev, [key]: value }));\n    setIsDirty(true);\n    setSaveSuccess(false);\n    \n    // Clear validation error for this field\n    if (validationErrors[key]) {\n      setValidationErrors(prev => {\n        const { [key]: removed, ...rest } = prev;\n        return rest;\n      });\n    }\n  };\n\n  const validateSettings = () => {\n    const errors: Record<string, string> = {};\n    \n    if (!settings.siteName.trim()) {\n      errors.siteName = \"Site name is required\";\n    }\n    \n    if (!settings.siteUrl.trim()) {\n      errors.siteUrl = \"Site URL is required\";\n    } else if (!/^https?:\\/\\/.+/.test(settings.siteUrl)) {\n      errors.siteUrl = \"Please enter a valid URL (starting with http:// or https://)\";\n    }\n    \n    if (!settings.fromEmail.trim()) {\n      errors.fromEmail = \"From email is required\";\n    } else if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(settings.fromEmail)) {\n      errors.fromEmail = \"Please enter a valid email address\";\n    }\n    \n    if (parseInt(settings.passwordMinLength) < 8) {\n      errors.passwordMinLength = \"Minimum password length should be at least 8 characters\";\n    }\n    \n    return errors;\n  };\n\n  const validateProfile = () => {\n    const errors: Record<string, string> = {};\n    \n    if (!profileSettings.displayName.trim()) {\n      errors.displayName = \"Display name is required\";\n    }\n    \n    if (!profileSettings.email.trim()) {\n      errors.email = \"Email is required\";\n    } else if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(profileSettings.email)) {\n      errors.email = \"Please enter a valid email address\";\n    }\n    \n    // Password validation only if user is trying to change password\n    if (profileSettings.newPassword || profileSettings.currentPassword || profileSettings.confirmPassword) {\n      if (!profileSettings.currentPassword) {\n        errors.currentPassword = \"Current password is required to change password\";\n      }\n      \n      if (!profileSettings.newPassword) {\n        errors.newPassword = \"New password is required\";\n      } else if (profileSettings.newPassword.length < 8) {\n        errors.newPassword = \"Password must be at least 8 characters long\";\n      }\n      \n      if (profileSettings.newPassword !== profileSettings.confirmPassword) {\n        errors.confirmPassword = \"Passwords do not match\";\n      }\n    }\n    \n    return errors;\n  };\n\n  const handleSave = async () => {\n    // Call appropriate save function based on active tab\n    if (activeTab === \"profile\") {\n      await handleProfileSave();\n    } else {\n      await handleSiteSettingsSave();\n    }\n  };\n\n  const handleSiteSettingsSave = async () => {\n    const errors = validateSettings();\n    if (Object.keys(errors).length > 0) {\n      setValidationErrors(errors);\n      return;\n    }\n    \n    setIsSaving(true);\n    try {\n      // Create a safe copy for logging (excluding sensitive fields)\n      const { smtpPassword, ...safeSettings } = settings;\n      console.log(\"Saving settings (sensitive fields redacted):\", safeSettings);\n      \n      await onSave(settings);\n      setIsDirty(false);\n      setSaveSuccess(true);\n      setValidationErrors({});\n      \n      toast({\n        title: \"Settings saved\",\n        description: \"Your site settings have been updated successfully.\",\n      });\n      \n      // Auto-hide success message after 3 seconds\n      setTimeout(() => setSaveSuccess(false), 3000);\n    } catch (error) {\n      console.error(\"Failed to save settings:\", error);\n      toast({\n        title: \"Save failed\",\n        description: \"There was an error saving your settings. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  const handleProfileSave = async () => {\n    const errors = validateProfile();\n    if (Object.keys(errors).length > 0) {\n      setValidationErrors(errors);\n      return;\n    }\n    \n    setIsSaving(true);\n    try {\n      const updateData: any = {\n        displayName: profileSettings.displayName,\n        email: profileSettings.email\n      };\n      \n      // Only include password fields if user is changing password\n      if (profileSettings.newPassword) {\n        updateData.currentPassword = profileSettings.currentPassword;\n        updateData.newPassword = profileSettings.newPassword;\n      }\n      \n      await apiRequest('PUT', '/api/auth/profile', updateData);\n      \n      // Clear password fields after successful update\n      setProfileSettings(prev => ({\n        ...prev,\n        currentPassword: \"\",\n        newPassword: \"\",\n        confirmPassword: \"\"\n      }));\n      \n      setIsDirty(false);\n      setSaveSuccess(true);\n      setValidationErrors({});\n      \n      toast({\n        title: \"Profile updated\",\n        description: \"Your profile has been updated successfully.\",\n      });\n      \n      // Auto-hide success message after 3 seconds\n      setTimeout(() => setSaveSuccess(false), 3000);\n    } catch (error) {\n      console.error(\"Failed to update profile:\", error);\n      toast({\n        title: \"Update failed\",\n        description: \"There was an error updating your profile. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  // Auto-save functionality (optional)\n  useEffect(() => {\n    if (!isDirty) return;\n    \n    const autoSaveTimer = setTimeout(() => {\n      const errors = validateSettings();\n      if (Object.keys(errors).length === 0) {\n        // Auto-save only if no validation errors\n        // handleSave(); // Uncomment to enable auto-save\n      }\n    }, 2000);\n    \n    return () => clearTimeout(autoSaveTimer);\n  }, [settings, isDirty]);\n\n  const ProfileTab = () => (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <UserCircle className=\"h-4 w-4\" />\n            User Profile\n          </CardTitle>\n          <CardDescription>\n            Update your personal information and account settings\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"displayName\" className={validationErrors.displayName ? \"text-destructive\" : \"\"}>\n                Display Name\n                <span className=\"text-destructive ml-1\">*</span>\n              </Label>\n              <Input\n                id=\"displayName\"\n                value={profileSettings.displayName}\n                onChange={(e) => updateProfileSetting(\"displayName\", e.target.value)}\n                placeholder=\"Your display name\"\n                className={validationErrors.displayName ? \"border-destructive focus:border-destructive\" : \"\"}\n                data-testid=\"input-display-name\"\n              />\n              {validationErrors.displayName && (\n                <p className=\"text-sm text-destructive flex items-center gap-1\">\n                  <AlertCircle className=\"h-3 w-3\" />\n                  {validationErrors.displayName}\n                </p>\n              )}\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\" className={validationErrors.email ? \"text-destructive\" : \"\"}>\n                Email Address\n                <span className=\"text-destructive ml-1\">*</span>\n              </Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                value={profileSettings.email}\n                onChange={(e) => updateProfileSetting(\"email\", e.target.value)}\n                placeholder=\"your.email@example.com\"\n                className={validationErrors.email ? \"border-destructive focus:border-destructive\" : \"\"}\n                data-testid=\"input-email\"\n              />\n              {validationErrors.email && (\n                <p className=\"text-sm text-destructive flex items-center gap-1\">\n                  <AlertCircle className=\"h-3 w-3\" />\n                  {validationErrors.email}\n                </p>\n              )}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n      \n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Shield className=\"h-4 w-4\" />\n            Change Password\n          </CardTitle>\n          <CardDescription>\n            Update your password to keep your account secure\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"currentPassword\" className={validationErrors.currentPassword ? \"text-destructive\" : \"\"}>\n              Current Password\n            </Label>\n            <div className=\"relative\">\n              <Input\n                id=\"currentPassword\"\n                type={showCurrentPassword ? \"text\" : \"password\"}\n                value={profileSettings.currentPassword}\n                onChange={(e) => updateProfileSetting(\"currentPassword\", e.target.value)}\n                placeholder=\"Enter current password\"\n                className={validationErrors.currentPassword ? \"border-destructive focus:border-destructive pr-10\" : \"pr-10\"}\n                data-testid=\"input-current-password\"\n              />\n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                onClick={() => setShowCurrentPassword(!showCurrentPassword)}\n                data-testid=\"button-toggle-current-password\"\n              >\n                {showCurrentPassword ? (\n                  <EyeOff className=\"h-4 w-4\" />\n                ) : (\n                  <Eye className=\"h-4 w-4\" />\n                )}\n              </Button>\n            </div>\n            {validationErrors.currentPassword && (\n              <p className=\"text-sm text-destructive flex items-center gap-1\">\n                <AlertCircle className=\"h-3 w-3\" />\n                {validationErrors.currentPassword}\n              </p>\n            )}\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"newPassword\" className={validationErrors.newPassword ? \"text-destructive\" : \"\"}>\n                New Password\n              </Label>\n              <div className=\"relative\">\n                <Input\n                  id=\"newPassword\"\n                  type={showNewPassword ? \"text\" : \"password\"}\n                  value={profileSettings.newPassword}\n                  onChange={(e) => updateProfileSetting(\"newPassword\", e.target.value)}\n                  placeholder=\"Enter new password\"\n                  className={validationErrors.newPassword ? \"border-destructive focus:border-destructive pr-10\" : \"pr-10\"}\n                  data-testid=\"input-new-password\"\n                />\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                  onClick={() => setShowNewPassword(!showNewPassword)}\n                  data-testid=\"button-toggle-new-password\"\n                >\n                  {showNewPassword ? (\n                    <EyeOff className=\"h-4 w-4\" />\n                  ) : (\n                    <Eye className=\"h-4 w-4\" />\n                  )}\n                </Button>\n              </div>\n              {validationErrors.newPassword && (\n                <p className=\"text-sm text-destructive flex items-center gap-1\">\n                  <AlertCircle className=\"h-3 w-3\" />\n                  {validationErrors.newPassword}\n                </p>\n              )}\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"confirmPassword\" className={validationErrors.confirmPassword ? \"text-destructive\" : \"\"}>\n                Confirm New Password\n              </Label>\n              <div className=\"relative\">\n                <Input\n                  id=\"confirmPassword\"\n                  type={showConfirmPassword ? \"text\" : \"password\"}\n                  value={profileSettings.confirmPassword}\n                  onChange={(e) => updateProfileSetting(\"confirmPassword\", e.target.value)}\n                  placeholder=\"Confirm new password\"\n                  className={validationErrors.confirmPassword ? \"border-destructive focus:border-destructive pr-10\" : \"pr-10\"}\n                  data-testid=\"input-confirm-password\"\n                />\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                  onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                  data-testid=\"button-toggle-confirm-password\"\n                >\n                  {showConfirmPassword ? (\n                    <EyeOff className=\"h-4 w-4\" />\n                  ) : (\n                    <Eye className=\"h-4 w-4\" />\n                  )}\n                </Button>\n              </div>\n              {validationErrors.confirmPassword && (\n                <p className=\"text-sm text-destructive flex items-center gap-1\">\n                  <AlertCircle className=\"h-3 w-3\" />\n                  {validationErrors.confirmPassword}\n                </p>\n              )}\n            </div>\n          </div>\n          \n          <Alert>\n            <Info className=\"h-4 w-4\" />\n            <AlertDescription>\n              Leave password fields empty if you don't want to change your password.\n            </AlertDescription>\n          </Alert>\n        </CardContent>\n      </Card>\n    </div>\n  );\n\n  const GeneralTab = () => (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Globe className=\"h-4 w-4\" />\n            Site Information\n          </CardTitle>\n          <CardDescription>\n            Configure your site's basic information and regional settings\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"siteName\" className={validationErrors.siteName ? \"text-destructive\" : \"\"}>\n              Site Name\n              <span className=\"text-destructive ml-1\">*</span>\n            </Label>\n            <Input\n              id=\"siteName\"\n              value={settings.siteName}\n              onChange={(e) => updateSetting(\"siteName\", e.target.value)}\n              data-testid=\"site-name\"\n              className={validationErrors.siteName ? \"border-destructive focus:border-destructive\" : \"\"}\n              placeholder=\"Enter your site name\"\n            />\n            {validationErrors.siteName && (\n              <p className=\"text-sm text-destructive flex items-center gap-1\">\n                <AlertCircle className=\"h-3 w-3\" />\n                {validationErrors.siteName}\n              </p>\n            )}\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Label htmlFor=\"siteDescription\">Site Description</Label>\n            <Textarea\n              id=\"siteDescription\"\n              value={settings.siteDescription}\n              onChange={(e) => updateSetting(\"siteDescription\", e.target.value)}\n              className=\"h-20\"\n              data-testid=\"site-description\"\n            />\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Label htmlFor=\"siteUrl\" className={validationErrors.siteUrl ? \"text-destructive\" : \"\"}>\n              Site URL\n              <span className=\"text-destructive ml-1\">*</span>\n            </Label>\n            <Input\n              id=\"siteUrl\"\n              type=\"url\"\n              value={settings.siteUrl}\n              onChange={(e) => updateSetting(\"siteUrl\", e.target.value)}\n              data-testid=\"site-url\"\n              className={validationErrors.siteUrl ? \"border-destructive focus:border-destructive\" : \"\"}\n              placeholder=\"https://yoursite.com\"\n            />\n            {validationErrors.siteUrl && (\n              <p className=\"text-sm text-destructive flex items-center gap-1\">\n                <AlertCircle className=\"h-3 w-3\" />\n                {validationErrors.siteUrl}\n              </p>\n            )}\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"timezone\">Timezone</Label>\n              <Select value={settings.timezone} onValueChange={(value) => updateSetting(\"timezone\", value)}>\n                <SelectTrigger data-testid=\"timezone\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"UTC\">UTC</SelectItem>\n                  <SelectItem value=\"America/New_York\">Eastern Time</SelectItem>\n                  <SelectItem value=\"America/Chicago\">Central Time</SelectItem>\n                  <SelectItem value=\"America/Los_Angeles\">Pacific Time</SelectItem>\n                  <SelectItem value=\"Europe/London\">London</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"language\">Language</Label>\n              <Select value={settings.language} onValueChange={(value) => updateSetting(\"language\", value)}>\n                <SelectTrigger data-testid=\"language\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"en\">English</SelectItem>\n                  <SelectItem value=\"es\">Spanish</SelectItem>\n                  <SelectItem value=\"fr\">French</SelectItem>\n                  <SelectItem value=\"de\">German</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n\n  const SecurityTab = () => (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Shield className=\"h-4 w-4\" />\n            Authentication & Security\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"space-y-0.5\">\n              <Label>Two-Factor Authentication</Label>\n              <p className=\"text-sm text-muted-foreground\">\n                Require additional verification for logins\n              </p>\n            </div>\n            <Switch\n              checked={settings.enableTwoFactor}\n              onCheckedChange={(checked) => updateSetting(\"enableTwoFactor\", checked)}\n              data-testid=\"two-factor-toggle\"\n            />\n          </div>\n          \n          <Separator />\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"sessionTimeout\">Session Timeout (hours)</Label>\n              <Input\n                id=\"sessionTimeout\"\n                type=\"number\"\n                value={settings.sessionTimeout}\n                onChange={(e) => updateSetting(\"sessionTimeout\", e.target.value)}\n                data-testid=\"session-timeout\"\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"passwordMinLength\" className={validationErrors.passwordMinLength ? \"text-destructive\" : \"\"}>\n                Minimum Password Length\n              </Label>\n              <Input\n                id=\"passwordMinLength\"\n                type=\"number\"\n                min=\"8\"\n                max=\"64\"\n                value={settings.passwordMinLength}\n                onChange={(e) => updateSetting(\"passwordMinLength\", e.target.value)}\n                data-testid=\"password-min-length\"\n                className={validationErrors.passwordMinLength ? \"border-destructive focus:border-destructive\" : \"\"}\n              />\n              {validationErrors.passwordMinLength && (\n                <p className=\"text-sm text-destructive flex items-center gap-1\">\n                  <AlertCircle className=\"h-3 w-3\" />\n                  {validationErrors.passwordMinLength}\n                </p>\n              )}\n            </div>\n          </div>\n          \n          <div className=\"flex items-center justify-between\">\n            <div className=\"space-y-0.5\">\n              <Label>Login Attempt Limiting</Label>\n              <p className=\"text-sm text-muted-foreground\">\n                Block users after failed login attempts\n              </p>\n            </div>\n            <Switch\n              checked={settings.enableLoginAttempts}\n              onCheckedChange={(checked) => updateSetting(\"enableLoginAttempts\", checked)}\n              data-testid=\"login-attempts-toggle\"\n            />\n          </div>\n          \n          {settings.enableLoginAttempts && (\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"maxLoginAttempts\">Max Login Attempts</Label>\n              <Input\n                id=\"maxLoginAttempts\"\n                type=\"number\"\n                value={settings.maxLoginAttempts}\n                onChange={(e) => updateSetting(\"maxLoginAttempts\", e.target.value)}\n                className=\"max-w-32\"\n                data-testid=\"max-login-attempts\"\n              />\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n\n  const NotificationsTab = () => (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Bell className=\"h-4 w-4\" />\n            Notification Preferences\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"space-y-0.5\">\n              <Label>Email Notifications</Label>\n              <p className=\"text-sm text-muted-foreground\">\n                Receive notifications via email\n              </p>\n            </div>\n            <Switch\n              checked={settings.emailNotifications}\n              onCheckedChange={(checked) => updateSetting(\"emailNotifications\", checked)}\n              data-testid=\"email-notifications-toggle\"\n            />\n          </div>\n          \n          <div className=\"flex items-center justify-between\">\n            <div className=\"space-y-0.5\">\n              <Label>Browser Notifications</Label>\n              <p className=\"text-sm text-muted-foreground\">\n                Show notifications in your browser\n              </p>\n            </div>\n            <Switch\n              checked={settings.browserNotifications}\n              onCheckedChange={(checked) => updateSetting(\"browserNotifications\", checked)}\n              data-testid=\"browser-notifications-toggle\"\n            />\n          </div>\n          \n          <div className=\"flex items-center justify-between\">\n            <div className=\"space-y-0.5\">\n              <Label>Weekly Digest</Label>\n              <p className=\"text-sm text-muted-foreground\">\n                Receive weekly summary emails\n              </p>\n            </div>\n            <Switch\n              checked={settings.digestEmail}\n              onCheckedChange={(checked) => updateSetting(\"digestEmail\", checked)}\n              data-testid=\"digest-email-toggle\"\n            />\n          </div>\n          \n          <div className=\"flex items-center justify-between\">\n            <div className=\"space-y-0.5\">\n              <Label>Security Alerts</Label>\n              <p className=\"text-sm text-muted-foreground\">\n                Get notified about security events\n              </p>\n            </div>\n            <Switch\n              checked={settings.securityAlerts}\n              onCheckedChange={(checked) => updateSetting(\"securityAlerts\", checked)}\n              data-testid=\"security-alerts-toggle\"\n            />\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n\n  const EmailTab = () => (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Mail className=\"h-4 w-4\" />\n            Email Configuration\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"emailProvider\">Email Provider</Label>\n            <Select value={settings.emailProvider} onValueChange={(value) => updateSetting(\"emailProvider\", value)}>\n              <SelectTrigger data-testid=\"email-provider\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"smtp\">SMTP</SelectItem>\n                <SelectItem value=\"sendgrid\">SendGrid</SelectItem>\n                <SelectItem value=\"mailgun\">Mailgun</SelectItem>\n                <SelectItem value=\"ses\">AWS SES</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n          \n          {settings.emailProvider === \"smtp\" && (\n            <>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"smtpHost\">SMTP Host</Label>\n                  <Input\n                    id=\"smtpHost\"\n                    value={settings.smtpHost}\n                    onChange={(e) => updateSetting(\"smtpHost\", e.target.value)}\n                    placeholder=\"smtp.gmail.com\"\n                    data-testid=\"smtp-host\"\n                  />\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"smtpPort\">SMTP Port</Label>\n                  <Input\n                    id=\"smtpPort\"\n                    value={settings.smtpPort}\n                    onChange={(e) => updateSetting(\"smtpPort\", e.target.value)}\n                    placeholder=\"587\"\n                    data-testid=\"smtp-port\"\n                  />\n                </div>\n              </div>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"smtpUsername\">SMTP Username</Label>\n                  <Input\n                    id=\"smtpUsername\"\n                    value={settings.smtpUsername}\n                    onChange={(e) => updateSetting(\"smtpUsername\", e.target.value)}\n                    data-testid=\"smtp-username\"\n                  />\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"smtpPassword\">SMTP Password</Label>\n                  <Input\n                    id=\"smtpPassword\"\n                    type=\"password\"\n                    value={settings.smtpPassword}\n                    onChange={(e) => updateSetting(\"smtpPassword\", e.target.value)}\n                    data-testid=\"smtp-password\"\n                  />\n                </div>\n              </div>\n            </>\n          )}\n          \n          <Separator />\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"fromEmail\" className={validationErrors.fromEmail ? \"text-destructive\" : \"\"}>\n                From Email\n                <span className=\"text-destructive ml-1\">*</span>\n              </Label>\n              <Input\n                id=\"fromEmail\"\n                type=\"email\"\n                value={settings.fromEmail}\n                onChange={(e) => updateSetting(\"fromEmail\", e.target.value)}\n                data-testid=\"from-email\"\n                className={validationErrors.fromEmail ? \"border-destructive focus:border-destructive\" : \"\"}\n                placeholder=\"noreply@yoursite.com\"\n              />\n              {validationErrors.fromEmail && (\n                <p className=\"text-sm text-destructive flex items-center gap-1\">\n                  <AlertCircle className=\"h-3 w-3\" />\n                  {validationErrors.fromEmail}\n                </p>\n              )}\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"fromName\">From Name</Label>\n              <Input\n                id=\"fromName\"\n                value={settings.fromName}\n                onChange={(e) => updateSetting(\"fromName\", e.target.value)}\n                data-testid=\"from-name\"\n              />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n\n  return (\n    <Page data-testid=\"settings-page\">\n      <PageHeader>\n        <div className=\"px-4 md:px-6\">\n          <PageToolbar>\n            <PageTitle>\n              Settings\n            </PageTitle>\n            <div className=\"hidden md:flex items-center gap-2\">\n              {saveSuccess && (\n                <div className=\"flex items-center gap-2 text-green-600 text-sm\">\n                  <CheckCircle className=\"h-4 w-4\" />\n                  Settings saved successfully\n                </div>\n              )}\n              {isDirty && (\n                <Button \n                  onClick={handleSave} \n                  data-testid=\"save-settings-desktop\"\n                  disabled={isSaving}\n                >\n                  {isSaving ? (\n                    <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                  ) : (\n                    <Save className=\"h-4 w-4 mr-2\" />\n                  )}\n                  {isSaving ? \"Saving...\" : \"Save Changes\"}\n                </Button>\n              )}\n            </div>\n          </PageToolbar>\n        </div>\n      </PageHeader>\n\n      <PageBody className=\"px-4 md:px-6\">\n        {/* Mobile Tabs */}\n        <div className=\"md:hidden\">\n          <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n            <TabsList className=\"grid w-full grid-cols-2\">\n              <TabsTrigger value=\"profile\">Profile</TabsTrigger>\n              <TabsTrigger value=\"general\">General</TabsTrigger>\n            </TabsList>\n            <TabsList className=\"grid w-full grid-cols-2\">\n              <TabsTrigger value=\"security\">Security</TabsTrigger>\n              <TabsTrigger value=\"notifications\">Notifications</TabsTrigger>\n            </TabsList>\n            <TabsList className=\"grid w-full grid-cols-1\">\n              <TabsTrigger value=\"email\">Email</TabsTrigger>\n            </TabsList>\n            \n            <TabsContent value=\"profile\">\n              <ProfileTab />\n            </TabsContent>\n            \n            <TabsContent value=\"general\">\n              <GeneralTab />\n            </TabsContent>\n            \n            <TabsContent value=\"security\">\n              <SecurityTab />\n            </TabsContent>\n            \n            <TabsContent value=\"notifications\">\n              <NotificationsTab />\n            </TabsContent>\n            \n            <TabsContent value=\"email\">\n              <EmailTab />\n            </TabsContent>\n          </Tabs>\n        </div>\n\n        {/* Desktop Layout */}\n        <div className=\"hidden md:block\">\n          <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n            <TabsList className=\"w-full max-w-md\">\n              <TabsTrigger value=\"profile\" className=\"flex items-center gap-2\">\n                <UserCircle className=\"h-4 w-4\" />\n                Profile\n              </TabsTrigger>\n              <TabsTrigger value=\"general\" className=\"flex items-center gap-2\">\n                <Globe className=\"h-4 w-4\" />\n                General\n              </TabsTrigger>\n              <TabsTrigger value=\"security\" className=\"flex items-center gap-2\">\n                <Shield className=\"h-4 w-4\" />\n                Security\n              </TabsTrigger>\n              <TabsTrigger value=\"notifications\" className=\"flex items-center gap-2\">\n                <Bell className=\"h-4 w-4\" />\n                Notifications\n              </TabsTrigger>\n              <TabsTrigger value=\"email\" className=\"flex items-center gap-2\">\n                <Mail className=\"h-4 w-4\" />\n                Email\n              </TabsTrigger>\n            </TabsList>\n            \n            <TabsContent value=\"profile\">\n              <ProfileTab />\n            </TabsContent>\n            \n            <TabsContent value=\"general\">\n              <GeneralTab />\n            </TabsContent>\n            \n            <TabsContent value=\"security\">\n              <SecurityTab />\n            </TabsContent>\n            \n            <TabsContent value=\"notifications\">\n              <NotificationsTab />\n            </TabsContent>\n            \n            <TabsContent value=\"email\">\n              <EmailTab />\n            </TabsContent>\n          </Tabs>\n        </div>\n      </PageBody>\n\n      {/* Mobile Action Bar - Enhanced */}\n      <ActionBar show={isDirty || saveSuccess}>\n        {saveSuccess ? (\n          <div className=\"flex items-center gap-2 text-green-600\">\n            <CheckCircle className=\"h-4 w-4\" />\n            <span className=\"text-sm\">Settings saved successfully</span>\n          </div>\n        ) : (\n          <>\n            <span className=\"text-sm flex items-center gap-2\">\n              <div className=\"w-2 h-2 bg-orange-500 rounded-full animate-pulse\" />\n              Unsaved changes\n            </span>\n            <Button \n              onClick={handleSave} \n              size=\"sm\" \n              data-testid=\"save-settings-mobile\"\n              disabled={isSaving}\n            >\n              {isSaving ? (\n                <Loader2 className=\"h-4 w-4 mr-1 animate-spin\" />\n              ) : (\n                <Save className=\"h-4 w-4 mr-1\" />\n              )}\n              {isSaving ? \"Saving...\" : \"Save\"}\n            </Button>\n          </>\n        )}\n      </ActionBar>\n    </Page>\n  );\n}","size_bytes":37852},"client/src/components/TrashPage.tsx":{"content":"import { useState } from \"react\";\nimport { Search, RotateCcw, Trash2, MoreHorizontal, Filter, FileText, Image, Users, Calendar } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { \n  Page, \n  PageHeader, \n  PageTitle, \n  PageToolbar, \n  PageBody, \n  ActionBar,\n  FilterSheet\n} from \"@/components/ui/page\";\nimport { EmptyStates } from \"@/components/ui/empty-state\";\n\ninterface TrashedItem {\n  id: string;\n  name: string;\n  type: \"post\" | \"page\" | \"media\" | \"user\" | \"category\";\n  deletedDate: string;\n  deletedBy: string;\n  originalLocation?: string;\n  size?: number;\n}\n\ninterface TrashPageProps {\n  onRestore?: (ids: string[]) => void;\n  onPermanentDelete?: (ids: string[]) => void;\n  onEmptyTrash?: () => void;\n}\n\n// Mock data\nconst mockTrashedItems: TrashedItem[] = [\n  {\n    id: \"1\",\n    name: \"Old Blog Post About React\",\n    type: \"post\",\n    deletedDate: \"2024-03-15\",\n    deletedBy: \"John Doe\",\n    originalLocation: \"/posts\"\n  },\n  {\n    id: \"2\",\n    name: \"unused-banner.jpg\",\n    type: \"media\",\n    deletedDate: \"2024-03-14\",\n    deletedBy: \"Jane Smith\",\n    originalLocation: \"/media/images\",\n    size: 245760\n  },\n  {\n    id: \"3\",\n    name: \"Privacy Policy Draft\",\n    type: \"page\",\n    deletedDate: \"2024-03-13\",\n    deletedBy: \"Admin\",\n    originalLocation: \"/pages\"\n  },\n  {\n    id: \"4\",\n    name: \"Legacy Category\",\n    type: \"category\",\n    deletedDate: \"2024-03-12\",\n    deletedBy: \"Editor\",\n    originalLocation: \"/categories\"\n  },\n  {\n    id: \"5\",\n    name: \"Former Employee\",\n    type: \"user\",\n    deletedDate: \"2024-03-10\",\n    deletedBy: \"HR Manager\",\n    originalLocation: \"/users\"\n  }\n];\n\nexport default function TrashPage({ \n  onRestore = (ids) => console.log(\"Restore items:\", ids),\n  onPermanentDelete = (ids) => console.log(\"Permanently delete:\", ids),\n  onEmptyTrash = () => console.log(\"Empty trash\")\n}: TrashPageProps) {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [typeFilter, setTypeFilter] = useState<string>(\"all\");\n  const [selectedItems, setSelectedItems] = useState<string[]>([]);\n\n  const filteredItems = mockTrashedItems.filter(item => {\n    const matchesSearch = item.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         item.deletedBy.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesType = typeFilter === \"all\" || item.type === typeFilter;\n    return matchesSearch && matchesType;\n  });\n\n  const handleSelectItem = (itemId: string, checked: boolean) => {\n    if (checked) {\n      setSelectedItems([...selectedItems, itemId]);\n    } else {\n      setSelectedItems(selectedItems.filter(id => id !== itemId));\n    }\n  };\n\n  const handleSelectAll = (checked: boolean) => {\n    if (checked) {\n      setSelectedItems(filteredItems.map(item => item.id));\n    } else {\n      setSelectedItems([]);\n    }\n  };\n\n  const formatFileSize = (bytes?: number) => {\n    if (!bytes) return \"\";\n    const units = ['B', 'KB', 'MB', 'GB'];\n    let size = bytes;\n    let unitIndex = 0;\n    \n    while (size >= 1024 && unitIndex < units.length - 1) {\n      size /= 1024;\n      unitIndex++;\n    }\n    \n    return ` • ${size.toFixed(1)} ${units[unitIndex]}`;\n  };\n\n  const getTypeIcon = (type: TrashedItem[\"type\"]) => {\n    const icons = {\n      post: FileText,\n      page: FileText,\n      media: Image,\n      user: Users,\n      category: Calendar\n    };\n    return icons[type] || FileText;\n  };\n\n  const getTypeBadge = (type: TrashedItem[\"type\"]) => {\n    const colors = {\n      post: \"bg-blue-100 text-blue-800\",\n      page: \"bg-green-100 text-green-800\",\n      media: \"bg-purple-100 text-purple-800\",\n      user: \"bg-orange-100 text-orange-800\",\n      category: \"bg-pink-100 text-pink-800\"\n    };\n    \n    return (\n      <Badge variant=\"outline\" className={`capitalize ${colors[type]}`}>\n        {type}\n      </Badge>\n    );\n  };\n\n  const getDaysAgo = (dateString: string) => {\n    const deletedDate = new Date(dateString);\n    const now = new Date();\n    const diffTime = Math.abs(now.getTime() - deletedDate.getTime());\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    \n    if (diffDays === 1) return \"1 day ago\";\n    return `${diffDays} days ago`;\n  };\n\n  const TrashCard = ({ item }: { item: TrashedItem }) => {\n    const Icon = getTypeIcon(item.type);\n    \n    return (\n      <Card className=\"hover-elevate\" data-testid={`trash-item-${item.id}`}>\n        <CardHeader className=\"pb-2\">\n          <div className=\"flex items-start justify-between\">\n            <div className=\"flex items-center gap-3 min-w-0 flex-1\">\n              <Checkbox\n                checked={selectedItems.includes(item.id)}\n                onCheckedChange={(checked) => handleSelectItem(item.id, !!checked)}\n                data-testid={`item-checkbox-${item.id}`}\n              />\n              <Icon className=\"h-4 w-4 text-muted-foreground shrink-0\" />\n              <div className=\"min-w-0 flex-1\">\n                <CardTitle className=\"text-sm line-clamp-1\">{item.name}</CardTitle>\n              </div>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              {getTypeBadge(item.type)}\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button variant=\"ghost\" size=\"icon\" className=\"shrink-0\" data-testid={`trash-menu-${item.id}`}>\n                    <MoreHorizontal className=\"h-4 w-4\" />\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"end\">\n                  <DropdownMenuItem onClick={() => onRestore([item.id])}>\n                    <RotateCcw className=\"h-4 w-4 mr-2\" />\n                    Restore\n                  </DropdownMenuItem>\n                  <DropdownMenuItem \n                    onClick={() => onPermanentDelete([item.id])}\n                    className=\"text-destructive focus:text-destructive\"\n                  >\n                    <Trash2 className=\"h-4 w-4 mr-2\" />\n                    Delete Forever\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent className=\"pt-0\">\n          <div className=\"space-y-2 text-sm text-muted-foreground\">\n            <p>Deleted by {item.deletedBy}</p>\n            <p>{getDaysAgo(item.deletedDate)}{formatFileSize(item.size)}</p>\n            {item.originalLocation && (\n              <p className=\"text-xs\">From: {item.originalLocation}</p>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  };\n\n  const FilterControls = () => (\n    <div className=\"space-y-4\">\n      <div className=\"space-y-2\">\n        <label className=\"text-sm font-medium\">Item Type</label>\n        <Select value={typeFilter} onValueChange={setTypeFilter}>\n          <SelectTrigger>\n            <SelectValue />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">All Types</SelectItem>\n            <SelectItem value=\"post\">Posts</SelectItem>\n            <SelectItem value=\"page\">Pages</SelectItem>\n            <SelectItem value=\"media\">Media</SelectItem>\n            <SelectItem value=\"user\">Users</SelectItem>\n            <SelectItem value=\"category\">Categories</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n    </div>\n  );\n\n  return (\n    <Page data-testid=\"trash-page\">\n      <PageHeader>\n        <div className=\"px-4 md:px-6\">\n          <PageToolbar>\n            <PageTitle>\n              Trash & Archived\n            </PageTitle>\n            <div className=\"hidden md:flex items-center gap-2\">\n              {mockTrashedItems.length > 0 && (\n                <Button \n                  variant=\"destructive\" \n                  onClick={onEmptyTrash}\n                  data-testid=\"empty-trash-desktop\"\n                >\n                  <Trash2 className=\"h-4 w-4 mr-2\" />\n                  Empty Trash\n                </Button>\n              )}\n            </div>\n          </PageToolbar>\n          \n          <div className=\"mt-4 flex flex-col gap-3 md:flex-row md:items-center md:justify-between\">\n            <div className=\"flex items-center gap-2 flex-1 max-w-md\">\n              <div className=\"relative flex-1\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n                <Input\n                  placeholder=\"Search deleted items...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-9\"\n                  data-testid=\"search-trash\"\n                />\n              </div>\n              <FilterSheet title=\"Filter Items\">\n                <FilterControls />\n              </FilterSheet>\n            </div>\n\n            {/* Desktop Filters */}\n            <div className=\"hidden md:flex items-center gap-2\">\n              <Select value={typeFilter} onValueChange={setTypeFilter}>\n                <SelectTrigger className=\"w-32\">\n                  <SelectValue placeholder=\"Type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Types</SelectItem>\n                  <SelectItem value=\"post\">Posts</SelectItem>\n                  <SelectItem value=\"page\">Pages</SelectItem>\n                  <SelectItem value=\"media\">Media</SelectItem>\n                  <SelectItem value=\"user\">Users</SelectItem>\n                  <SelectItem value=\"category\">Categories</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </div>\n      </PageHeader>\n\n      <PageBody className=\"px-4 md:px-6\">\n        {filteredItems.length === 0 ? (\n          searchQuery || typeFilter !== \"all\" ? (\n            <div className=\"text-center py-12\">\n              <h3 className=\"text-lg font-semibold mb-2\">No items found</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Try adjusting your search or filter criteria.\n              </p>\n            </div>\n          ) : (\n            <EmptyStates.Trash />\n          )\n        ) : (\n          <>\n            {/* Bulk Actions Bar */}\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"flex items-center gap-2\">\n                <Checkbox\n                  checked={selectedItems.length === filteredItems.length && filteredItems.length > 0}\n                  onCheckedChange={handleSelectAll}\n                  data-testid=\"select-all-items\"\n                />\n                <span className=\"text-sm text-muted-foreground\">\n                  {selectedItems.length > 0 \n                    ? `${selectedItems.length} of ${filteredItems.length} selected`\n                    : `${filteredItems.length} items in trash`\n                  }\n                </span>\n              </div>\n              \n              {selectedItems.length > 0 && (\n                <div className=\"hidden md:flex items-center gap-2\">\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\" \n                    onClick={() => onRestore(selectedItems)}\n                    data-testid=\"restore-selected\"\n                  >\n                    <RotateCcw className=\"h-4 w-4 mr-2\" />\n                    Restore Selected\n                  </Button>\n                  <Button \n                    variant=\"destructive\" \n                    size=\"sm\" \n                    onClick={() => onPermanentDelete(selectedItems)}\n                    data-testid=\"delete-selected\"\n                  >\n                    <Trash2 className=\"h-4 w-4 mr-2\" />\n                    Delete Forever\n                  </Button>\n                </div>\n              )}\n            </div>\n\n            {/* Items Grid */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {filteredItems.map(item => (\n                <TrashCard key={item.id} item={item} />\n              ))}\n            </div>\n          </>\n        )}\n      </PageBody>\n\n      {/* Mobile Action Bar for bulk actions */}\n      <ActionBar show={selectedItems.length > 0}>\n        <span className=\"text-sm font-medium\">\n          {selectedItems.length} selected\n        </span>\n        <div className=\"flex gap-2\">\n          <Button variant=\"outline\" size=\"sm\" onClick={() => onRestore(selectedItems)}>\n            <RotateCcw className=\"h-4 w-4 mr-1\" />\n            Restore\n          </Button>\n          <Button variant=\"destructive\" size=\"sm\" onClick={() => onPermanentDelete(selectedItems)}>\n            <Trash2 className=\"h-4 w-4 mr-1\" />\n            Delete\n          </Button>\n        </div>\n      </ActionBar>\n    </Page>\n  );\n}","size_bytes":13189},"client/src/components/UploadPage.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Upload, X, FileIcon, Image, Video, FileText, Check, AlertCircle, ArrowLeft } from \"lucide-react\";\nimport { useUploadFiles } from \"@/hooks/useMedia\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { \n  Page, \n  PageHeader, \n  PageTitle, \n  PageToolbar, \n  PageBody\n} from \"@/components/ui/page\";\n\ninterface UploadFile {\n  id: string;\n  file: File;\n  progress: number;\n  status: \"pending\" | \"uploading\" | \"completed\" | \"error\";\n  error?: string;\n}\n\ninterface UploadPageProps {\n  onUploadComplete?: () => void;\n}\n\nexport default function UploadPage({ \n  onUploadComplete\n}: UploadPageProps) {\n  const [uploadFiles, setUploadFiles] = useState<UploadFile[]>([]);\n  const [destination, setDestination] = useState(\"media-library\");\n  const [isDragOver, setIsDragOver] = useState(false);\n  const [isUploading, setIsUploading] = useState(false);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  \n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const uploadMutation = useUploadFiles();\n\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragOver(true);\n  };\n\n  const handleDragLeave = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragOver(false);\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragOver(false);\n    const files = Array.from(e.dataTransfer.files);\n    addFiles(files);\n  };\n\n  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(e.target.files || []);\n    addFiles(files);\n  };\n\n  const addFiles = (files: File[]) => {\n    const newUploadFiles = files.map(file => ({\n      id: Math.random().toString(36).substr(2, 9),\n      file,\n      progress: 0,\n      status: \"pending\" as const\n    }));\n    \n    setUploadFiles(prev => [...prev, ...newUploadFiles]);\n  };\n\n  const startUpload = async () => {\n    const pendingFiles = uploadFiles.filter(f => f.status === \"pending\" || f.status === \"error\");\n    \n    if (pendingFiles.length === 0) return;\n\n    setIsUploading(true);\n\n    try {\n      // Mark files as uploading\n      setUploadFiles(prev => prev.map(f => \n        pendingFiles.includes(f) ? { ...f, status: \"uploading\", progress: 0 } : f\n      ));\n\n      // Upload files using the real API\n      await uploadMutation.mutateAsync({\n        files: pendingFiles.map(f => f.file),\n        alt: \"Uploaded file\",\n        caption: \"\"\n      });\n\n      // Mark files as completed\n      setUploadFiles(prev => prev.map(f => \n        pendingFiles.includes(f) ? { ...f, status: \"completed\", progress: 100 } : f\n      ));\n\n      toast({\n        title: \"Upload successful\",\n        description: `${pendingFiles.length} file(s) uploaded successfully.`,\n      });\n\n      // Invalidate media cache to refresh MediaLibrary\n      queryClient.invalidateQueries({ queryKey: ['/api/media'] });\n\n      onUploadComplete?.();\n\n      // Navigate back to media library after 2 seconds\n      setTimeout(() => {\n        setLocation(\"/media\");\n      }, 2000);\n\n    } catch (error: any) {\n      // Mark files as error\n      setUploadFiles(prev => prev.map(f => \n        pendingFiles.includes(f) ? { \n          ...f, \n          status: \"error\", \n          error: error.message || \"Failed to upload file\"\n        } : f\n      ));\n\n      toast({\n        title: \"Upload failed\",\n        description: error.message || \"Failed to upload files. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsUploading(false);\n    }\n  };\n\n  const removeFile = (fileId: string) => {\n    setUploadFiles(prev => prev.filter(f => f.id !== fileId));\n  };\n\n  const retryUpload = (fileId: string) => {\n    setUploadFiles(prev => prev.map(f => \n      f.id === fileId ? { ...f, status: \"pending\", progress: 0, error: undefined } : f\n    ));\n  };\n\n  const formatFileSize = (bytes: number) => {\n    const units = ['B', 'KB', 'MB', 'GB'];\n    let size = bytes;\n    let unitIndex = 0;\n    \n    while (size >= 1024 && unitIndex < units.length - 1) {\n      size /= 1024;\n      unitIndex++;\n    }\n    \n    return `${size.toFixed(1)} ${units[unitIndex]}`;\n  };\n\n  const getFileIcon = (type: string) => {\n    if (type.startsWith('image/')) return Image;\n    if (type.startsWith('video/')) return Video;\n    if (type.startsWith('audio/')) return Video;\n    return FileText;\n  };\n\n  const getStatusIcon = (status: UploadFile[\"status\"]) => {\n    switch (status) {\n      case \"completed\":\n        return <Check className=\"h-4 w-4 text-green-500\" />;\n      case \"error\":\n        return <AlertCircle className=\"h-4 w-4 text-destructive\" />;\n      default:\n        return null;\n    }\n  };\n\n  const completedCount = uploadFiles.filter(f => f.status === \"completed\").length;\n  const errorCount = uploadFiles.filter(f => f.status === \"error\").length;\n  const uploadingCount = uploadFiles.filter(f => f.status === \"uploading\").length;\n  const pendingCount = uploadFiles.filter(f => f.status === \"pending\").length;\n\n  return (\n    <Page data-testid=\"upload-page\">\n      <PageHeader>\n        <div className=\"px-4 md:px-6\">\n          <PageToolbar>\n            <div className=\"flex items-center gap-3\">\n              <Button \n                variant=\"ghost\" \n                size=\"icon\" \n                onClick={() => setLocation(\"/media\")}\n                data-testid=\"back-button\"\n                aria-label=\"Go back to media library\"\n              >\n                <ArrowLeft className=\"h-5 w-5\" />\n              </Button>\n              <PageTitle>\n                Upload Media\n              </PageTitle>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Button \n                variant=\"outline\" \n                onClick={() => setUploadFiles([])}\n                disabled={isUploading || uploadFiles.length === 0}\n                data-testid=\"clear-all\"\n              >\n                Clear All\n              </Button>\n              <Button \n                onClick={startUpload}\n                disabled={isUploading || pendingCount === 0}\n                data-testid=\"start-upload\"\n              >\n                <Upload className=\"h-4 w-4 mr-2\" />\n                {isUploading ? \"Uploading...\" : `Upload ${pendingCount + errorCount} File${pendingCount + errorCount !== 1 ? 's' : ''}`}\n              </Button>\n            </div>\n          </PageToolbar>\n          \n          <div className=\"mt-4 max-w-md\">\n            <Label htmlFor=\"destination\">Upload Destination</Label>\n            <Select value={destination} onValueChange={setDestination}>\n              <SelectTrigger data-testid=\"upload-destination\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"media-library\">Media Library</SelectItem>\n                <SelectItem value=\"post-images\">Post Images</SelectItem>\n                <SelectItem value=\"user-avatars\">User Avatars</SelectItem>\n                <SelectItem value=\"site-assets\">Site Assets</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n      </PageHeader>\n\n      <PageBody className=\"px-4 md:px-6\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Upload Zone */}\n          <div className=\"space-y-6\">\n            <Card\n              className={`border-2 border-dashed transition-colors ${\n                isDragOver ? \"border-primary bg-primary/5\" : \"border-muted-foreground/25\"\n              }`}\n              onDragOver={handleDragOver}\n              onDragLeave={handleDragLeave}\n              onDrop={handleDrop}\n              data-testid=\"upload-dropzone\"\n            >\n              <CardContent className=\"flex flex-col items-center justify-center py-12 text-center\">\n                <Upload className=\"h-12 w-12 text-muted-foreground mb-4\" />\n                <h3 className=\"text-lg font-semibold mb-2\">Drop files here to upload</h3>\n                <p className=\"text-sm text-muted-foreground mb-4\">\n                  or click to browse your computer\n                </p>\n                <Button onClick={() => fileInputRef.current?.click()} data-testid=\"browse-files\">\n                  Browse Files\n                </Button>\n                <input\n                  ref={fileInputRef}\n                  type=\"file\"\n                  multiple\n                  className=\"hidden\"\n                  onChange={handleFileSelect}\n                  accept=\"image/*,video/*,audio/*,.pdf,.doc,.docx,.txt\"\n                />\n                <p className=\"text-xs text-muted-foreground mt-4\">\n                  Supports: Images, Videos, Audio, Documents (Max 10MB each)\n                </p>\n              </CardContent>\n            </Card>\n\n            {/* Upload Stats */}\n            {uploadFiles.length > 0 && (\n              <Card>\n                <CardContent className=\"p-4\">\n                  <h4 className=\"font-medium mb-3\">Upload Summary</h4>\n                  <div className=\"grid grid-cols-3 gap-4 text-center\">\n                    <div>\n                      <div className=\"text-2xl font-bold text-green-600\">{completedCount}</div>\n                      <div className=\"text-xs text-muted-foreground\">Completed</div>\n                    </div>\n                    <div>\n                      <div className=\"text-2xl font-bold text-blue-600\">{uploadingCount}</div>\n                      <div className=\"text-xs text-muted-foreground\">Uploading</div>\n                    </div>\n                    <div>\n                      <div className=\"text-2xl font-bold text-red-600\">{errorCount}</div>\n                      <div className=\"text-xs text-muted-foreground\">Failed</div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n\n          {/* Upload Queue */}\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <h3 className=\"text-lg font-semibold\">\n                Upload Queue ({uploadFiles.length})\n              </h3>\n              {uploadFiles.length > 0 && (\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\" \n                  onClick={() => setUploadFiles([])}\n                  data-testid=\"clear-queue\"\n                >\n                  Clear All\n                </Button>\n              )}\n            </div>\n\n            <div className=\"space-y-3 max-h-96 overflow-y-auto\">\n              {uploadFiles.length === 0 ? (\n                <Card>\n                  <CardContent className=\"flex flex-col items-center justify-center py-8 text-center\">\n                    <FileIcon className=\"h-8 w-8 text-muted-foreground mb-2\" />\n                    <p className=\"text-sm text-muted-foreground\">\n                      No files in queue. Add files to start uploading.\n                    </p>\n                  </CardContent>\n                </Card>\n              ) : (\n                uploadFiles.map(uploadFile => {\n                  const Icon = getFileIcon(uploadFile.file.type);\n                  const statusIcon = getStatusIcon(uploadFile.status);\n                  \n                  return (\n                    <Card key={uploadFile.id} className=\"overflow-hidden\" data-testid={`upload-item-${uploadFile.id}`}>\n                      <CardContent className=\"p-3\">\n                        <div className=\"flex items-center gap-3\">\n                          <div className=\"flex-shrink-0\">\n                            <Icon className=\"h-6 w-6 text-muted-foreground\" />\n                          </div>\n                          \n                          <div className=\"flex-1 min-w-0\">\n                            <div className=\"flex items-center justify-between mb-1\">\n                              <p className=\"text-sm font-medium line-clamp-1\">\n                                {uploadFile.file.name}\n                              </p>\n                              <div className=\"flex items-center gap-2\">\n                                {statusIcon}\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"icon\"\n                                  className=\"h-6 w-6\"\n                                  onClick={() => removeFile(uploadFile.id)}\n                                  data-testid={`remove-file-${uploadFile.id}`}\n                                >\n                                  <X className=\"h-3 w-3\" />\n                                </Button>\n                              </div>\n                            </div>\n                            \n                            <div className=\"flex items-center justify-between text-xs text-muted-foreground mb-2\">\n                              <span>{formatFileSize(uploadFile.file.size)}</span>\n                              <Badge \n                                variant={\n                                  uploadFile.status === \"completed\" ? \"default\" :\n                                  uploadFile.status === \"error\" ? \"destructive\" :\n                                  uploadFile.status === \"uploading\" ? \"secondary\" : \"outline\"\n                                }\n                                className=\"text-xs\"\n                              >\n                                {uploadFile.status}\n                              </Badge>\n                            </div>\n                            \n                            {uploadFile.status === \"uploading\" && (\n                              <Progress value={uploadFile.progress} className=\"h-1\" />\n                            )}\n                            \n                            {uploadFile.status === \"error\" && uploadFile.error && (\n                              <div className=\"flex items-center justify-between\">\n                                <p className=\"text-xs text-destructive\">{uploadFile.error}</p>\n                                <Button\n                                  variant=\"outline\"\n                                  size=\"sm\"\n                                  onClick={() => retryUpload(uploadFile.id)}\n                                  data-testid={`retry-upload-${uploadFile.id}`}\n                                >\n                                  Retry\n                                </Button>\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  );\n                })\n              )}\n            </div>\n          </div>\n        </div>\n      </PageBody>\n    </Page>\n  );\n}","size_bytes":15151},"client/src/components/ui/empty-state.tsx":{"content":"import * as React from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { FileText, Image, Users, Calendar, Settings, Trash2, Plus } from \"lucide-react\";\n\ninterface EmptyStateProps {\n  icon?: React.ReactNode;\n  title: string;\n  description?: string;\n  action?: {\n    label: string;\n    onClick: () => void;\n    variant?: \"default\" | \"outline\" | \"secondary\";\n  };\n  className?: string;\n  \"data-testid\"?: string;\n}\n\nexport function EmptyState({ \n  icon, \n  title, \n  description, \n  action, \n  className,\n  \"data-testid\": testId\n}: EmptyStateProps) {\n  return (\n    <div className={cn(\n      \"flex flex-col items-center justify-center text-center py-12 px-4\",\n      className\n    )} data-testid={testId || \"empty-state\"}>\n      {icon && (\n        <div className=\"mb-4 p-3 bg-muted rounded-full\">\n          {icon}\n        </div>\n      )}\n      <h3 className=\"text-lg font-semibold mb-2\">{title}</h3>\n      {description && (\n        <p className=\"text-sm text-muted-foreground mb-6 max-w-sm\">\n          {description}\n        </p>\n      )}\n      {action && (\n        <Button \n          onClick={action.onClick}\n          variant={action.variant || \"default\"}\n          size=\"sm\"\n          data-testid=\"empty-state-action\"\n        >\n          <Plus className=\"h-4 w-4 mr-2\" />\n          {action.label}\n        </Button>\n      )}\n    </div>\n  );\n}\n\n// Predefined empty states for common scenarios\nexport const EmptyStates = {\n  Posts: (onCreatePost: () => void) => (\n    <EmptyState\n      icon={<FileText className=\"h-8 w-8 text-muted-foreground\" />}\n      title=\"No posts yet\"\n      description=\"Create your first post to get started with your content.\"\n      action={{\n        label: \"Create Post\",\n        onClick: onCreatePost\n      }}\n    />\n  ),\n  \n  Media: (onUpload: () => void) => (\n    <EmptyState\n      icon={<Image className=\"h-8 w-8 text-muted-foreground\" />}\n      title=\"No media files\"\n      description=\"Upload images, videos, and documents to your media library.\"\n      action={{\n        label: \"Upload Files\",\n        onClick: onUpload\n      }}\n    />\n  ),\n  \n  Users: (onInviteUser: () => void) => (\n    <EmptyState\n      icon={<Users className=\"h-8 w-8 text-muted-foreground\" />}\n      title=\"No users yet\"\n      description=\"Invite team members to collaborate on your content.\"\n      action={{\n        label: \"Invite User\",\n        onClick: onInviteUser\n      }}\n    />\n  ),\n  \n  Schedule: (onCreateSchedule: () => void) => (\n    <EmptyState\n      icon={<Calendar className=\"h-8 w-8 text-muted-foreground\" />}\n      title=\"No scheduled content\"\n      description=\"Schedule posts and content to be published automatically.\"\n      action={{\n        label: \"Schedule Content\",\n        onClick: onCreateSchedule\n      }}\n    />\n  ),\n  \n  Trash: () => (\n    <EmptyState\n      icon={<Trash2 className=\"h-8 w-8 text-muted-foreground\" />}\n      title=\"Trash is empty\"\n      description=\"Deleted items will appear here and can be restored or permanently deleted.\"\n    />\n  ),\n  \n  Settings: () => (\n    <EmptyState\n      icon={<Settings className=\"h-8 w-8 text-muted-foreground\" />}\n      title=\"No settings configured\"\n      description=\"Configure your application settings to customize the experience.\"\n    />\n  )\n};","size_bytes":3274},"client/src/components/ui/loading.tsx":{"content":"import * as React from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\n\n// Loading Skeleton for cards\ninterface LoadingCardProps {\n  className?: string;\n  count?: number;\n  \"data-testid\"?: string;\n}\n\nexport function LoadingCard({ className, count = 1, \"data-testid\": testId }: LoadingCardProps) {\n  return (\n    <>\n      {Array.from({ length: count }).map((_, i) => (\n        <div key={i} className={cn(\"p-4 border rounded-lg space-y-3\", className)} data-testid={`${testId || 'loading-card'}-${i}`}>\n          <div className=\"flex items-start justify-between\">\n            <div className=\"space-y-2 flex-1\">\n              <Skeleton className=\"h-4 w-3/4\" />\n              <Skeleton className=\"h-3 w-1/2\" />\n            </div>\n            <Skeleton className=\"h-8 w-16\" />\n          </div>\n          <Skeleton className=\"h-3 w-full\" />\n          <div className=\"flex justify-between\">\n            <Skeleton className=\"h-3 w-1/4\" />\n            <Skeleton className=\"h-3 w-1/6\" />\n          </div>\n        </div>\n      ))}\n    </>\n  );\n}\n\n// Loading Skeleton for table rows\ninterface LoadingTableProps {\n  className?: string;\n  rows?: number;\n  columns?: number;\n  \"data-testid\"?: string;\n}\n\nexport function LoadingTable({ className, rows = 5, columns = 4, \"data-testid\": testId }: LoadingTableProps) {\n  return (\n    <div className={cn(\"space-y-2\", className)} data-testid={testId || \"loading-table\"}>\n      {Array.from({ length: rows }).map((_, i) => (\n        <div key={i} className=\"flex items-center space-x-4 p-3\">\n          {Array.from({ length: columns }).map((_, j) => (\n            <Skeleton \n              key={j} \n              className={cn(\n                \"h-4\",\n                j === 0 ? \"w-8\" : j === 1 ? \"w-1/3\" : j === columns - 1 ? \"w-16\" : \"w-1/4\"\n              )} \n            />\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n}\n\n// Loading Skeleton for grid\ninterface LoadingGridProps {\n  className?: string;\n  items?: number;\n  columns?: number;\n  \"data-testid\"?: string;\n}\n\nexport function LoadingGrid({ className, items = 12, columns = 3, \"data-testid\": testId }: LoadingGridProps) {\n  return (\n    <div className={cn(\n      \"grid gap-4\",\n      columns === 2 && \"grid-cols-2\",\n      columns === 3 && \"grid-cols-2 md:grid-cols-3\",\n      columns === 4 && \"grid-cols-2 md:grid-cols-3 lg:grid-cols-4\",\n      columns === 6 && \"grid-cols-2 md:grid-cols-4 lg:grid-cols-6\",\n      className\n    )} data-testid={testId || \"loading-grid\"}>\n      {Array.from({ length: items }).map((_, i) => (\n        <div key={i} className=\"space-y-2\">\n          <Skeleton className=\"aspect-square w-full rounded-lg\" />\n          <Skeleton className=\"h-3 w-3/4\" />\n          <Skeleton className=\"h-3 w-1/2\" />\n        </div>\n      ))}\n    </div>\n  );\n}\n\n// Loading Page\ninterface LoadingPageProps {\n  className?: string;\n  \"data-testid\"?: string;\n}\n\nexport function LoadingPage({ className, \"data-testid\": testId }: LoadingPageProps) {\n  return (\n    <div className={cn(\"p-6 space-y-6\", className)} data-testid={testId || \"loading-page\"}>\n      <div className=\"space-y-2\">\n        <Skeleton className=\"h-8 w-1/3\" />\n        <Skeleton className=\"h-4 w-1/2\" />\n      </div>\n      <div className=\"flex gap-2\">\n        <Skeleton className=\"h-9 w-20\" />\n        <Skeleton className=\"h-9 w-24\" />\n        <Skeleton className=\"h-9 w-16 ml-auto\" />\n      </div>\n      <LoadingCard count={3} />\n    </div>\n  );\n}","size_bytes":3454},"client/src/components/ui/page.tsx":{"content":"import * as React from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Plus, Filter } from \"lucide-react\";\n\n// Page Container\ninterface PageProps {\n  children: React.ReactNode;\n  className?: string;\n  \"data-testid\"?: string;\n}\n\nexport function Page({ children, className, \"data-testid\": testId }: PageProps) {\n  return (\n    <div className={cn(\"flex flex-col h-full\", className)} data-testid={testId}>\n      {children}\n    </div>\n  );\n}\n\n// Page Header\ninterface PageHeaderProps {\n  children: React.ReactNode;\n  className?: string;\n  sticky?: boolean;\n  \"data-testid\"?: string;\n}\n\nexport function PageHeader({ children, className, sticky = true, \"data-testid\": testId }: PageHeaderProps) {\n  return (\n    <header\n      className={cn(\n        \"border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\",\n        sticky && \"sticky top-0 z-50\",\n        className\n      )}\n      data-testid={testId || \"page-header\"}\n    >\n      <div className=\"py-3 md:py-4\">\n        {children}\n      </div>\n    </header>\n  );\n}\n\n// Page Title\ninterface PageTitleProps {\n  children: React.ReactNode;\n  className?: string;\n  badge?: string;\n  description?: string;\n  \"data-testid\"?: string;\n}\n\nexport function PageTitle({ children, className, badge, description, \"data-testid\": testId }: PageTitleProps) {\n  return (\n    <div className={cn(\"space-y-1\", className)} data-testid={testId || \"page-title\"}>\n      <div className=\"flex items-center gap-2\">\n        <h1 className=\"text-2xl md:text-3xl font-semibold tracking-tight\">\n          {children}\n        </h1>\n        {badge && (\n          <Badge variant=\"secondary\" className=\"text-xs\">\n            {badge}\n          </Badge>\n        )}\n      </div>\n      {description && (\n        <p className=\"text-sm text-muted-foreground\">\n          {description}\n        </p>\n      )}\n    </div>\n  );\n}\n\n// Page Toolbar (for search, filters, actions)\ninterface PageToolbarProps {\n  children: React.ReactNode;\n  className?: string;\n  \"data-testid\"?: string;\n}\n\nexport function PageToolbar({ children, className, \"data-testid\": testId }: PageToolbarProps) {\n  return (\n    <div className={cn(\"flex flex-col gap-3 md:flex-row md:items-center md:justify-between\", className)} data-testid={testId || \"page-toolbar\"}>\n      {children}\n    </div>\n  );\n}\n\n// Page Body\ninterface PageBodyProps {\n  children: React.ReactNode;\n  className?: string;\n  \"data-testid\"?: string;\n}\n\nexport function PageBody({ children, className, \"data-testid\": testId }: PageBodyProps) {\n  return (\n    <main className={cn(\"flex-1 overflow-auto\", className)} data-testid={testId || \"page-body\"}>\n      {children}\n    </main>\n  );\n}\n\n// Page Actions (top-right actions on desktop)\ninterface PageActionsProps {\n  children: React.ReactNode;\n  className?: string;\n  \"data-testid\"?: string;\n}\n\nexport function PageActions({ children, className, \"data-testid\": testId }: PageActionsProps) {\n  return (\n    <div className={cn(\"flex items-center gap-2\", className)} data-testid={testId || \"page-actions\"}>\n      {children}\n    </div>\n  );\n}\n\n// Mobile Action Bar (sticky bottom actions)\ninterface ActionBarProps {\n  children: React.ReactNode;\n  className?: string;\n  show?: boolean;\n  \"data-testid\"?: string;\n}\n\nexport function ActionBar({ children, className, show = true, \"data-testid\": testId }: ActionBarProps) {\n  if (!show) return null;\n\n  return (\n    <div className={cn(\n      \"md:hidden fixed bottom-0 left-0 right-0 z-50\",\n      \"bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\",\n      \"border-t px-4 py-3 pb-safe\",\n      className\n    )} data-testid={testId || \"action-bar\"}>\n      <div className=\"flex items-center justify-between gap-2\">\n        {children}\n      </div>\n    </div>\n  );\n}\n\n// Floating Action Button\ninterface FABProps {\n  onClick?: () => void;\n  icon?: React.ReactNode;\n  children?: React.ReactNode;\n  className?: string;\n  \"data-testid\"?: string;\n  \"aria-label\"?: string;\n}\n\nexport function FAB({ onClick, icon = <Plus className=\"h-4 w-4\" />, children, className, \"data-testid\": testId, \"aria-label\": ariaLabel }: FABProps) {\n  return (\n    <Button\n      onClick={onClick}\n      size={children ? \"default\" : \"icon\"}\n      className={cn(\n        \"md:hidden fixed bottom-20 right-4 z-40 rounded-full shadow-lg\",\n        \"hover:shadow-xl transition-all duration-200\",\n        children && \"px-4\",\n        className\n      )}\n      data-testid={testId || \"fab\"}\n      aria-label={ariaLabel || children?.toString() || \"Floating action button\"}\n    >\n      {icon}\n      {children && <span className=\"ml-2\">{children}</span>}\n    </Button>\n  );\n}\n\n// Filter Sheet (mobile filter overlay)\ninterface FilterSheetProps {\n  children: React.ReactNode;\n  trigger?: React.ReactNode;\n  title?: string;\n  className?: string;\n  \"data-testid\"?: string;\n}\n\nexport function FilterSheet({ \n  children, \n  trigger = (\n    <Button variant=\"outline\" size=\"sm\" className=\"md:hidden\" aria-label=\"Open filters\">\n      <Filter className=\"h-4 w-4 mr-2\" />\n      Filter\n    </Button>\n  ),\n  title = \"Filters\",\n  className,\n  \"data-testid\": testId\n}: FilterSheetProps) {\n  return (\n    <Sheet>\n      <SheetTrigger asChild data-testid={`${testId || 'filter-sheet'}-trigger`}>\n        {trigger}\n      </SheetTrigger>\n      <SheetContent side=\"bottom\" className={cn(\"max-h-[80vh]\", className)} data-testid={testId || \"filter-sheet\"}>\n        <div className=\"space-y-4\">\n          <h3 className=\"text-lg font-semibold\">{title}</h3>\n          {children}\n        </div>\n      </SheetContent>\n    </Sheet>\n  );\n}","size_bytes":5710},"client/src/components/HeroBuilderPage.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  Page, \n  PageHeader, \n  PageTitle, \n  PageToolbar, \n  PageBody, \n  PageActions,\n  ActionBar\n} from \"@/components/ui/page\";\nimport { \n  Layout,\n  Smartphone,\n  Tablet,\n  Monitor,\n  Eye,\n  Save,\n  Settings,\n  Image,\n  Type,\n  Square,\n  Palette,\n  Move,\n  Plus,\n  Trash2,\n  GripVertical\n} from \"lucide-react\";\n\ninterface HeroTemplate {\n  id: string;\n  name: string;\n  description: string;\n  preview: string;\n  style: \"full-width\" | \"split-screen\" | \"centered\" | \"minimal\" | \"video-bg\";\n}\n\ninterface ContentZone {\n  id: string;\n  type: \"headline\" | \"subtext\" | \"cta\" | \"image\" | \"video\";\n  content: string;\n  settings: Record<string, any>;\n  order: number;\n}\n\ninterface HeroBuilderPageProps {\n  onSave?: (heroData: any) => void;\n  onPreview?: (heroData: any) => void;\n}\n\nexport default function HeroBuilderPage({ \n  onSave = (data) => console.log(\"Save hero:\", data),\n  onPreview = (data) => console.log(\"Preview hero:\", data)\n}: HeroBuilderPageProps) {\n  const [activeTab, setActiveTab] = useState(\"design\");\n  const [selectedTemplate, setSelectedTemplate] = useState<string | null>(null);\n  const [previewDevice, setPreviewDevice] = useState<\"desktop\" | \"tablet\" | \"mobile\">(\"desktop\");\n  const [isDirty, setIsDirty] = useState(false);\n  const [draggedZone, setDraggedZone] = useState<string | null>(null);\n\n  // Mock hero templates\n  const heroTemplates: HeroTemplate[] = [\n    {\n      id: \"full-width\",\n      name: \"Full Width Hero\",\n      description: \"Large banner spanning the full width with centered content\",\n      preview: \"bg-gradient-to-r from-blue-600 to-purple-600\",\n      style: \"full-width\"\n    },\n    {\n      id: \"split-screen\",\n      name: \"Split Screen\",\n      description: \"Content on left, media on right layout\",\n      preview: \"bg-gradient-to-r from-green-500 to-teal-500\",\n      style: \"split-screen\"\n    },\n    {\n      id: \"centered\",\n      name: \"Centered Focus\",\n      description: \"Centered content with minimal background\",\n      preview: \"bg-gradient-to-br from-orange-400 to-red-500\",\n      style: \"centered\"\n    },\n    {\n      id: \"minimal\",\n      name: \"Minimal Clean\",\n      description: \"Clean, typography-focused design\",\n      preview: \"bg-gradient-to-r from-gray-700 to-gray-900\",\n      style: \"minimal\"\n    },\n    {\n      id: \"video-bg\",\n      name: \"Video Background\",\n      description: \"Full-screen video with overlay content\",\n      preview: \"bg-gradient-to-r from-indigo-600 to-blue-600\",\n      style: \"video-bg\"\n    }\n  ];\n\n  // Mock content zones\n  const [contentZones, setContentZones] = useState<ContentZone[]>([\n    {\n      id: \"headline\",\n      type: \"headline\",\n      content: \"Build Amazing Experiences\",\n      settings: { fontSize: \"large\", align: \"center\", color: \"white\" },\n      order: 0\n    },\n    {\n      id: \"subtext\",\n      type: \"subtext\", \n      content: \"Create stunning hero sections that capture attention and drive engagement with our visual builder.\",\n      settings: { fontSize: \"medium\", align: \"center\", color: \"gray-200\" },\n      order: 1\n    },\n    {\n      id: \"cta\",\n      type: \"cta\",\n      content: \"Get Started\",\n      settings: { variant: \"primary\", size: \"large\", link: \"/signup\" },\n      order: 2\n    }\n  ]);\n\n  const handleZoneDragStart = (e: React.DragEvent, zoneId: string) => {\n    setDraggedZone(zoneId);\n    e.dataTransfer.effectAllowed = \"move\";\n  };\n\n  const handleZoneDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.dataTransfer.dropEffect = \"move\";\n  };\n\n  const handleZoneDrop = (e: React.DragEvent, targetId: string) => {\n    e.preventDefault();\n    if (draggedZone && draggedZone !== targetId) {\n      const draggedIndex = contentZones.findIndex(z => z.id === draggedZone);\n      const targetIndex = contentZones.findIndex(z => z.id === targetId);\n      \n      if (draggedIndex !== -1 && targetIndex !== -1) {\n        const newZones = [...contentZones];\n        const [draggedItem] = newZones.splice(draggedIndex, 1);\n        newZones.splice(targetIndex, 0, draggedItem);\n        \n        // Update order\n        newZones.forEach((zone, index) => {\n          zone.order = index;\n        });\n        \n        setContentZones(newZones);\n        setIsDirty(true);\n      }\n    }\n    setDraggedZone(null);\n  };\n\n  const addContentZone = (type: ContentZone[\"type\"]) => {\n    const newZone: ContentZone = {\n      id: `${type}-${Date.now()}`,\n      type,\n      content: type === \"headline\" ? \"New Headline\" : \n               type === \"subtext\" ? \"New subtext content\" :\n               type === \"cta\" ? \"Button Text\" :\n               type === \"image\" ? \"/placeholder-image.jpg\" : \n               \"/placeholder-video.mp4\",\n      settings: type === \"cta\" ? { variant: \"primary\", size: \"medium\", link: \"#\" } : \n                type === \"headline\" ? { fontSize: \"large\", align: \"center\", color: \"white\" } :\n                { fontSize: \"medium\", align: \"center\", color: \"gray-200\" },\n      order: contentZones.length\n    };\n    \n    setContentZones([...contentZones, newZone]);\n    setIsDirty(true);\n  };\n\n  const removeContentZone = (zoneId: string) => {\n    setContentZones(contentZones.filter(z => z.id !== zoneId));\n    setIsDirty(true);\n  };\n\n  const updateZoneContent = (zoneId: string, content: string) => {\n    setContentZones(contentZones.map(z => \n      z.id === zoneId ? { ...z, content } : z\n    ));\n    setIsDirty(true);\n  };\n\n  const updateZoneSetting = (zoneId: string, setting: string, value: any) => {\n    setContentZones(contentZones.map(z => \n      z.id === zoneId ? { \n        ...z, \n        settings: { ...z.settings, [setting]: value }\n      } : z\n    ));\n    setIsDirty(true);\n  };\n\n  const handleSave = () => {\n    const heroData = {\n      template: selectedTemplate,\n      zones: contentZones,\n      settings: {\n        previewDevice\n      }\n    };\n    onSave(heroData);\n    setIsDirty(false);\n  };\n\n  const handlePreview = () => {\n    const heroData = {\n      template: selectedTemplate,\n      zones: contentZones,\n      settings: {\n        previewDevice\n      }\n    };\n    onPreview(heroData);\n  };\n\n  const getDeviceIcon = (device: typeof previewDevice) => {\n    switch (device) {\n      case \"mobile\": return Smartphone;\n      case \"tablet\": return Tablet;\n      case \"desktop\": return Monitor;\n      default: return Monitor;\n    }\n  };\n\n  const getDeviceClass = () => {\n    switch (previewDevice) {\n      case \"mobile\": return \"max-w-sm mx-auto\";\n      case \"tablet\": return \"max-w-2xl mx-auto\";\n      case \"desktop\": return \"w-full\";\n      default: return \"w-full\";\n    }\n  };\n\n  const getZoneIcon = (type: ContentZone[\"type\"]) => {\n    switch (type) {\n      case \"headline\": return Type;\n      case \"subtext\": return Type;\n      case \"cta\": return Square;\n      case \"image\": return Image;\n      case \"video\": return Layout;\n      default: return Layout;\n    }\n  };\n\n  const TemplateGallery = () => (\n    <div className=\"space-y-4\">\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n        {heroTemplates.map((template) => (\n          <Card \n            key={template.id}\n            className={`cursor-pointer transition-all hover:ring-2 hover:ring-primary/50 ${\n              selectedTemplate === template.id ? 'ring-2 ring-primary' : ''\n            }`}\n            onClick={() => {\n              setSelectedTemplate(template.id);\n              setIsDirty(true);\n            }}\n            data-testid={`template-${template.id}`}\n          >\n            <CardContent className=\"p-4\">\n              <div className={`h-32 rounded-lg mb-3 ${template.preview} flex items-center justify-center`}>\n                <Layout className=\"w-8 h-8 text-white opacity-80\" />\n              </div>\n              <h3 className=\"font-medium mb-1\">{template.name}</h3>\n              <p className=\"text-sm text-muted-foreground\">{template.description}</p>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    </div>\n  );\n\n  const ContentBuilder = () => (\n    <div className=\"space-y-6\">\n      {/* Add Content Zone */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Plus className=\"w-4 h-4\" />\n            Add Content\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex flex-wrap gap-2\">\n            <Button \n              variant=\"outline\" \n              size=\"sm\"\n              onClick={() => addContentZone(\"headline\")}\n              data-testid=\"add-headline\"\n            >\n              <Type className=\"w-4 h-4 mr-2\" />\n              Headline\n            </Button>\n            <Button \n              variant=\"outline\" \n              size=\"sm\"\n              onClick={() => addContentZone(\"subtext\")}\n              data-testid=\"add-subtext\"\n            >\n              <Type className=\"w-4 h-4 mr-2\" />\n              Subtext\n            </Button>\n            <Button \n              variant=\"outline\" \n              size=\"sm\"\n              onClick={() => addContentZone(\"cta\")}\n              data-testid=\"add-cta\"\n            >\n              <Square className=\"w-4 h-4 mr-2\" />\n              Button\n            </Button>\n            <Button \n              variant=\"outline\" \n              size=\"sm\"\n              onClick={() => addContentZone(\"image\")}\n              data-testid=\"add-image\"\n            >\n              <Image className=\"w-4 h-4 mr-2\" />\n              Image\n            </Button>\n            <Button \n              variant=\"outline\" \n              size=\"sm\"\n              onClick={() => addContentZone(\"video\")}\n              data-testid=\"add-video\"\n            >\n              <Layout className=\"w-4 h-4 mr-2\" />\n              Video\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Content Zones */}\n      <div className=\"space-y-4\">\n        {contentZones.sort((a, b) => a.order - b.order).map((zone) => {\n          const ZoneIcon = getZoneIcon(zone.type);\n          return (\n            <Card \n              key={zone.id}\n              className={`hover-elevate cursor-move ${draggedZone === zone.id ? 'opacity-50' : ''}`}\n              draggable\n              onDragStart={(e) => handleZoneDragStart(e, zone.id)}\n              onDragOver={handleZoneDragOver}\n              onDrop={(e) => handleZoneDrop(e, zone.id)}\n              data-testid={`zone-${zone.id}`}\n            >\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-start gap-4\">\n                  <GripVertical className=\"w-5 h-5 text-muted-foreground cursor-grab mt-1\" />\n                  \n                  <div className=\"flex-1 space-y-3\">\n                    <div className=\"flex items-center gap-2\">\n                      <ZoneIcon className=\"w-4 h-4 text-primary\" />\n                      <Badge variant=\"secondary\" className=\"capitalize\">\n                        {zone.type}\n                      </Badge>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        className=\"w-6 h-6 ml-auto\"\n                        onClick={() => removeContentZone(zone.id)}\n                        data-testid={`remove-${zone.id}`}\n                      >\n                        <Trash2 className=\"w-3 h-3\" />\n                      </Button>\n                    </div>\n                    \n                    <div className=\"space-y-2\">\n                      <Label htmlFor={`content-${zone.id}`}>Content</Label>\n                      {zone.type === \"subtext\" ? (\n                        <Textarea\n                          id={`content-${zone.id}`}\n                          value={zone.content}\n                          onChange={(e) => updateZoneContent(zone.id, e.target.value)}\n                          className=\"h-20\"\n                          data-testid={`content-${zone.id}`}\n                        />\n                      ) : (\n                        <Input\n                          id={`content-${zone.id}`}\n                          value={zone.content}\n                          onChange={(e) => updateZoneContent(zone.id, e.target.value)}\n                          data-testid={`content-${zone.id}`}\n                        />\n                      )}\n                    </div>\n                    \n                    {/* Zone-specific settings */}\n                    {zone.type === \"headline\" && (\n                      <div className=\"grid grid-cols-2 gap-2\">\n                        <div className=\"space-y-1\">\n                          <Label>Font Size</Label>\n                          <Select \n                            value={zone.settings.fontSize} \n                            onValueChange={(value) => updateZoneSetting(zone.id, \"fontSize\", value)}\n                          >\n                            <SelectTrigger>\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"small\">Small</SelectItem>\n                              <SelectItem value=\"medium\">Medium</SelectItem>\n                              <SelectItem value=\"large\">Large</SelectItem>\n                              <SelectItem value=\"xl\">Extra Large</SelectItem>\n                            </SelectContent>\n                          </Select>\n                        </div>\n                        <div className=\"space-y-1\">\n                          <Label>Alignment</Label>\n                          <Select \n                            value={zone.settings.align} \n                            onValueChange={(value) => updateZoneSetting(zone.id, \"align\", value)}\n                          >\n                            <SelectTrigger>\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"left\">Left</SelectItem>\n                              <SelectItem value=\"center\">Center</SelectItem>\n                              <SelectItem value=\"right\">Right</SelectItem>\n                            </SelectContent>\n                          </Select>\n                        </div>\n                      </div>\n                    )}\n                    \n                    {zone.type === \"cta\" && (\n                      <div className=\"grid grid-cols-3 gap-2\">\n                        <div className=\"space-y-1\">\n                          <Label>Style</Label>\n                          <Select \n                            value={zone.settings.variant} \n                            onValueChange={(value) => updateZoneSetting(zone.id, \"variant\", value)}\n                          >\n                            <SelectTrigger>\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"primary\">Primary</SelectItem>\n                              <SelectItem value=\"secondary\">Secondary</SelectItem>\n                              <SelectItem value=\"outline\">Outline</SelectItem>\n                            </SelectContent>\n                          </Select>\n                        </div>\n                        <div className=\"space-y-1\">\n                          <Label>Size</Label>\n                          <Select \n                            value={zone.settings.size} \n                            onValueChange={(value) => updateZoneSetting(zone.id, \"size\", value)}\n                          >\n                            <SelectTrigger>\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"small\">Small</SelectItem>\n                              <SelectItem value=\"medium\">Medium</SelectItem>\n                              <SelectItem value=\"large\">Large</SelectItem>\n                            </SelectContent>\n                          </Select>\n                        </div>\n                        <div className=\"space-y-1\">\n                          <Label>Link</Label>\n                          <Input\n                            value={zone.settings.link}\n                            onChange={(e) => updateZoneSetting(zone.id, \"link\", e.target.value)}\n                            placeholder=\"/page\"\n                          />\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n    </div>\n  );\n\n  const PreviewPanel = () => {\n    const selectedTemplateData = heroTemplates.find(t => t.id === selectedTemplate);\n    \n    return (\n      <div className=\"space-y-4\">\n        {/* Device Controls */}\n        <div className=\"flex items-center justify-between\">\n          <h3 className=\"font-medium\">Preview</h3>\n          <div className=\"flex items-center gap-1 border rounded-lg p-1\">\n            {([\"mobile\", \"tablet\", \"desktop\"] as const).map((device) => {\n              const DeviceIcon = getDeviceIcon(device);\n              return (\n                <Button\n                  key={device}\n                  variant={previewDevice === device ? \"default\" : \"ghost\"}\n                  size=\"sm\"\n                  onClick={() => setPreviewDevice(device)}\n                  data-testid={`preview-${device}`}\n                >\n                  <DeviceIcon className=\"w-4 h-4\" />\n                </Button>\n              );\n            })}\n          </div>\n        </div>\n        \n        {/* Preview Area */}\n        <div className=\"border rounded-lg p-4 bg-muted/30\">\n          <div className={`transition-all duration-300 ${getDeviceClass()}`}>\n            <div className={`rounded-lg overflow-hidden ${\n              selectedTemplateData?.preview || \"bg-gradient-to-r from-gray-700 to-gray-900\"\n            } min-h-[200px] md:min-h-[300px] flex flex-col items-center justify-center text-white p-6 md:p-12`}>\n              {contentZones.sort((a, b) => a.order - b.order).map((zone) => (\n                <div \n                  key={zone.id}\n                  className={`mb-4 ${\n                    zone.settings.align === 'center' ? 'text-center' :\n                    zone.settings.align === 'right' ? 'text-right' : 'text-left'\n                  }`}\n                >\n                  {zone.type === \"headline\" && (\n                    <h1 className={`font-bold ${\n                      zone.settings.fontSize === 'xl' ? 'text-4xl md:text-6xl' :\n                      zone.settings.fontSize === 'large' ? 'text-3xl md:text-5xl' :\n                      zone.settings.fontSize === 'medium' ? 'text-2xl md:text-4xl' :\n                      'text-xl md:text-3xl'\n                    }`}>\n                      {zone.content}\n                    </h1>\n                  )}\n                  \n                  {zone.type === \"subtext\" && (\n                    <p className={`${\n                      zone.settings.fontSize === 'large' ? 'text-lg md:text-xl' :\n                      zone.settings.fontSize === 'medium' ? 'text-base md:text-lg' :\n                      'text-sm md:text-base'\n                    } opacity-90 max-w-2xl`}>\n                      {zone.content}\n                    </p>\n                  )}\n                  \n                  {zone.type === \"cta\" && (\n                    <Button\n                      variant={zone.settings.variant}\n                      size={zone.settings.size}\n                      className=\"mt-2\"\n                    >\n                      {zone.content}\n                    </Button>\n                  )}\n                  \n                  {zone.type === \"image\" && (\n                    <div className=\"w-full max-w-md h-32 bg-white/20 rounded-lg flex items-center justify-center\">\n                      <Image className=\"w-8 h-8 opacity-50\" />\n                    </div>\n                  )}\n                  \n                  {zone.type === \"video\" && (\n                    <div className=\"w-full max-w-lg h-40 bg-black/30 rounded-lg flex items-center justify-center\">\n                      <Layout className=\"w-12 h-12 opacity-50\" />\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <Page data-testid=\"hero-builder-page\">\n      <PageHeader>\n        <div className=\"px-4 md:px-6\">\n          <PageToolbar>\n            <PageTitle>\n              Hero / Featured Builder\n            </PageTitle>\n            <PageActions>\n              <div className=\"hidden md:flex items-center gap-2\">\n                <Button \n                  variant=\"outline\" \n                  onClick={handlePreview}\n                  data-testid=\"preview-hero\"\n                >\n                  <Eye className=\"h-4 w-4 mr-2\" />\n                  Preview\n                </Button>\n                {isDirty && (\n                  <Button onClick={handleSave} data-testid=\"save-hero-desktop\">\n                    <Save className=\"h-4 w-4 mr-2\" />\n                    Save Hero\n                  </Button>\n                )}\n              </div>\n            </PageActions>\n          </PageToolbar>\n        </div>\n      </PageHeader>\n\n      <PageBody className=\"px-4 md:px-6\">\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n          <TabsList className=\"w-full max-w-md\">\n            <TabsTrigger value=\"design\" className=\"flex items-center gap-2\">\n              <Layout className=\"h-4 w-4\" />\n              Templates\n            </TabsTrigger>\n            <TabsTrigger value=\"content\" className=\"flex items-center gap-2\">\n              <Type className=\"h-4 w-4\" />\n              Content\n            </TabsTrigger>\n            <TabsTrigger value=\"preview\" className=\"flex items-center gap-2\">\n              <Eye className=\"h-4 w-4\" />\n              Preview\n            </TabsTrigger>\n          </TabsList>\n          \n          <TabsContent value=\"design\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Choose a Template</CardTitle>\n                <p className=\"text-sm text-muted-foreground\">\n                  Select a hero layout template to get started\n                </p>\n              </CardHeader>\n              <CardContent>\n                <TemplateGallery />\n              </CardContent>\n            </Card>\n          </TabsContent>\n          \n          <TabsContent value=\"content\">\n            <ContentBuilder />\n          </TabsContent>\n          \n          <TabsContent value=\"preview\">\n            <PreviewPanel />\n          </TabsContent>\n        </Tabs>\n      </PageBody>\n\n      {/* Mobile Action Bar */}\n      <ActionBar show={isDirty}>\n        <span className=\"text-sm\">Unsaved changes</span>\n        <div className=\"flex gap-2\">\n          <Button onClick={handlePreview} size=\"sm\" variant=\"outline\" data-testid=\"preview-hero-mobile\">\n            <Eye className=\"h-4 w-4 mr-1\" />\n            Preview\n          </Button>\n          <Button onClick={handleSave} size=\"sm\" data-testid=\"save-hero-mobile\">\n            <Save className=\"h-4 w-4 mr-1\" />\n            Save\n          </Button>\n        </div>\n      </ActionBar>\n    </Page>\n  );\n}","size_bytes":23887},"client/src/components/WidgetsManagerPage.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  Page, \n  PageHeader, \n  PageTitle, \n  PageToolbar, \n  PageBody, \n  PageActions,\n  ActionBar\n} from \"@/components/ui/page\";\nimport { \n  Layout,\n  Sidebar,\n  FileText,\n  Search,\n  Mail,\n  Share2,\n  Calendar,\n  BarChart3,\n  Users,\n  MessageSquare,\n  Image,\n  Tag,\n  Clock,\n  Save,\n  Settings,\n  Plus,\n  Trash2,\n  GripVertical,\n  Eye,\n  Copy,\n  Edit3,\n  ChevronDown,\n  ChevronUp,\n  Smartphone,\n  Tablet,\n  Monitor\n} from \"lucide-react\";\n\ninterface Widget {\n  id: string;\n  type: \"recent-posts\" | \"search\" | \"newsletter\" | \"social-feed\" | \"calendar\" | \"analytics\" | \"users\" | \"comments\" | \"image-gallery\" | \"tag-cloud\" | \"clock\";\n  name: string;\n  description: string;\n  icon: any;\n  category: \"content\" | \"engagement\" | \"utility\" | \"social\";\n  settings: Record<string, any>;\n  isActive: boolean;\n}\n\ninterface LayoutZone {\n  id: string;\n  name: string;\n  description: string;\n  position: \"left-sidebar\" | \"right-sidebar\" | \"footer\" | \"header\" | \"mobile-drawer\";\n  maxWidgets: number;\n  widgets: string[]; // widget IDs\n  isActive: boolean;\n  responsive: {\n    mobile: boolean;\n    tablet: boolean;\n    desktop: boolean;\n  };\n}\n\ninterface WidgetsManagerPageProps {\n  onSave?: (widgetsData: any) => void;\n  onPreview?: (widgetsData: any) => void;\n}\n\nexport default function WidgetsManagerPage({ \n  onSave = (data) => console.log(\"Save widgets:\", data),\n  onPreview = (data) => console.log(\"Preview widgets:\", data)\n}: WidgetsManagerPageProps) {\n  const [activeTab, setActiveTab] = useState(\"library\");\n  const [selectedWidget, setSelectedWidget] = useState<string | null>(null);\n  const [selectedZone, setSelectedZone] = useState<string | null>(null);\n  const [previewDevice, setPreviewDevice] = useState<\"desktop\" | \"tablet\" | \"mobile\">(\"desktop\");\n  const [isDirty, setIsDirty] = useState(false);\n  const [draggedWidget, setDraggedWidget] = useState<string | null>(null);\n\n  // Widget Library\n  const [widgetLibrary, setWidgetLibrary] = useState<Widget[]>([\n    {\n      id: \"recent-posts-1\",\n      type: \"recent-posts\",\n      name: \"Recent Posts\",\n      description: \"Display latest blog posts with thumbnails\",\n      icon: FileText,\n      category: \"content\",\n      settings: {\n        count: 5,\n        showThumbnails: true,\n        showDate: true,\n        showExcerpt: false,\n        title: \"Latest Posts\"\n      },\n      isActive: true\n    },\n    {\n      id: \"search-1\", \n      type: \"search\",\n      name: \"Site Search\",\n      description: \"Search box for content discovery\",\n      icon: Search,\n      category: \"utility\",\n      settings: {\n        placeholder: \"Search...\",\n        showCategories: false,\n        title: \"Search\"\n      },\n      isActive: true\n    },\n    {\n      id: \"newsletter-1\",\n      type: \"newsletter\",\n      name: \"Newsletter Signup\",\n      description: \"Email subscription form\",\n      icon: Mail,\n      category: \"engagement\",\n      settings: {\n        title: \"Subscribe\",\n        description: \"Get updates in your inbox\",\n        buttonText: \"Subscribe\",\n        showPrivacyNote: true\n      },\n      isActive: true\n    },\n    {\n      id: \"social-feed-1\",\n      type: \"social-feed\",\n      name: \"Social Media Feed\",\n      description: \"Display social media posts\",\n      icon: Share2,\n      category: \"social\",\n      settings: {\n        platform: \"twitter\",\n        count: 3,\n        showAuthor: true,\n        title: \"Follow Us\"\n      },\n      isActive: false\n    },\n    {\n      id: \"calendar-1\",\n      type: \"calendar\",\n      name: \"Event Calendar\",\n      description: \"Upcoming events and dates\",\n      icon: Calendar,\n      category: \"utility\",\n      settings: {\n        view: \"upcoming\",\n        count: 5,\n        showTime: true,\n        title: \"Upcoming Events\"\n      },\n      isActive: false\n    },\n    {\n      id: \"analytics-1\",\n      type: \"analytics\",\n      name: \"Quick Stats\",\n      description: \"Basic site analytics widget\",\n      icon: BarChart3,\n      category: \"utility\",\n      settings: {\n        metrics: [\"views\", \"visitors\"],\n        period: \"week\",\n        title: \"Site Stats\"\n      },\n      isActive: false\n    }\n  ]);\n\n  // Layout Zones\n  const [layoutZones, setLayoutZones] = useState<LayoutZone[]>([\n    {\n      id: \"left-sidebar\",\n      name: \"Left Sidebar\",\n      description: \"Main sidebar for navigation and widgets\",\n      position: \"left-sidebar\",\n      maxWidgets: 6,\n      widgets: [\"recent-posts-1\", \"search-1\"],\n      isActive: true,\n      responsive: {\n        mobile: false,\n        tablet: true,\n        desktop: true\n      }\n    },\n    {\n      id: \"right-sidebar\",\n      name: \"Right Sidebar\",\n      description: \"Secondary sidebar for additional content\",\n      position: \"right-sidebar\",\n      maxWidgets: 4,\n      widgets: [\"newsletter-1\"],\n      isActive: true,\n      responsive: {\n        mobile: false,\n        tablet: false,\n        desktop: true\n      }\n    },\n    {\n      id: \"footer-widgets\",\n      name: \"Footer Widgets\",\n      description: \"Footer area for contact and links\",\n      position: \"footer\",\n      maxWidgets: 8,\n      widgets: [],\n      isActive: true,\n      responsive: {\n        mobile: true,\n        tablet: true,\n        desktop: true\n      }\n    },\n    {\n      id: \"mobile-drawer\",\n      name: \"Mobile Menu\",\n      description: \"Mobile-only collapsible menu area\",\n      position: \"mobile-drawer\",\n      maxWidgets: 3,\n      widgets: [],\n      isActive: true,\n      responsive: {\n        mobile: true,\n        tablet: false,\n        desktop: false\n      }\n    }\n  ]);\n\n  const handleWidgetDragStart = (e: React.DragEvent, widgetId: string) => {\n    setDraggedWidget(widgetId);\n    e.dataTransfer.effectAllowed = \"copy\";\n  };\n\n  const handleZoneDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.dataTransfer.dropEffect = \"copy\";\n  };\n\n  const handleZoneDrop = (e: React.DragEvent, zoneId: string) => {\n    e.preventDefault();\n    if (draggedWidget) {\n      const zone = layoutZones.find(z => z.id === zoneId);\n      if (zone && zone.widgets.length < zone.maxWidgets) {\n        // Check if widget is already in zone\n        if (!zone.widgets.includes(draggedWidget)) {\n          setLayoutZones(layoutZones.map(z => \n            z.id === zoneId \n              ? { ...z, widgets: [...z.widgets, draggedWidget] }\n              : z\n          ));\n          setIsDirty(true);\n        }\n      }\n    }\n    setDraggedWidget(null);\n  };\n\n  const removeWidgetFromZone = (zoneId: string, widgetId: string) => {\n    setLayoutZones(layoutZones.map(z => \n      z.id === zoneId \n        ? { ...z, widgets: z.widgets.filter(w => w !== widgetId) }\n        : z\n    ));\n    setIsDirty(true);\n  };\n\n  const reorderWidgetInZone = (zoneId: string, widgetId: string, direction: \"up\" | \"down\") => {\n    const zone = layoutZones.find(z => z.id === zoneId);\n    if (!zone) return;\n\n    const currentIndex = zone.widgets.indexOf(widgetId);\n    if (currentIndex === -1) return;\n\n    const newIndex = direction === \"up\" ? currentIndex - 1 : currentIndex + 1;\n    if (newIndex < 0 || newIndex >= zone.widgets.length) return;\n\n    const newWidgets = [...zone.widgets];\n    [newWidgets[currentIndex], newWidgets[newIndex]] = [newWidgets[newIndex], newWidgets[currentIndex]];\n\n    setLayoutZones(layoutZones.map(z => \n      z.id === zoneId ? { ...z, widgets: newWidgets } : z\n    ));\n    setIsDirty(true);\n  };\n\n  const updateWidgetSetting = (widgetId: string, setting: string, value: any) => {\n    setWidgetLibrary(widgetLibrary.map(w => \n      w.id === widgetId \n        ? { ...w, settings: { ...w.settings, [setting]: value } }\n        : w\n    ));\n    setIsDirty(true);\n  };\n\n  const toggleWidget = (widgetId: string) => {\n    setWidgetLibrary(widgetLibrary.map(w => \n      w.id === widgetId ? { ...w, isActive: !w.isActive } : w\n    ));\n    setIsDirty(true);\n  };\n\n  const toggleZone = (zoneId: string) => {\n    setLayoutZones(layoutZones.map(z => \n      z.id === zoneId ? { ...z, isActive: !z.isActive } : z\n    ));\n    setIsDirty(true);\n  };\n\n  const updateZoneResponsive = (zoneId: string, device: keyof LayoutZone[\"responsive\"], enabled: boolean) => {\n    setLayoutZones(layoutZones.map(z => \n      z.id === zoneId \n        ? { ...z, responsive: { ...z.responsive, [device]: enabled } }\n        : z\n    ));\n    setIsDirty(true);\n  };\n\n  const handleSave = () => {\n    const widgetsData = {\n      widgets: widgetLibrary,\n      zones: layoutZones,\n      settings: { previewDevice }\n    };\n    onSave(widgetsData);\n    setIsDirty(false);\n  };\n\n  const handlePreview = () => {\n    const widgetsData = {\n      widgets: widgetLibrary,\n      zones: layoutZones,\n      settings: { previewDevice }\n    };\n    onPreview(widgetsData);\n  };\n\n  const getDeviceIcon = (device: typeof previewDevice) => {\n    switch (device) {\n      case \"mobile\": return Smartphone;\n      case \"tablet\": return Tablet;\n      case \"desktop\": return Monitor;\n      default: return Monitor;\n    }\n  };\n\n  const getCategoryColor = (category: Widget[\"category\"]) => {\n    switch (category) {\n      case \"content\": return \"bg-blue-500\";\n      case \"engagement\": return \"bg-green-500\";\n      case \"utility\": return \"bg-purple-500\";\n      case \"social\": return \"bg-orange-500\";\n      default: return \"bg-gray-500\";\n    }\n  };\n\n  const WidgetLibrary = () => (\n    <div className=\"space-y-6\">\n      {/* Categories */}\n      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n        {[\"content\", \"engagement\", \"utility\", \"social\"].map((category) => {\n          const categoryWidgets = widgetLibrary.filter(w => w.category === category);\n          const activeCount = categoryWidgets.filter(w => w.isActive).length;\n          \n          return (\n            <Card key={category} className=\"text-center\">\n              <CardContent className=\"p-4\">\n                <div className={`w-12 h-12 rounded-lg ${getCategoryColor(category as Widget[\"category\"])} mx-auto mb-3 flex items-center justify-center`}>\n                  <Layout className=\"w-6 h-6 text-white\" />\n                </div>\n                <h3 className=\"font-medium capitalize mb-1\">{category}</h3>\n                <p className=\"text-sm text-muted-foreground\">{activeCount}/{categoryWidgets.length} active</p>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n\n      {/* Widget List */}\n      <div className=\"space-y-4\">\n        {[\"content\", \"engagement\", \"utility\", \"social\"].map((category) => {\n          const categoryWidgets = widgetLibrary.filter(w => w.category === category);\n          \n          return (\n            <Card key={category}>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2 capitalize\">\n                  <div className={`w-4 h-4 rounded ${getCategoryColor(category as Widget[\"category\"])}`} />\n                  {category} Widgets\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  {categoryWidgets.map((widget) => {\n                    const IconComponent = widget.icon;\n                    return (\n                      <Card \n                        key={widget.id}\n                        className={`cursor-move transition-all hover:shadow-md ${\n                          draggedWidget === widget.id ? 'opacity-50' : ''\n                        } ${!widget.isActive ? 'opacity-60' : ''}`}\n                        draggable={widget.isActive}\n                        onDragStart={(e) => widget.isActive && handleWidgetDragStart(e, widget.id)}\n                        data-testid={`widget-${widget.id}`}\n                      >\n                        <CardContent className=\"p-4\">\n                          <div className=\"flex items-start gap-3\">\n                            <div className=\"flex-shrink-0\">\n                              <IconComponent className=\"w-8 h-8 text-primary\" />\n                            </div>\n                            \n                            <div className=\"flex-1 min-w-0\">\n                              <div className=\"flex items-center gap-2 mb-1\">\n                                <h4 className=\"font-medium truncate\">{widget.name}</h4>\n                                <Switch\n                                  checked={widget.isActive}\n                                  onCheckedChange={() => toggleWidget(widget.id)}\n                                  data-testid={`toggle-${widget.id}`}\n                                />\n                              </div>\n                              <p className=\"text-sm text-muted-foreground mb-2\">{widget.description}</p>\n                              \n                              {widget.isActive && (\n                                <div className=\"flex gap-1\">\n                                  <Button\n                                    variant=\"ghost\"\n                                    size=\"sm\"\n                                    onClick={() => setSelectedWidget(widget.id)}\n                                    data-testid={`settings-${widget.id}`}\n                                  >\n                                    <Settings className=\"w-3 h-3 mr-1\" />\n                                    Settings\n                                  </Button>\n                                </div>\n                              )}\n                            </div>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    );\n                  })}\n                </div>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n    </div>\n  );\n\n  const LayoutZones = () => (\n    <div className=\"space-y-6\">\n      {/* Zone Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        {layoutZones.map((zone) => (\n          <Card key={zone.id} className={!zone.isActive ? 'opacity-60' : ''}>\n            <CardContent className=\"p-4 text-center\">\n              <Sidebar className=\"w-8 h-8 mx-auto mb-2 text-primary\" />\n              <h3 className=\"font-medium mb-1\">{zone.name}</h3>\n              <p className=\"text-sm text-muted-foreground mb-2\">\n                {zone.widgets.length}/{zone.maxWidgets} widgets\n              </p>\n              <Switch\n                checked={zone.isActive}\n                onCheckedChange={() => toggleZone(zone.id)}\n                data-testid={`toggle-zone-${zone.id}`}\n              />\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Zone Management */}\n      <div className=\"space-y-4\">\n        {layoutZones.map((zone) => (\n          <Card key={zone.id} className={!zone.isActive ? 'opacity-60' : ''}>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Sidebar className=\"w-4 h-4\" />\n                    {zone.name}\n                    <Badge variant=\"secondary\">\n                      {zone.widgets.length}/{zone.maxWidgets}\n                    </Badge>\n                  </CardTitle>\n                  <p className=\"text-sm text-muted-foreground mt-1\">{zone.description}</p>\n                </div>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setSelectedZone(selectedZone === zone.id ? null : zone.id)}\n                  data-testid={`configure-zone-${zone.id}`}\n                >\n                  <Settings className=\"w-4 h-4 mr-1\" />\n                  Configure\n                </Button>\n              </div>\n            </CardHeader>\n            \n            <CardContent>\n              {/* Responsive Settings */}\n              {selectedZone === zone.id && (\n                <div className=\"mb-4 p-4 border rounded-lg bg-muted/30\">\n                  <h4 className=\"font-medium mb-3\">Device Visibility</h4>\n                  <div className=\"grid grid-cols-3 gap-4\">\n                    {Object.entries(zone.responsive).map(([device, enabled]) => {\n                      const DeviceIcon = getDeviceIcon(device as keyof LayoutZone[\"responsive\"]);\n                      return (\n                        <div key={device} className=\"flex items-center gap-2\">\n                          <DeviceIcon className=\"w-4 h-4\" />\n                          <span className=\"capitalize text-sm\">{device}</span>\n                          <Switch\n                            checked={enabled}\n                            onCheckedChange={(checked) => updateZoneResponsive(zone.id, device as keyof LayoutZone[\"responsive\"], checked)}\n                            data-testid={`responsive-${zone.id}-${device}`}\n                          />\n                        </div>\n                      );\n                    })}\n                  </div>\n                </div>\n              )}\n\n              {/* Drop Zone */}\n              <div \n                className={`min-h-32 border-2 border-dashed rounded-lg p-4 transition-colors ${\n                  draggedWidget ? 'border-primary bg-primary/5' : 'border-muted-foreground/25'\n                } ${zone.widgets.length >= zone.maxWidgets ? 'opacity-50' : ''}`}\n                onDragOver={handleZoneDragOver}\n                onDrop={(e) => handleZoneDrop(e, zone.id)}\n                data-testid={`drop-zone-${zone.id}`}\n              >\n                {zone.widgets.length === 0 ? (\n                  <div className=\"text-center text-muted-foreground\">\n                    <Plus className=\"w-8 h-8 mx-auto mb-2\" />\n                    <p>Drag widgets here</p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-2\">\n                    {zone.widgets.map((widgetId, index) => {\n                      const widget = widgetLibrary.find(w => w.id === widgetId);\n                      if (!widget) return null;\n                      \n                      const IconComponent = widget.icon;\n                      return (\n                        <div \n                          key={widgetId}\n                          className=\"flex items-center gap-3 p-3 bg-background border rounded-lg hover:shadow-sm\"\n                          data-testid={`zone-widget-${widgetId}`}\n                        >\n                          <GripVertical className=\"w-4 h-4 text-muted-foreground\" />\n                          <IconComponent className=\"w-4 h-4 text-primary\" />\n                          <span className=\"flex-1 font-medium\">{widget.name}</span>\n                          \n                          <div className=\"flex items-center gap-1\">\n                            <Button\n                              variant=\"ghost\"\n                              size=\"icon\"\n                              className=\"w-6 h-6\"\n                              onClick={() => reorderWidgetInZone(zone.id, widgetId, \"up\")}\n                              disabled={index === 0}\n                              data-testid={`move-up-${widgetId}`}\n                            >\n                              <ChevronUp className=\"w-3 h-3\" />\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"icon\"\n                              className=\"w-6 h-6\"\n                              onClick={() => reorderWidgetInZone(zone.id, widgetId, \"down\")}\n                              disabled={index === zone.widgets.length - 1}\n                              data-testid={`move-down-${widgetId}`}\n                            >\n                              <ChevronDown className=\"w-3 h-3\" />\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"icon\"\n                              className=\"w-6 h-6\"\n                              onClick={() => removeWidgetFromZone(zone.id, widgetId)}\n                              data-testid={`remove-${widgetId}`}\n                            >\n                              <Trash2 className=\"w-3 h-3\" />\n                            </Button>\n                          </div>\n                        </div>\n                      );\n                    })}\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    </div>\n  );\n\n  const WidgetSettings = () => {\n    const widget = selectedWidget ? widgetLibrary.find(w => w.id === selectedWidget) : null;\n    \n    if (!widget) {\n      return (\n        <div className=\"text-center py-12\">\n          <Settings className=\"w-12 h-12 mx-auto mb-4 text-muted-foreground\" />\n          <h3 className=\"text-lg font-medium mb-2\">No Widget Selected</h3>\n          <p className=\"text-muted-foreground\">Select a widget from the library to configure its settings</p>\n        </div>\n      );\n    }\n\n    const IconComponent = widget.icon;\n\n    return (\n      <div className=\"space-y-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <IconComponent className=\"w-5 h-5\" />\n              {widget.name} Settings\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {/* Common Settings */}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"widget-title\">Widget Title</Label>\n              <Input\n                id=\"widget-title\"\n                value={widget.settings.title || widget.name}\n                onChange={(e) => updateWidgetSetting(widget.id, \"title\", e.target.value)}\n                data-testid=\"widget-title\"\n              />\n            </div>\n\n            {/* Widget-specific Settings */}\n            {widget.type === \"recent-posts\" && (\n              <>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"posts-count\">Number of Posts</Label>\n                    <Select \n                      value={widget.settings.count?.toString()} \n                      onValueChange={(value) => updateWidgetSetting(widget.id, \"count\", parseInt(value))}\n                    >\n                      <SelectTrigger data-testid=\"posts-count\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"3\">3 posts</SelectItem>\n                        <SelectItem value=\"5\">5 posts</SelectItem>\n                        <SelectItem value=\"10\">10 posts</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n                \n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <Label>Show Thumbnails</Label>\n                    <Switch\n                      checked={widget.settings.showThumbnails}\n                      onCheckedChange={(checked) => updateWidgetSetting(widget.id, \"showThumbnails\", checked)}\n                      data-testid=\"show-thumbnails\"\n                    />\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <Label>Show Date</Label>\n                    <Switch\n                      checked={widget.settings.showDate}\n                      onCheckedChange={(checked) => updateWidgetSetting(widget.id, \"showDate\", checked)}\n                      data-testid=\"show-date\"\n                    />\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <Label>Show Excerpt</Label>\n                    <Switch\n                      checked={widget.settings.showExcerpt}\n                      onCheckedChange={(checked) => updateWidgetSetting(widget.id, \"showExcerpt\", checked)}\n                      data-testid=\"show-excerpt\"\n                    />\n                  </div>\n                </div>\n              </>\n            )}\n\n            {widget.type === \"search\" && (\n              <>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"search-placeholder\">Placeholder Text</Label>\n                  <Input\n                    id=\"search-placeholder\"\n                    value={widget.settings.placeholder}\n                    onChange={(e) => updateWidgetSetting(widget.id, \"placeholder\", e.target.value)}\n                    data-testid=\"search-placeholder\"\n                  />\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <Label>Show Categories Filter</Label>\n                  <Switch\n                    checked={widget.settings.showCategories}\n                    onCheckedChange={(checked) => updateWidgetSetting(widget.id, \"showCategories\", checked)}\n                    data-testid=\"show-categories\"\n                  />\n                </div>\n              </>\n            )}\n\n            {widget.type === \"newsletter\" && (\n              <>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"newsletter-description\">Description</Label>\n                  <Textarea\n                    id=\"newsletter-description\"\n                    value={widget.settings.description}\n                    onChange={(e) => updateWidgetSetting(widget.id, \"description\", e.target.value)}\n                    className=\"h-20\"\n                    data-testid=\"newsletter-description\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"button-text\">Button Text</Label>\n                  <Input\n                    id=\"button-text\"\n                    value={widget.settings.buttonText}\n                    onChange={(e) => updateWidgetSetting(widget.id, \"buttonText\", e.target.value)}\n                    data-testid=\"button-text\"\n                  />\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <Label>Show Privacy Note</Label>\n                  <Switch\n                    checked={widget.settings.showPrivacyNote}\n                    onCheckedChange={(checked) => updateWidgetSetting(widget.id, \"showPrivacyNote\", checked)}\n                    data-testid=\"show-privacy-note\"\n                  />\n                </div>\n              </>\n            )}\n\n            {widget.type === \"social-feed\" && (\n              <>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"social-platform\">Platform</Label>\n                  <Select \n                    value={widget.settings.platform} \n                    onValueChange={(value) => updateWidgetSetting(widget.id, \"platform\", value)}\n                  >\n                    <SelectTrigger data-testid=\"social-platform\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"twitter\">Twitter</SelectItem>\n                      <SelectItem value=\"instagram\">Instagram</SelectItem>\n                      <SelectItem value=\"linkedin\">LinkedIn</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"feed-count\">Number of Posts</Label>\n                  <Select \n                    value={widget.settings.count?.toString()} \n                    onValueChange={(value) => updateWidgetSetting(widget.id, \"count\", parseInt(value))}\n                  >\n                    <SelectTrigger data-testid=\"feed-count\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"1\">1 post</SelectItem>\n                      <SelectItem value=\"3\">3 posts</SelectItem>\n                      <SelectItem value=\"5\">5 posts</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    );\n  };\n\n  const PreviewPanel = () => (\n    <div className=\"space-y-4\">\n      {/* Device Controls */}\n      <div className=\"flex items-center justify-between\">\n        <h3 className=\"font-medium\">Layout Preview</h3>\n        <div className=\"flex items-center gap-1 border rounded-lg p-1\">\n          {([\"mobile\", \"tablet\", \"desktop\"] as const).map((device) => {\n            const DeviceIcon = getDeviceIcon(device);\n            return (\n              <Button\n                key={device}\n                variant={previewDevice === device ? \"default\" : \"ghost\"}\n                size=\"sm\"\n                onClick={() => setPreviewDevice(device)}\n                data-testid={`preview-${device}`}\n              >\n                <DeviceIcon className=\"w-4 h-4\" />\n              </Button>\n            );\n          })}\n        </div>\n      </div>\n\n      {/* Preview Layout */}\n      <div className=\"border rounded-lg p-4 bg-muted/30\">\n        <div className={`transition-all duration-300 ${\n          previewDevice === \"mobile\" ? \"max-w-sm mx-auto\" :\n          previewDevice === \"tablet\" ? \"max-w-2xl mx-auto\" : \"w-full\"\n        }`}>\n          <div className=\"bg-background border rounded-lg overflow-hidden min-h-96\">\n            {/* Preview content based on device */}\n            <div className={`grid gap-4 p-4 ${\n              previewDevice === \"desktop\" ? \"grid-cols-4\" :\n              previewDevice === \"tablet\" ? \"grid-cols-3\" : \"grid-cols-1\"\n            }`}>\n              {/* Main Content Area */}\n              <div className={`${\n                previewDevice === \"desktop\" ? \"col-span-2\" :\n                previewDevice === \"tablet\" ? \"col-span-2\" : \"col-span-1\"\n              } bg-muted/30 rounded-lg p-4 h-48 flex items-center justify-center`}>\n                <span className=\"text-muted-foreground\">Main Content</span>\n              </div>\n\n              {/* Sidebars */}\n              {layoutZones\n                .filter(zone => zone.isActive && zone.responsive[previewDevice])\n                .map((zone) => (\n                  <div key={zone.id} className=\"space-y-2\">\n                    <h4 className=\"text-sm font-medium\">{zone.name}</h4>\n                    <div className=\"space-y-2\">\n                      {zone.widgets.map((widgetId) => {\n                        const widget = widgetLibrary.find(w => w.id === widgetId);\n                        if (!widget || !widget.isActive) return null;\n                        \n                        const IconComponent = widget.icon;\n                        return (\n                          <div key={widgetId} className=\"bg-background border rounded p-3\">\n                            <div className=\"flex items-center gap-2 mb-2\">\n                              <IconComponent className=\"w-4 h-4 text-primary\" />\n                              <span className=\"text-sm font-medium\">{widget.settings.title || widget.name}</span>\n                            </div>\n                            <div className=\"h-8 bg-muted/50 rounded text-xs flex items-center justify-center text-muted-foreground\">\n                              Widget Content\n                            </div>\n                          </div>\n                        );\n                      })}\n                    </div>\n                  </div>\n                ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  return (\n    <Page data-testid=\"widgets-manager-page\">\n      <PageHeader>\n        <div className=\"px-4 md:px-6\">\n          <PageToolbar>\n            <PageTitle>\n              Sidebars & Widgets\n            </PageTitle>\n            <PageActions>\n              <div className=\"hidden md:flex items-center gap-2\">\n                <Button \n                  variant=\"outline\" \n                  onClick={handlePreview}\n                  data-testid=\"preview-widgets\"\n                >\n                  <Eye className=\"h-4 w-4 mr-2\" />\n                  Preview\n                </Button>\n                {isDirty && (\n                  <Button onClick={handleSave} data-testid=\"save-widgets-desktop\">\n                    <Save className=\"h-4 w-4 mr-2\" />\n                    Save Layout\n                  </Button>\n                )}\n              </div>\n            </PageActions>\n          </PageToolbar>\n        </div>\n      </PageHeader>\n\n      <PageBody className=\"px-4 md:px-6\">\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n          <TabsList className=\"w-full max-w-lg\">\n            <TabsTrigger value=\"library\" className=\"flex items-center gap-2\">\n              <Layout className=\"h-4 w-4\" />\n              Widget Library\n            </TabsTrigger>\n            <TabsTrigger value=\"zones\" className=\"flex items-center gap-2\">\n              <Sidebar className=\"h-4 w-4\" />\n              Layout Zones\n            </TabsTrigger>\n            <TabsTrigger value=\"settings\" className=\"flex items-center gap-2\">\n              <Settings className=\"h-4 w-4\" />\n              Settings\n            </TabsTrigger>\n            <TabsTrigger value=\"preview\" className=\"flex items-center gap-2\">\n              <Eye className=\"h-4 w-4\" />\n              Preview\n            </TabsTrigger>\n          </TabsList>\n          \n          <TabsContent value=\"library\">\n            <WidgetLibrary />\n          </TabsContent>\n          \n          <TabsContent value=\"zones\">\n            <LayoutZones />\n          </TabsContent>\n          \n          <TabsContent value=\"settings\">\n            <WidgetSettings />\n          </TabsContent>\n          \n          <TabsContent value=\"preview\">\n            <PreviewPanel />\n          </TabsContent>\n        </Tabs>\n      </PageBody>\n\n      {/* Mobile Action Bar */}\n      <ActionBar show={isDirty}>\n        <span className=\"text-sm\">Unsaved changes</span>\n        <div className=\"flex gap-2\">\n          <Button onClick={handlePreview} size=\"sm\" variant=\"outline\" data-testid=\"preview-widgets-mobile\">\n            <Eye className=\"h-4 w-4 mr-1\" />\n            Preview\n          </Button>\n          <Button onClick={handleSave} size=\"sm\" data-testid=\"save-widgets-mobile\">\n            <Save className=\"h-4 w-4 mr-1\" />\n            Save\n          </Button>\n        </div>\n      </ActionBar>\n    </Page>\n  );\n}","size_bytes":35006},"client/src/components/ui/rich-text-editor.tsx":{"content":"import { useEditor, EditorContent } from '@tiptap/react';\nimport StarterKit from '@tiptap/starter-kit';\nimport { TextStyle } from '@tiptap/extension-text-style';\nimport { Color } from '@tiptap/extension-color';\nimport Highlight from '@tiptap/extension-highlight';\nimport Link from '@tiptap/extension-link';\nimport Image from '@tiptap/extension-image';\nimport { Table } from '@tiptap/extension-table';\nimport { TableRow } from '@tiptap/extension-table-row';\nimport { TableHeader } from '@tiptap/extension-table-header';\nimport { TableCell } from '@tiptap/extension-table-cell';\nimport { Button } from '@/components/ui/button';\nimport { Separator } from '@/components/ui/separator';\nimport { cn } from '@/lib/utils';\nimport {\n  Bold,\n  Italic,\n  Underline,\n  Strikethrough,\n  Code,\n  Heading1,\n  Heading2,\n  Heading3,\n  List,\n  ListOrdered,\n  Quote,\n  Undo,\n  Redo,\n  Link as LinkIcon,\n  Image as ImageIcon,\n  Table as TableIcon,\n  AlignLeft,\n  AlignCenter,\n  AlignRight,\n  AlignJustify,\n} from 'lucide-react';\nimport { forwardRef, useImperativeHandle } from 'react';\n\nexport interface RichTextEditorRef {\n  getHTML: () => string;\n  getText: () => string;\n  setContent: (content: string) => void;\n  focus: () => void;\n}\n\ninterface RichTextEditorProps {\n  content?: string;\n  placeholder?: string;\n  onChange?: (content: string) => void;\n  className?: string;\n  editorClassName?: string;\n  showToolbar?: boolean;\n}\n\nconst RichTextEditor = forwardRef<RichTextEditorRef, RichTextEditorProps>(\n  ({ \n    content = '',\n    placeholder = 'Start writing...',\n    onChange,\n    className,\n    editorClassName,\n    showToolbar = true\n  }, ref) => {\n    const editor = useEditor({\n      extensions: [\n        StarterKit.configure({\n          // Disable the built-in Link extension to avoid conflicts\n          link: false,\n          bulletList: {\n            keepMarks: true,\n            keepAttributes: false,\n          },\n          orderedList: {\n            keepMarks: true,\n            keepAttributes: false,\n          },\n        }),\n        TextStyle,\n        Color,\n        Highlight.configure({ multicolor: true }),\n        Link.configure({\n          openOnClick: false,\n          HTMLAttributes: {\n            class: 'text-primary underline cursor-pointer',\n          },\n        }),\n        Image.configure({\n          HTMLAttributes: {\n            class: 'max-w-full h-auto rounded-md',\n          },\n        }),\n        Table.configure({\n          resizable: true,\n        }),\n        TableRow,\n        TableHeader,\n        TableCell,\n      ],\n      content,\n      editorProps: {\n        attributes: {\n          class: cn(\n            'prose prose-sm sm:prose-base lg:prose-lg xl:prose-xl mx-auto focus:outline-none max-w-none',\n            'prose-headings:font-medium prose-headings:text-foreground',\n            'prose-p:text-foreground prose-p:leading-relaxed',\n            'prose-a:text-primary prose-a:no-underline hover:prose-a:underline',\n            'prose-strong:text-foreground prose-em:text-foreground',\n            'prose-code:text-foreground prose-code:bg-muted prose-code:px-1 prose-code:py-0.5 prose-code:rounded prose-code:before:content-none prose-code:after:content-none',\n            'prose-pre:bg-muted prose-pre:text-foreground',\n            'prose-blockquote:text-foreground prose-blockquote:border-l-border',\n            'prose-hr:border-border',\n            'prose-ul:text-foreground prose-ol:text-foreground prose-li:text-foreground',\n            'prose-table:text-foreground prose-thead:text-foreground prose-tbody:text-foreground',\n            'prose-th:border-border prose-td:border-border',\n            'min-h-[200px] px-3 py-2',\n            editorClassName\n          ),\n        },\n      },\n      onUpdate: ({ editor }) => {\n        onChange?.(editor.getHTML());\n      },\n    });\n\n    useImperativeHandle(ref, () => ({\n      getHTML: () => editor?.getHTML() || '',\n      getText: () => editor?.getText() || '',\n      setContent: (content: string) => editor?.commands.setContent(content),\n      focus: () => editor?.commands.focus(),\n    }));\n\n    if (!editor) {\n      return null;\n    }\n\n    const ToolbarButton = ({ \n      onClick, \n      isActive = false, \n      disabled = false, \n      children,\n      title \n    }: {\n      onClick: () => void;\n      isActive?: boolean;\n      disabled?: boolean;\n      children: React.ReactNode;\n      title?: string;\n    }) => (\n      <Button\n        variant={isActive ? \"default\" : \"ghost\"}\n        size=\"sm\"\n        onClick={onClick}\n        disabled={disabled}\n        title={title}\n        className={cn(\n          \"h-9 w-9 p-0 min-w-[36px] min-h-[36px] md:h-8 md:w-8 mobile-touch-target\",\n          \"transition-all duration-150 hover:scale-105 active:scale-95\",\n          isActive && \"bg-primary text-primary-foreground\"\n        )}\n      >\n        {children}\n      </Button>\n    );\n\n    const setLink = () => {\n      const previousUrl = editor.getAttributes('link').href;\n      const url = window.prompt('URL', previousUrl);\n\n      if (url === null) {\n        return;\n      }\n\n      if (url === '') {\n        editor.chain().focus().extendMarkRange('link').unsetLink().run();\n        return;\n      }\n\n      editor.chain().focus().extendMarkRange('link').setLink({ href: url }).run();\n    };\n\n    const addImage = () => {\n      const url = window.prompt('Image URL');\n      if (url) {\n        editor.chain().focus().setImage({ src: url }).run();\n      }\n    };\n\n    const insertTable = () => {\n      editor.chain().focus().insertTable({ rows: 3, cols: 3, withHeaderRow: true }).run();\n    };\n\n    return (\n      <div className={cn(\"border border-input bg-background rounded-md\", className)}>\n        {showToolbar && (\n          <div className=\"border-b border-border p-2 space-y-2\">\n            {/* Primary Toolbar - Most used tools (always visible) */}\n            <div className=\"flex flex-wrap items-center gap-1\">\n              {/* Text Formatting */}\n              <ToolbarButton\n                onClick={() => editor.chain().focus().toggleBold().run()}\n                isActive={editor.isActive('bold')}\n                title=\"Bold\"\n              >\n                <Bold className=\"h-4 w-4\" />\n              </ToolbarButton>\n              \n              <ToolbarButton\n                onClick={() => editor.chain().focus().toggleItalic().run()}\n                isActive={editor.isActive('italic')}\n                title=\"Italic\"\n              >\n                <Italic className=\"h-4 w-4\" />\n              </ToolbarButton>\n              \n              <Separator orientation=\"vertical\" className=\"h-8 mx-1 hidden md:block\" />\n\n              {/* Headings */}\n              <ToolbarButton\n                onClick={() => editor.chain().focus().toggleHeading({ level: 2 }).run()}\n                isActive={editor.isActive('heading', { level: 2 })}\n                title=\"Heading\"\n              >\n                <Heading2 className=\"h-4 w-4\" />\n              </ToolbarButton>\n              \n              {/* Lists */}\n              <ToolbarButton\n                onClick={() => editor.chain().focus().toggleBulletList().run()}\n                isActive={editor.isActive('bulletList')}\n                title=\"Bullet List\"\n              >\n                <List className=\"h-4 w-4\" />\n              </ToolbarButton>\n              \n              <ToolbarButton\n                onClick={() => editor.chain().focus().toggleOrderedList().run()}\n                isActive={editor.isActive('orderedList')}\n                title=\"Numbered List\"\n              >\n                <ListOrdered className=\"h-4 w-4\" />\n              </ToolbarButton>\n\n              <Separator orientation=\"vertical\" className=\"h-8 mx-1 hidden md:block\" />\n              \n              {/* Links and Media */}\n              <ToolbarButton\n                onClick={setLink}\n                isActive={editor.isActive('link')}\n                title=\"Add Link\"\n              >\n                <LinkIcon className=\"h-4 w-4\" />\n              </ToolbarButton>\n              \n              <ToolbarButton\n                onClick={addImage}\n                title=\"Add Image\"\n              >\n                <ImageIcon className=\"h-4 w-4\" />\n              </ToolbarButton>\n\n              <Separator orientation=\"vertical\" className=\"h-8 mx-1 hidden md:block\" />\n\n              {/* Undo/Redo */}\n              <ToolbarButton\n                onClick={() => editor.chain().focus().undo().run()}\n                disabled={!editor.can().undo()}\n                title=\"Undo\"\n              >\n                <Undo className=\"h-4 w-4\" />\n              </ToolbarButton>\n              \n              <ToolbarButton\n                onClick={() => editor.chain().focus().redo().run()}\n                disabled={!editor.can().redo()}\n                title=\"Redo\"\n              >\n                <Redo className=\"h-4 w-4\" />\n              </ToolbarButton>\n            </div>\n\n            {/* Secondary Toolbar - Additional formatting (collapsible on mobile) */}\n            <div className=\"hidden md:flex flex-wrap items-center gap-1 pt-1\">\n              <ToolbarButton\n                onClick={() => editor.chain().focus().toggleStrike().run()}\n                isActive={editor.isActive('strike')}\n                title=\"Strikethrough\"\n              >\n                <Strikethrough className=\"h-4 w-4\" />\n              </ToolbarButton>\n              \n              <ToolbarButton\n                onClick={() => editor.chain().focus().toggleCode().run()}\n                isActive={editor.isActive('code')}\n                title=\"Code\"\n              >\n                <Code className=\"h-4 w-4\" />\n              </ToolbarButton>\n\n              <Separator orientation=\"vertical\" className=\"h-8 mx-1\" />\n\n              <ToolbarButton\n                onClick={() => editor.chain().focus().toggleHeading({ level: 1 }).run()}\n                isActive={editor.isActive('heading', { level: 1 })}\n                title=\"Heading 1\"\n              >\n                <Heading1 className=\"h-4 w-4\" />\n              </ToolbarButton>\n              \n              <ToolbarButton\n                onClick={() => editor.chain().focus().toggleHeading({ level: 3 }).run()}\n                isActive={editor.isActive('heading', { level: 3 })}\n                title=\"Heading 3\"\n              >\n                <Heading3 className=\"h-4 w-4\" />\n              </ToolbarButton>\n\n              <Separator orientation=\"vertical\" className=\"h-8 mx-1\" />\n              \n              <ToolbarButton\n                onClick={() => editor.chain().focus().toggleBlockquote().run()}\n                isActive={editor.isActive('blockquote')}\n                title=\"Quote\"\n              >\n                <Quote className=\"h-4 w-4\" />\n              </ToolbarButton>\n              \n              <ToolbarButton\n                onClick={insertTable}\n                title=\"Insert Table\"\n              >\n                <TableIcon className=\"h-4 w-4\" />\n              </ToolbarButton>\n            </div>\n          </div>\n        )}\n        \n        <EditorContent editor={editor} />\n      </div>\n    );\n  }\n);\n\nRichTextEditor.displayName = \"RichTextEditor\";\n\nexport { RichTextEditor };","size_bytes":11153},"scripts/seed-data.ts":{"content":"import { db } from \"../server/db\";\nimport { storage } from \"../server/storage\";\n\nasync function seedDatabase() {\n  try {\n    console.log(\"🌱 Starting database seeding...\");\n\n    // Create admin user first\n    console.log(\"📝 Creating admin user...\");\n    const adminUser = await storage.createUser({\n      username: \"admin\",\n      password: \"admin123\", // This will be hashed automatically\n      email: \"admin@penkora.local\", \n      role: \"admin\",\n      displayName: \"Administrator\"\n    });\n    console.log(\"✅ Admin user created:\", adminUser.username);\n\n    // Create editor user\n    console.log(\"📝 Creating editor user...\");\n    const editorUser = await storage.createUser({\n      username: \"editor\",\n      password: \"editor123\",\n      email: \"editor@penkora.local\",\n      role: \"editor\", \n      displayName: \"Content Editor\"\n    });\n    console.log(\"✅ Editor user created:\", editorUser.username);\n\n    // Create categories\n    console.log(\"📂 Creating categories...\");\n    const categories = await Promise.all([\n      storage.createCategory({\n        name: \"Technology\",\n        slug: \"technology\",\n        description: \"Latest tech trends and innovations\",\n        color: \"#3b82f6\"\n      }),\n      storage.createCategory({\n        name: \"Development\", \n        slug: \"development\",\n        description: \"Programming and software development\",\n        color: \"#10b981\"\n      }),\n      storage.createCategory({\n        name: \"Design\",\n        slug: \"design\", \n        description: \"UI/UX design and creative content\",\n        color: \"#8b5cf6\"\n      }),\n      storage.createCategory({\n        name: \"Business\",\n        slug: \"business\",\n        description: \"Business insights and strategies\",\n        color: \"#f59e0b\"\n      })\n    ]);\n    console.log(\"✅ Categories created:\", categories.length);\n\n    // Create tags\n    console.log(\"🏷️ Creating tags...\");\n    const tags = await Promise.all([\n      storage.createTag({ name: \"React\", slug: \"react\", color: \"#61dafb\" }),\n      storage.createTag({ name: \"TypeScript\", slug: \"typescript\", color: \"#3178c6\" }),\n      storage.createTag({ name: \"JavaScript\", slug: \"javascript\", color: \"#f7df1e\" }),\n      storage.createTag({ name: \"CSS\", slug: \"css\", color: \"#1572b6\" }),\n      storage.createTag({ name: \"HTML\", slug: \"html\", color: \"#e34f26\" }),\n      storage.createTag({ name: \"Node.js\", slug: \"nodejs\", color: \"#339933\" }),\n      storage.createTag({ name: \"Database\", slug: \"database\", color: \"#336791\" }),\n      storage.createTag({ name: \"Tutorial\", slug: \"tutorial\", color: \"#ff6b6b\" }),\n      storage.createTag({ name: \"Best Practices\", slug: \"best-practices\", color: \"#4ecdc4\" }),\n      storage.createTag({ name: \"Performance\", slug: \"performance\", color: \"#45b7d1\" })\n    ]);\n    console.log(\"✅ Tags created:\", tags.length);\n\n    // Create sample posts\n    console.log(\"📝 Creating sample posts...\");\n    const posts = [\n      {\n        title: \"Getting Started with React and TypeScript\",\n        slug: \"getting-started-react-typescript\",\n        content: `\n# Getting Started with React and TypeScript\n\nReact and TypeScript together provide a powerful combination for building modern web applications. This guide will walk you through setting up a new project and understanding the core concepts.\n\n## Why TypeScript with React?\n\nTypeScript brings static typing to JavaScript, which helps catch errors early and provides better IDE support. When combined with React, it makes component development more robust and maintainable.\n\n### Key Benefits:\n- **Type Safety**: Catch errors at compile time\n- **Better IntelliSense**: Enhanced autocomplete and refactoring\n- **Self-Documenting Code**: Types serve as inline documentation\n- **Easier Refactoring**: Confidence when changing code structure\n\n## Setting Up Your Project\n\n\\`\\`\\`bash\nnpx create-react-app my-app --template typescript\ncd my-app\nnpm start\n\\`\\`\\`\n\n## Your First TypeScript Component\n\n\\`\\`\\`tsx\ninterface Props {\n  name: string;\n  age?: number;\n}\n\nconst Welcome: React.FC<Props> = ({ name, age }) => {\n  return (\n    <div>\n      <h1>Welcome, {name}!</h1>\n      {age && <p>You are {age} years old.</p>}\n    </div>\n  );\n};\n\\`\\`\\`\n\nThis is just the beginning of your TypeScript React journey!\n        `,\n        excerpt: \"Learn how to set up a modern React project with TypeScript for better development experience and type safety.\",\n        status: \"published\",\n        categoryId: categories[1].id, // Development\n        publishedAt: new Date(\"2024-03-15\"),\n        meta: {\n          seoTitle: \"React TypeScript Tutorial - Complete Beginner's Guide\",\n          seoDescription: \"Complete guide to setting up React with TypeScript. Learn best practices, type safety, and modern development techniques.\",\n          keywords: [\"react\", \"typescript\", \"tutorial\", \"web development\"]\n        }\n      },\n      {\n        title: \"Advanced TypeScript Patterns for React Development\", \n        slug: \"advanced-typescript-patterns-react\",\n        content: `\n# Advanced TypeScript Patterns for React Development\n\nOnce you're comfortable with basic TypeScript in React, it's time to explore advanced patterns that can make your code more robust and maintainable.\n\n## Generic Components\n\n\\`\\`\\`tsx\ninterface ListProps<T> {\n  items: T[];\n  renderItem: (item: T) => React.ReactNode;\n}\n\nfunction List<T>({ items, renderItem }: ListProps<T>) {\n  return (\n    <ul>\n      {items.map((item, index) => (\n        <li key={index}>{renderItem(item)}</li>\n      ))}\n    </ul>\n  );\n}\n\\`\\`\\`\n\n## Conditional Props\n\n\\`\\`\\`tsx\ntype ButtonProps = \n  | { variant: 'primary'; onClick: () => void }\n  | { variant: 'link'; href: string };\n\nconst Button: React.FC<ButtonProps> = (props) => {\n  if (props.variant === 'primary') {\n    return <button onClick={props.onClick}>Click me</button>;\n  }\n  return <a href={props.href}>Navigate</a>;\n};\n\\`\\`\\`\n\nThese patterns help create more flexible and type-safe components.\n        `,\n        excerpt: \"Exploring advanced TypeScript features and design patterns for building better React applications.\",\n        status: \"published\", \n        categoryId: categories[1].id, // Development\n        publishedAt: new Date(\"2024-03-12\"),\n        meta: {\n          seoTitle: \"Advanced TypeScript Patterns for React - Expert Guide\",\n          seoDescription: \"Master advanced TypeScript patterns including generics, conditional types, and utility types for React development.\",\n          keywords: [\"typescript\", \"react\", \"advanced\", \"patterns\", \"generics\"]\n        }\n      },\n      {\n        title: \"Database Design Best Practices for Modern Applications\",\n        slug: \"database-design-best-practices\",\n        content: `\n# Database Design Best Practices for Modern Applications\n\nGood database design is the foundation of any successful application. Here are the essential principles and practices to follow.\n\n## Core Principles\n\n### 1. Normalization\n- Eliminate data redundancy\n- Ensure data integrity\n- Reduce storage space\n\n### 2. Proper Indexing\n\\`\\`\\`sql\n-- Index frequently queried columns\nCREATE INDEX idx_user_email ON users(email);\nCREATE INDEX idx_post_status ON posts(status, created_at);\n\\`\\`\\`\n\n### 3. Choose the Right Data Types\n- Use appropriate size for your data\n- Consider performance implications\n- Plan for future growth\n\n## Schema Design Tips\n\n1. **Use meaningful names**: Table and column names should be descriptive\n2. **Consistent naming conventions**: Stick to snake_case or camelCase throughout\n3. **Foreign key relationships**: Properly define relationships between tables\n4. **Constraints**: Use NOT NULL, UNIQUE, and CHECK constraints appropriately\n\n## Performance Considerations\n\n- Index frequently queried columns\n- Avoid over-indexing (impacts write performance)\n- Use EXPLAIN ANALYZE to optimize queries\n- Consider partitioning for large tables\n\nRemember: Good design upfront saves hours of refactoring later!\n        `,\n        excerpt: \"Learn how to design scalable and efficient database schemas with modern best practices and optimization techniques.\",\n        status: \"published\",\n        categoryId: categories[0].id, // Technology\n        publishedAt: new Date(\"2024-03-10\"),\n        meta: {\n          seoTitle: \"Database Design Best Practices - Complete Guide\",\n          seoDescription: \"Master database design with normalization, indexing, and performance optimization techniques for modern applications.\",\n          keywords: [\"database\", \"design\", \"sql\", \"optimization\", \"best practices\"]\n        }\n      },\n      {\n        title: \"Modern CSS Techniques: Grid, Flexbox, and Beyond\",\n        slug: \"modern-css-techniques\", \n        content: `\n# Modern CSS Techniques: Grid, Flexbox, and Beyond\n\nCSS has evolved tremendously. Let's explore modern layout techniques that make responsive design easier and more powerful.\n\n## CSS Grid Layout\n\n\\`\\`\\`css\n.container {\n  display: grid;\n  grid-template-columns: 1fr 2fr 1fr;\n  grid-template-rows: auto 1fr auto;\n  gap: 1rem;\n  min-height: 100vh;\n}\n\n.header { grid-column: 1 / -1; }\n.main { grid-column: 2; }\n.footer { grid-column: 1 / -1; }\n\\`\\`\\`\n\n## Flexbox for Components\n\n\\`\\`\\`css\n.card {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  padding: 1rem;\n  border-radius: 8px;\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\n}\n\n.card-actions {\n  margin-top: auto;\n  padding-top: 1rem;\n}\n\\`\\`\\`\n\n## CSS Custom Properties\n\n\\`\\`\\`css\n:root {\n  --primary-color: #3b82f6;\n  --text-color: #1f2937;\n  --spacing-unit: 0.5rem;\n}\n\n.button {\n  background: var(--primary-color);\n  color: white;\n  padding: calc(var(--spacing-unit) * 2) calc(var(--spacing-unit) * 4);\n}\n\\`\\`\\`\n\nThese techniques enable more maintainable and flexible designs!\n        `,\n        excerpt: \"CSS Grid, Flexbox, and modern layout techniques explained with practical examples for responsive web design.\",\n        status: \"published\",\n        categoryId: categories[2].id, // Design \n        publishedAt: new Date(\"2024-03-08\"),\n        meta: {\n          seoTitle: \"Modern CSS Techniques - Grid, Flexbox & More\",\n          seoDescription: \"Learn modern CSS layout techniques including Grid, Flexbox, and custom properties for responsive web design.\",\n          keywords: [\"css\", \"grid\", \"flexbox\", \"responsive\", \"modern\"]\n        }\n      },\n      {\n        title: \"Building Scalable APIs with Node.js and Express\",\n        slug: \"building-scalable-apis-nodejs-express\",\n        content: `\n# Building Scalable APIs with Node.js and Express\n\nCreating APIs that can handle growth requires careful planning and implementation. Here's how to build APIs that scale.\n\n## Project Structure\n\n\\`\\`\\`\nsrc/\n├── controllers/\n├── models/\n├── routes/\n├── middleware/\n├── services/\n├── utils/\n└── app.js\n\\`\\`\\`\n\n## Error Handling Middleware\n\n\\`\\`\\`javascript\nconst errorHandler = (err, req, res, next) => {\n  const statusCode = err.statusCode || 500;\n  const message = err.message || 'Internal Server Error';\n  \n  res.status(statusCode).json({\n    success: false,\n    error: message,\n    ...(process.env.NODE_ENV === 'development' && { stack: err.stack })\n  });\n};\n\\`\\`\\`\n\n## Input Validation\n\n\\`\\`\\`javascript\nconst { body, validationResult } = require('express-validator');\n\nconst validateUser = [\n  body('email').isEmail().normalizeEmail(),\n  body('password').isLength({ min: 6 }),\n  (req, res, next) => {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({ errors: errors.array() });\n    }\n    next();\n  }\n];\n\\`\\`\\`\n\n## Rate Limiting\n\n\\`\\`\\`javascript\nconst rateLimit = require('express-rate-limit');\n\nconst limiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // limit each IP to 100 requests per windowMs\n  message: 'Too many requests, please try again later.'\n});\n\napp.use('/api/', limiter);\n\\`\\`\\`\n\nBuilding for scale from the beginning saves refactoring pain later!\n        `,\n        excerpt: \"Build robust and scalable REST APIs using Node.js and Express with proper error handling, validation, and security.\",\n        status: \"draft\",\n        categoryId: categories[1].id, // Development\n        meta: {\n          seoTitle: \"Scalable Node.js API Development Guide\",\n          seoDescription: \"Learn to build scalable APIs with Node.js and Express including error handling, validation, and performance optimization.\",\n          keywords: [\"nodejs\", \"express\", \"api\", \"scalable\", \"backend\"]\n        }\n      },\n      {\n        title: \"The Future of Web Development: Trends to Watch in 2024\",\n        slug: \"future-web-development-2024-trends\",\n        content: `\n# The Future of Web Development: Trends to Watch in 2024\n\nWeb development continues to evolve rapidly. Here are the key trends shaping the future of our industry.\n\n## Key Trends\n\n### 1. WebAssembly (WASM) Adoption\n- Near-native performance in browsers\n- Support for multiple programming languages\n- Game-changing for computationally intensive applications\n\n### 2. Edge Computing\n- Reduced latency with edge servers\n- Better user experience globally\n- CDN evolution beyond static assets\n\n### 3. JAMstack Evolution\n- Static site generators becoming more powerful\n- Hybrid rendering approaches\n- Better developer experience tools\n\n### 4. AI-Powered Development\n- Code completion and generation\n- Automated testing and optimization\n- Design-to-code tools improving rapidly\n\n## Framework Landscape\n\n### React Ecosystem\n- Concurrent features stabilizing\n- Server Components gaining traction\n- Improved developer tools\n\n### Vue.js 3\n- Composition API adoption\n- Better TypeScript support\n- Performance improvements\n\n### Svelte/SvelteKit\n- Compile-time optimization\n- Simplified state management\n- Growing ecosystem\n\n## Performance Focus\n\n- Core Web Vitals importance growing\n- Progressive enhancement strategies\n- Bundle size optimization techniques\n\nThe future is exciting - stay curious and keep learning!\n        `,\n        excerpt: \"Exploring upcoming trends and technologies that will shape the future of web development in 2024 and beyond.\",\n        status: \"scheduled\",\n        categoryId: categories[0].id, // Technology\n        publishedAt: new Date(\"2024-03-25\"),\n        meta: {\n          seoTitle: \"Web Development Trends 2024 - Future Technologies\",\n          seoDescription: \"Discover the latest web development trends for 2024 including WebAssembly, edge computing, and AI-powered development tools.\",\n          keywords: [\"web development\", \"2024\", \"trends\", \"webassembly\", \"edge computing\"]\n        }\n      }\n    ];\n\n    const createdPosts = [];\n    for (const postData of posts) {\n      // Assign posts to different authors\n      const authorId = Math.random() > 0.5 ? adminUser.id : editorUser.id;\n      \n      // Select random tags (2-4 tags per post)\n      const selectedTags = tags\n        .sort(() => 0.5 - Math.random())\n        .slice(0, 2 + Math.floor(Math.random() * 3))\n        .map(tag => tag.id);\n\n      const post = await storage.createPost(postData, authorId, selectedTags);\n      createdPosts.push(post);\n      \n      // Add some view counts to published posts\n      if (postData.status === \"published\") {\n        const viewCount = Math.floor(Math.random() * 2000) + 100;\n        for (let i = 0; i < viewCount; i++) {\n          await storage.trackEvent(\"post_view\", post.id, \"post\");\n        }\n        // Update the view count in the post\n        await storage.incrementPostViews(post.id);\n      }\n    }\n    console.log(\"✅ Posts created:\", createdPosts.length);\n\n    // Create some sample media entries\n    console.log(\"🖼️ Creating sample media...\");\n    const mediaItems = [\n      {\n        filename: \"hero-image.jpg\",\n        originalName: \"hero-image.jpg\", \n        mimeType: \"image/jpeg\",\n        size: 245760,\n        url: \"/images/hero-image.jpg\",\n        alt: \"Hero section background image\",\n        caption: \"Modern workspace with laptop and coffee\"\n      },\n      {\n        filename: \"post-thumbnail.png\",\n        originalName: \"post-thumbnail.png\",\n        mimeType: \"image/png\", \n        size: 128000,\n        url: \"/images/post-thumbnail.png\",\n        alt: \"Blog post thumbnail\",\n        caption: \"Featured image for latest blog post\"\n      },\n      {\n        filename: \"user-avatar.jpg\",\n        originalName: \"user-avatar.jpg\",\n        mimeType: \"image/jpeg\",\n        size: 45000,\n        url: \"/images/user-avatar.jpg\", \n        alt: \"User profile avatar\",\n        caption: \"Profile picture\"\n      }\n    ];\n\n    for (const mediaData of mediaItems) {\n      await storage.createMedia(mediaData, adminUser.id);\n    }\n    console.log(\"✅ Media items created:\", mediaItems.length);\n\n    console.log(\"🎉 Database seeding completed successfully!\");\n    console.log(\"\\n📊 Summary:\");\n    console.log(`- Users: 2 (1 admin, 1 editor)`);\n    console.log(`- Categories: ${categories.length}`);\n    console.log(`- Tags: ${tags.length}`);\n    console.log(`- Posts: ${createdPosts.length}`);\n    console.log(`- Media: ${mediaItems.length}`);\n    console.log(\"\\n🔑 Login credentials:\");\n    console.log(\"Admin: username='admin', password='admin123'\");\n    console.log(\"Editor: username='editor', password='editor123'\");\n\n  } catch (error) {\n    console.error(\"❌ Database seeding failed:\", error);\n    throw error;\n  }\n}\n\n// Run the seeding\nif (import.meta.url === `file://${process.argv[1]}`) {\n  seedDatabase()\n    .then(() => {\n      console.log(\"✅ Seeding completed\");\n      process.exit(0);\n    })\n    .catch((error) => {\n      console.error(\"❌ Seeding failed:\", error);\n      process.exit(1);\n    });\n}\n\nexport { seedDatabase };","size_bytes":17567},"client/src/hooks/useDashboard.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\n// Hook to fetch dashboard statistics\nexport function useDashboardStats() {\n  return useQuery({\n    queryKey: ['/api/dashboard/stats'],\n    queryFn: async () => {\n      const response = await fetch('/api/dashboard/stats');\n      if (!response.ok) {\n        throw new Error('Failed to fetch dashboard stats');\n      }\n      return response.json();\n    },\n    enabled: true,\n    staleTime: 60000, // 1 minute\n    retry: 1,\n  });\n}\n\n// Hook to fetch popular posts for dashboard\nexport function usePopularPosts(limit = 5) {\n  return useQuery({\n    queryKey: ['/api/analytics/popular-posts', { limit }],\n    queryFn: async () => {\n      const response = await fetch(`/api/analytics/popular-posts?limit=${limit}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch popular posts');\n      }\n      return response.json();\n    },\n    enabled: true,\n    staleTime: 300000, // 5 minutes\n    retry: 1,\n  });\n}\n\n// Mock data for development (fallback when API fails)\nexport const mockDashboardStats = {\n  totalPosts: 124,\n  publishedPosts: 98, \n  totalCategories: 8,\n  totalTags: 24,\n  totalMedia: 56,\n  totalUsers: 12,\n  recentPosts: [\n    {\n      id: \"1\",\n      title: \"Getting Started with React and TypeScript\",\n      status: \"published\",\n      createdAt: \"2024-03-15T10:00:00Z\",\n      viewCount: 1247\n    },\n    {\n      id: \"2\", \n      title: \"Advanced TypeScript Patterns for React Development\",\n      status: \"published\",\n      createdAt: \"2024-03-12T10:00:00Z\", \n      viewCount: 856\n    },\n    {\n      id: \"3\",\n      title: \"Database Design Best Practices for Modern Applications\", \n      status: \"draft\",\n      createdAt: \"2024-03-10T10:00:00Z\",\n      viewCount: 0\n    },\n    {\n      id: \"4\",\n      title: \"Modern CSS Techniques: Grid, Flexbox, and Beyond\",\n      status: \"published\", \n      createdAt: \"2024-03-08T10:00:00Z\",\n      viewCount: 642\n    },\n    {\n      id: \"5\",\n      title: \"Building Scalable APIs with Node.js and Express\",\n      status: \"scheduled\",\n      createdAt: \"2024-03-06T10:00:00Z\",\n      viewCount: 0\n    }\n  ]\n};\n\nexport const mockPopularPosts = [\n  {\n    id: \"1\",\n    title: \"Getting Started with React and TypeScript\", \n    slug: \"getting-started-react-typescript\",\n    viewCount: 1247,\n    publishedAt: \"2024-03-15T10:00:00Z\"\n  },\n  {\n    id: \"2\",\n    title: \"Advanced TypeScript Patterns for React Development\",\n    slug: \"advanced-typescript-patterns-react\", \n    viewCount: 856,\n    publishedAt: \"2024-03-12T10:00:00Z\"\n  },\n  {\n    id: \"4\", \n    title: \"Modern CSS Techniques: Grid, Flexbox, and Beyond\",\n    slug: \"modern-css-techniques\",\n    viewCount: 642, \n    publishedAt: \"2024-03-08T10:00:00Z\"\n  },\n  {\n    id: \"6\",\n    title: \"The Future of Web Development: Trends to Watch in 2024\",\n    slug: \"future-web-development-2024-trends\",\n    viewCount: 534,\n    publishedAt: \"2024-03-05T10:00:00Z\"\n  }\n];","size_bytes":2904},"client/src/hooks/usePosts.ts":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport type { Post } from \"@shared/schema\";\n\n// Hook to fetch all posts with optional filters\nexport function usePosts(filters?: {\n  status?: string;\n  categoryId?: string;\n  authorId?: string;\n  limit?: number;\n  offset?: number;\n}) {\n  const queryParams = new URLSearchParams();\n  \n  if (filters?.status) queryParams.append('status', filters.status);\n  if (filters?.categoryId) queryParams.append('categoryId', filters.categoryId);\n  if (filters?.authorId) queryParams.append('authorId', filters.authorId);\n  if (filters?.limit) queryParams.append('limit', filters.limit.toString());\n  if (filters?.offset) queryParams.append('offset', filters.offset.toString());\n\n  const queryString = queryParams.toString();\n  const endpoint = queryString ? `/api/posts?${queryString}` : '/api/posts';\n\n  return useQuery({\n    queryKey: ['/api/posts', filters],\n    queryFn: async () => {\n      const response = await fetch(endpoint);\n      if (!response.ok) {\n        throw new Error('Failed to fetch posts');\n      }\n      return response.json();\n    },\n    enabled: true,\n    staleTime: 30000, // 30 seconds\n    retry: 1,\n  });\n}\n\n// Hook to fetch posts with detailed information (author, category)\nexport function usePostsWithDetails() {\n  return useQuery({\n    queryKey: ['/api/posts', { detailed: 'true' }],\n    queryFn: async () => {\n      const response = await fetch('/api/posts?detailed=true');\n      if (!response.ok) {\n        throw new Error('Failed to fetch posts with details');\n      }\n      return response.json();\n    },\n    enabled: true,\n    staleTime: 30000,\n    retry: 1,\n  });\n}\n\n// Hook to fetch a single post by ID\nexport function usePost(id: string) {\n  return useQuery({\n    queryKey: ['/api/posts', id],\n    queryFn: async () => {\n      const response = await fetch(`/api/posts/${id}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch post');\n      }\n      return response.json();\n    },\n    enabled: !!id,\n    staleTime: 30000,\n    retry: 1,\n  });\n}\n\n// Hook to create a new post\nexport function useCreatePost() {\n  return useMutation({\n    mutationFn: async (postData: any) => {\n      const response = await apiRequest('POST', '/api/posts', postData);\n      return response.json();\n    },\n    onSuccess: () => {\n      // Invalidate and refetch posts\n      queryClient.invalidateQueries({ queryKey: ['/api/posts'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/dashboard'] });\n    },\n  });\n}\n\n// Hook to update a post\nexport function useUpdatePost() {\n  return useMutation({\n    mutationFn: async ({ id, ...postData }: { id: string } & any) => {\n      const response = await apiRequest('PUT', `/api/posts/${id}`, postData);\n      return response.json();\n    },\n    onSuccess: (data, variables) => {\n      // Invalidate and refetch posts\n      queryClient.invalidateQueries({ queryKey: ['/api/posts'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/posts', variables.id] });\n      queryClient.invalidateQueries({ queryKey: ['/api/dashboard'] });\n    },\n  });\n}\n\n// Hook to delete a post\nexport function useDeletePost() {\n  return useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest('DELETE', `/api/posts/${id}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      // Invalidate and refetch posts\n      queryClient.invalidateQueries({ queryKey: ['/api/posts'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/dashboard'] });\n    },\n  });\n}\n\n// Mock data for development (fallback when API fails)\nexport const mockPosts = [\n  {\n    id: \"1\",\n    title: \"Getting Started with React and TypeScript\",\n    slug: \"getting-started-react-typescript\",\n    status: \"published\" as const,\n    author: {\n      id: \"1\",\n      username: \"admin\",\n      displayName: \"Administrator\",\n    },\n    category: {\n      id: \"1\", \n      name: \"Development\",\n      slug: \"development\",\n      color: \"#3b82f6\",\n    },\n    publishedAt: \"2024-03-15T10:00:00Z\",\n    createdAt: \"2024-03-15T10:00:00Z\",\n    viewCount: 1247,\n    excerpt: \"Learn how to set up a modern React project with TypeScript for better development experience and type safety.\",\n    content: \"Complete guide content here...\",\n    featured: true\n  },\n  {\n    id: \"2\",\n    title: \"Advanced TypeScript Patterns for React Development\",\n    slug: \"advanced-typescript-patterns-react\", \n    status: \"published\" as const,\n    author: {\n      id: \"2\",\n      username: \"editor\",\n      displayName: \"Content Editor\",\n    },\n    category: {\n      id: \"1\",\n      name: \"Development\", \n      slug: \"development\",\n      color: \"#3b82f6\",\n    },\n    publishedAt: \"2024-03-12T10:00:00Z\",\n    createdAt: \"2024-03-12T10:00:00Z\",\n    viewCount: 856,\n    excerpt: \"Exploring advanced TypeScript features and design patterns for building better React applications.\",\n    content: \"Advanced patterns content here...\",\n    featured: false\n  },\n  {\n    id: \"3\",\n    title: \"Database Design Best Practices for Modern Applications\",\n    slug: \"database-design-best-practices\",\n    status: \"draft\" as const,\n    author: {\n      id: \"1\",\n      username: \"admin\", \n      displayName: \"Administrator\",\n    },\n    category: {\n      id: \"2\",\n      name: \"Technology\",\n      slug: \"technology\", \n      color: \"#10b981\",\n    },\n    publishedAt: null,\n    createdAt: \"2024-03-10T10:00:00Z\",\n    viewCount: 0,\n    excerpt: \"Learn how to design scalable and efficient database schemas with modern best practices and optimization techniques.\",\n    content: \"Database design content here...\",\n    featured: false\n  }\n];","size_bytes":5666},"client/src/components/EditPostPage.tsx":{"content":"import { useParams } from \"wouter\";\nimport React, { useState } from \"react\";\nimport { usePost, useUpdatePost } from \"@/hooks/usePosts\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport NewPostPage from \"./NewPostPage\";\nimport { LoadingCard } from \"@/components/ui/loading\";\nimport { PostPreviewModal } from \"./PostPreviewModal\";\n\nexport default function EditPostPage() {\n  const { id } = useParams<{ id: string }>();\n  const { data: post, isLoading, error } = usePost(id || \"\");\n  const updateMutation = useUpdatePost();\n  const { toast } = useToast();\n  const [previewData, setPreviewData] = useState<any>(null);\n  const [isPreviewOpen, setIsPreviewOpen] = useState(false);\n\n  // Show error toast when error occurs\n  React.useEffect(() => {\n    if (error) {\n      toast({\n        title: \"Failed to load post\",\n        description: \"Unable to load the post for editing. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  }, [error, toast]);\n\n  // Handle form save (update)\n  const handleSave = React.useCallback(async (formData: any) => {\n    if (!id) return;\n    \n    try {\n      await updateMutation.mutateAsync({ id, ...formData });\n      toast({\n        title: \"Post updated\",\n        description: \"Your changes have been saved successfully.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Save failed\",\n        description: \"Failed to save your changes. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  }, [id, updateMutation, toast]);\n\n  // Handle form publish (update with published status)\n  const handlePublish = React.useCallback(async (formData: any) => {\n    if (!id) return;\n    \n    try {\n      await updateMutation.mutateAsync({ \n        id, \n        ...formData, \n        status: \"published\",\n        publishedAt: new Date().toISOString()\n      });\n      toast({\n        title: \"Post published\",\n        description: \"Your post has been published successfully.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Publish failed\", \n        description: \"Failed to publish your post. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  }, [id, updateMutation, toast]);\n\n  // Handle preview\n  const handlePreview = React.useCallback((formData: any) => {\n    setPreviewData(formData);\n    setIsPreviewOpen(true);\n  }, []);\n\n  // Transform post data for the form\n  const initialFormData = React.useMemo(() => {\n    if (!post) return undefined;\n    \n    return {\n      title: post.title || \"\",\n      content: post.content || \"\",\n      excerpt: post.excerpt || \"\",\n      category: post.categoryId || \"\",\n      tags: post.tags?.map((tag: any) => tag.name) || [],\n      status: post.status || \"draft\",\n      featured: post.featured || false,\n      allowComments: post.allowComments !== false, // Default to true\n      seoTitle: post.seoTitle || \"\",\n      seoDescription: post.seoDescription || \"\",\n      publishDate: post.publishedAt ? new Date(post.publishedAt).toISOString().split('T')[0] : \"\"\n    };\n  }, [post]);\n\n  // Show loading state\n  if (isLoading) {\n    return (\n      <div className=\"p-6 space-y-6\">\n        <div className=\"space-y-2\">\n          <div className=\"h-8 bg-muted animate-pulse rounded w-1/3\"></div>\n          <div className=\"h-4 bg-muted animate-pulse rounded w-1/2\"></div>\n        </div>\n        <LoadingCard />\n        <LoadingCard />\n      </div>\n    );\n  }\n\n  // Show error state\n  if (error) {\n    return (\n      <div className=\"p-6 text-center\">\n        <h1 className=\"text-2xl font-bold mb-2\">Post not found</h1>\n        <p className=\"text-muted-foreground\">\n          The post you're trying to edit could not be found.\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <NewPostPage\n        mode=\"edit\"\n        initialData={initialFormData}\n        onSave={handleSave}\n        onPublish={handlePublish}\n        onPreview={handlePreview}\n        isLoading={updateMutation.isPending}\n      />\n      {previewData && (\n        <PostPreviewModal\n          isOpen={isPreviewOpen}\n          onClose={() => setIsPreviewOpen(false)}\n          postData={previewData}\n        />\n      )}\n    </>\n  );\n}","size_bytes":4131},"client/src/components/AuthProvider.tsx":{"content":"import { ReactNode } from 'react';\nimport { AuthContext, useAuthQuery, useLoginMutation, useLogoutMutation } from '@/hooks/useAuth';\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport function AuthProvider({ children }: AuthProviderProps) {\n  const { data: user, isLoading } = useAuthQuery();\n  const loginMutation = useLoginMutation();\n  const logoutMutation = useLogoutMutation();\n\n  const login = async (username: string, password: string) => {\n    const userData = await loginMutation.mutateAsync({ username, password });\n    return userData;\n  };\n\n  const logout = async () => {\n    await logoutMutation.mutateAsync();\n  };\n\n  const authValue = {\n    user: user || null,\n    isLoading,\n    isAuthenticated: !!user,\n    login,\n    logout,\n  };\n\n  return (\n    <AuthContext.Provider value={authValue}>\n      {children}\n    </AuthContext.Provider>\n  );\n}","size_bytes":869},"client/src/components/LoginPage.tsx":{"content":"import { useState } from 'react';\nimport { useAuth } from '@/hooks/useAuth';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Loader2, LogIn, Shield } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\n\nexport default function LoginPage() {\n  const { login } = useAuth();\n  const { toast } = useToast();\n  const [isLoading, setIsLoading] = useState(false);\n  const [formData, setFormData] = useState({\n    username: '',\n    password: '',\n  });\n  const [error, setError] = useState('');\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n    setError('');\n\n    try {\n      await login(formData.username, formData.password);\n      toast({\n        title: 'Welcome back!',\n        description: 'You have successfully logged in.',\n      });\n    } catch (err: any) {\n      setError(err.message || 'Login failed. Please try again.');\n      toast({\n        title: 'Login failed',\n        description: err.message || 'Invalid credentials. Please try again.',\n        variant: 'destructive',\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({ ...prev, [name]: value }));\n    // Clear error when user starts typing\n    if (error) setError('');\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800 p-4\">\n      <Card className=\"w-full max-w-md shadow-xl\">\n        <CardHeader className=\"text-center space-y-4\">\n          <div className=\"flex justify-center\">\n            <div className=\"bg-primary/10 p-3 rounded-full\">\n              <Shield className=\"h-8 w-8 text-primary\" />\n            </div>\n          </div>\n          <div>\n            <CardTitle className=\"text-2xl font-bold\">Penkora CMS</CardTitle>\n            <CardDescription className=\"text-muted-foreground\">\n              Sign in to access your admin dashboard\n            </CardDescription>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            {error && (\n              <Alert variant=\"destructive\" data-testid=\"error-message\">\n                <AlertDescription>{error}</AlertDescription>\n              </Alert>\n            )}\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"username\">Username</Label>\n              <Input\n                id=\"username\"\n                name=\"username\"\n                type=\"text\"\n                placeholder=\"Enter your username\"\n                value={formData.username}\n                onChange={handleInputChange}\n                disabled={isLoading}\n                required\n                data-testid=\"input-username\"\n                className=\"bg-background\"\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Password</Label>\n              <Input\n                id=\"password\"\n                name=\"password\"\n                type=\"password\"\n                placeholder=\"Enter your password\"\n                value={formData.password}\n                onChange={handleInputChange}\n                disabled={isLoading}\n                required\n                data-testid=\"input-password\"\n                className=\"bg-background\"\n              />\n            </div>\n            \n            <Button \n              type=\"submit\" \n              className=\"w-full\" \n              disabled={isLoading || !formData.username || !formData.password}\n              data-testid=\"button-login\"\n            >\n              {isLoading ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  Signing in...\n                </>\n              ) : (\n                <>\n                  <LogIn className=\"mr-2 h-4 w-4\" />\n                  Sign In\n                </>\n              )}\n            </Button>\n          </form>\n          \n          <div className=\"mt-6 text-center text-sm text-muted-foreground\">\n            <p>Demo credentials: admin / admin123</p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":4556},"client/src/components/PostPreviewModal.tsx":{"content":"import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Calendar, Eye, User, Tag as TagIcon } from \"lucide-react\";\n\ninterface PostPreviewModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  postData: {\n    title: string;\n    content: string;\n    excerpt: string;\n    category: string;\n    tags: string[];\n    status: string;\n    featured: boolean;\n    allowComments: boolean;\n    seoTitle: string;\n    seoDescription: string;\n    publishDate: string;\n  };\n}\n\nexport function PostPreviewModal({ isOpen, onClose, postData }: PostPreviewModalProps) {\n  const previewDate = postData.publishDate || new Date().toISOString().split('T')[0];\n  const formattedDate = new Date(previewDate).toLocaleDateString('en-US', {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  });\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\" data-testid=\"post-preview-modal\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Eye className=\"h-5 w-5\" />\n            Post Preview\n          </DialogTitle>\n          <DialogDescription>\n            This is how your post will appear to readers\n          </DialogDescription>\n        </DialogHeader>\n        \n        <div className=\"space-y-6\">\n          {/* Status and Meta Info */}\n          <div className=\"flex flex-wrap items-center gap-2 text-sm text-muted-foreground\">\n            <Badge variant={postData.status === 'published' ? 'default' : 'secondary'} data-testid=\"preview-status\">\n              {postData.status.charAt(0).toUpperCase() + postData.status.slice(1)}\n            </Badge>\n            {postData.featured && (\n              <Badge variant=\"outline\" data-testid=\"preview-featured\">\n                Featured\n              </Badge>\n            )}\n            <div className=\"flex items-center gap-1\">\n              <Calendar className=\"h-4 w-4\" />\n              {formattedDate}\n            </div>\n            <div className=\"flex items-center gap-1\">\n              <User className=\"h-4 w-4\" />\n              Author\n            </div>\n          </div>\n\n          {/* Title */}\n          <div className=\"space-y-2\">\n            <h1 className=\"text-3xl md:text-4xl font-bold leading-tight\" data-testid=\"preview-title\">\n              {postData.title || \"Untitled Post\"}\n            </h1>\n            \n            {/* Excerpt */}\n            {postData.excerpt && (\n              <p className=\"text-lg text-muted-foreground leading-relaxed\" data-testid=\"preview-excerpt\">\n                {postData.excerpt}\n              </p>\n            )}\n          </div>\n\n          {/* Category and Tags */}\n          <div className=\"flex flex-wrap items-center gap-2\">\n            {postData.category && (\n              <Badge variant=\"outline\" className=\"font-medium\" data-testid=\"preview-category\">\n                {postData.category}\n              </Badge>\n            )}\n            {postData.tags.length > 0 && (\n              <div className=\"flex items-center gap-1\">\n                <TagIcon className=\"h-4 w-4 text-muted-foreground\" />\n                <div className=\"flex flex-wrap gap-1\">\n                  {postData.tags.map((tag, index) => (\n                    <Badge key={index} variant=\"secondary\" className=\"text-xs\" data-testid={`preview-tag-${index}`}>\n                      {tag}\n                    </Badge>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Content */}\n          <div className=\"border-t pt-6\">\n            <div \n              className=\"prose prose-sm sm:prose-base lg:prose-lg xl:prose-xl max-w-none\n                prose-headings:font-medium prose-headings:text-foreground\n                prose-p:text-foreground prose-p:leading-relaxed\n                prose-a:text-primary prose-a:no-underline hover:prose-a:underline\n                prose-strong:text-foreground prose-em:text-foreground\n                prose-code:text-foreground prose-code:bg-muted prose-code:px-1 prose-code:py-0.5 prose-code:rounded prose-code:before:content-none prose-code:after:content-none\n                prose-pre:bg-muted prose-pre:text-foreground\n                prose-blockquote:text-foreground prose-blockquote:border-l-border\n                prose-hr:border-border\n                prose-ul:text-foreground prose-ol:text-foreground prose-li:text-foreground\n                prose-table:text-foreground prose-thead:text-foreground prose-tbody:text-foreground\n                prose-th:border-border prose-td:border-border\"\n              dangerouslySetInnerHTML={{ \n                __html: postData.content || '<p class=\"text-muted-foreground italic\">No content provided</p>' \n              }}\n              data-testid=\"preview-content\"\n            />\n          </div>\n\n          {/* Comments indicator */}\n          {postData.allowComments && (\n            <div className=\"border-t pt-4\">\n              <p className=\"text-sm text-muted-foreground italic\">\n                Comments are enabled for this post\n              </p>\n            </div>\n          )}\n\n          {/* SEO Preview */}\n          {(postData.seoTitle || postData.seoDescription) && (\n            <div className=\"border-t pt-4 space-y-2\">\n              <h3 className=\"text-sm font-medium text-muted-foreground\">SEO Preview</h3>\n              <div className=\"border rounded-lg p-3 bg-muted/30\">\n                <div className=\"text-blue-600 text-lg font-medium\" data-testid=\"preview-seo-title\">\n                  {postData.seoTitle || postData.title || \"Untitled Post\"}\n                </div>\n                {postData.seoDescription && (\n                  <div className=\"text-sm text-muted-foreground mt-1\" data-testid=\"preview-seo-description\">\n                    {postData.seoDescription}\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n\n          {/* Actions */}\n          <div className=\"flex justify-end pt-4 border-t\">\n            <Button onClick={onClose} data-testid=\"preview-close\">\n              Close Preview\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":6340},"client/src/hooks/useAuth.ts":{"content":"import { createContext, useContext } from 'react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport type { User } from '@shared/schema';\n\ntype AuthUser = Omit<User, 'password'>;\n\ninterface AuthContextType {\n  user: AuthUser | null;\n  isLoading: boolean;\n  isAuthenticated: boolean;\n  login: (username: string, password: string) => Promise<AuthUser>;\n  logout: () => Promise<void>;\n}\n\nexport const AuthContext = createContext<AuthContextType | null>(null);\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n\nexport function useAuthQuery() {\n  return useQuery<AuthUser | null>({\n    queryKey: ['/api/auth/me'],\n    queryFn: async () => {\n      try {\n        const response = await fetch('/api/auth/me', {\n          credentials: 'include',\n        });\n        if (response.status === 401) {\n          return null;\n        }\n        if (!response.ok) {\n          throw new Error('Failed to fetch user');\n        }\n        const data = await response.json();\n        return data.user;\n      } catch (error) {\n        return null;\n      }\n    },\n    retry: false,\n  });\n}\n\nexport function useLoginMutation() {\n  return useMutation({\n    mutationFn: async ({ username, password }: { username: string; password: string }) => {\n      const response = await apiRequest('POST', '/api/auth/login', { username, password });\n      const data = await response.json();\n      return data.user;\n    },\n    onSuccess: () => {\n      // Invalidate auth query to refresh user data\n      queryClient.invalidateQueries({ queryKey: ['/api/auth/me'] });\n    },\n  });\n}\n\nexport function useLogoutMutation() {\n  return useMutation({\n    mutationFn: async () => {\n      await apiRequest('POST', '/api/auth/logout');\n    },\n    onSuccess: () => {\n      // Clear all cached data and redirect\n      queryClient.invalidateQueries();\n      queryClient.setQueryData(['/api/auth/me'], null);\n    },\n  });\n}","size_bytes":2084},"client/src/hooks/useCategories.ts":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport type { Category, InsertCategory } from \"@shared/schema\";\n\n// Hook to fetch all categories\nexport function useCategories() {\n  return useQuery({\n    queryKey: ['/api/categories'],\n    queryFn: async () => {\n      const response = await fetch('/api/categories');\n      if (!response.ok) {\n        throw new Error('Failed to fetch categories');\n      }\n      return response.json();\n    },\n    enabled: true,\n    staleTime: 60000, // 1 minute\n    retry: 1,\n  });\n}\n\n// Hook to fetch a single category by ID\nexport function useCategory(id: string) {\n  return useQuery({\n    queryKey: ['/api/categories', id],\n    queryFn: async () => {\n      const response = await fetch(`/api/categories/${id}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch category');\n      }\n      return response.json();\n    },\n    enabled: !!id,\n    staleTime: 60000,\n    retry: 1,\n  });\n}\n\n// Hook to create a new category\nexport function useCreateCategory() {\n  return useMutation({\n    mutationFn: async (categoryData: InsertCategory) => {\n      const response = await apiRequest('POST', '/api/categories', categoryData);\n      return response.json();\n    },\n    onSuccess: () => {\n      // Invalidate and refetch categories\n      queryClient.invalidateQueries({ queryKey: ['/api/categories'] });\n    },\n  });\n}\n\n// Hook to update a category\nexport function useUpdateCategory() {\n  return useMutation({\n    mutationFn: async ({ id, ...categoryData }: { id: string } & Partial<InsertCategory>) => {\n      const response = await apiRequest('PUT', `/api/categories/${id}`, categoryData);\n      return response.json();\n    },\n    onSuccess: (data, variables) => {\n      // Invalidate and refetch categories\n      queryClient.invalidateQueries({ queryKey: ['/api/categories'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/categories', variables.id] });\n    },\n  });\n}\n\n// Hook to delete a category\nexport function useDeleteCategory() {\n  return useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest('DELETE', `/api/categories/${id}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      // Invalidate and refetch categories\n      queryClient.invalidateQueries({ queryKey: ['/api/categories'] });\n    },\n  });\n}","size_bytes":2396},"client/src/hooks/useTags.ts":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport type { Tag, InsertTag } from \"@shared/schema\";\n\n// Hook to fetch all tags\nexport function useTags() {\n  return useQuery({\n    queryKey: ['/api/tags'],\n    queryFn: async () => {\n      const response = await fetch('/api/tags');\n      if (!response.ok) {\n        throw new Error('Failed to fetch tags');\n      }\n      return response.json();\n    },\n    enabled: true,\n    staleTime: 60000, // 1 minute\n    retry: 1,\n  });\n}\n\n// Hook to fetch a single tag by ID\nexport function useTag(id: string) {\n  return useQuery({\n    queryKey: ['/api/tags', id],\n    queryFn: async () => {\n      const response = await fetch(`/api/tags/${id}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch tag');\n      }\n      return response.json();\n    },\n    enabled: !!id,\n    staleTime: 60000,\n    retry: 1,\n  });\n}\n\n// Hook to create a new tag\nexport function useCreateTag() {\n  return useMutation({\n    mutationFn: async (tagData: InsertTag) => {\n      const response = await apiRequest('POST', '/api/tags', tagData);\n      return response.json();\n    },\n    onSuccess: () => {\n      // Invalidate and refetch tags\n      queryClient.invalidateQueries({ queryKey: ['/api/tags'] });\n    },\n  });\n}\n\n// Hook to update a tag\nexport function useUpdateTag() {\n  return useMutation({\n    mutationFn: async ({ id, ...tagData }: { id: string } & Partial<InsertTag>) => {\n      const response = await apiRequest('PUT', `/api/tags/${id}`, tagData);\n      return response.json();\n    },\n    onSuccess: (data, variables) => {\n      // Invalidate and refetch tags\n      queryClient.invalidateQueries({ queryKey: ['/api/tags'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/tags', variables.id] });\n    },\n  });\n}\n\n// Hook to delete a tag\nexport function useDeleteTag() {\n  return useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest('DELETE', `/api/tags/${id}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      // Invalidate and refetch tags\n      queryClient.invalidateQueries({ queryKey: ['/api/tags'] });\n    },\n  });\n}\n\n// Hook to find or create tags by name - useful for post editing\nexport function useCreateTagsFromNames() {\n  return useMutation({\n    mutationFn: async (tagNames: string[]) => {\n      const existingTags = queryClient.getQueryData(['/api/tags']) as any[] || [];\n      const tagIds: string[] = [];\n      \n      // For each tag name, either find existing or create new\n      for (const name of tagNames) {\n        const existingTag = existingTags.find(tag => \n          tag.name.toLowerCase() === name.toLowerCase()\n        );\n        \n        if (existingTag) {\n          tagIds.push(existingTag.id);\n        } else {\n          // Create new tag\n          const slug = name.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/(^-|-$)/g, '');\n          const response = await apiRequest('POST', '/api/tags', { name, slug });\n          const newTag = await response.json();\n          tagIds.push(newTag.id);\n        }\n      }\n      \n      return tagIds;\n    },\n    onSuccess: () => {\n      // Refetch tags to include any newly created ones\n      queryClient.invalidateQueries({ queryKey: ['/api/tags'] });\n    },\n  });\n}","size_bytes":3327},"client/src/hooks/useUsers.ts":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport type { User, InsertUser } from \"@shared/schema\";\n\n// Hook to fetch all users (admin only)\nexport function useUsers() {\n  return useQuery({\n    queryKey: ['/api/users'],\n    queryFn: async () => {\n      const response = await fetch('/api/users');\n      if (!response.ok) {\n        throw new Error('Failed to fetch users');\n      }\n      return response.json();\n    },\n    enabled: true,\n    staleTime: 60000, // 1 minute\n    retry: 1,\n  });\n}\n\n// Hook to fetch a single user by ID (admin only)\nexport function useUser(id: string) {\n  return useQuery({\n    queryKey: ['/api/users', id],\n    queryFn: async () => {\n      const response = await fetch(`/api/users/${id}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch user');\n      }\n      return response.json();\n    },\n    enabled: !!id,\n    staleTime: 60000,\n    retry: 1,\n  });\n}\n\n// Hook to create a new user (admin only)\nexport function useCreateUser() {\n  return useMutation({\n    mutationFn: async (userData: InsertUser) => {\n      const response = await apiRequest('POST', '/api/users', userData);\n      return response.json();\n    },\n    onSuccess: () => {\n      // Invalidate and refetch users\n      queryClient.invalidateQueries({ queryKey: ['/api/users'] });\n    },\n  });\n}\n\n// Hook to update a user (admin only)\nexport function useUpdateUser() {\n  return useMutation({\n    mutationFn: async ({ id, ...userData }: { id: string } & Partial<InsertUser>) => {\n      const response = await apiRequest('PUT', `/api/users/${id}`, userData);\n      return response.json();\n    },\n    onSuccess: (data, variables) => {\n      // Invalidate and refetch users\n      queryClient.invalidateQueries({ queryKey: ['/api/users'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/users', variables.id] });\n    },\n  });\n}\n\n// Hook to delete a user (admin only)\nexport function useDeleteUser() {\n  return useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest('DELETE', `/api/users/${id}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      // Invalidate and refetch users\n      queryClient.invalidateQueries({ queryKey: ['/api/users'] });\n    },\n  });\n}","size_bytes":2308},"client/src/hooks/useSettings.ts":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport type { Setting, InsertSetting } from \"@shared/schema\";\n\n// Hook to fetch all settings or settings by category\nexport function useSettings(category?: string) {\n  return useQuery({\n    queryKey: ['/api/settings', 'list', { category }],\n    queryFn: async () => {\n      const url = category ? `/api/settings?category=${category}` : '/api/settings';\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error('Failed to fetch settings');\n      }\n      return response.json();\n    },\n    enabled: true,\n    staleTime: 30000, // 30 seconds\n    retry: 1,\n  });\n}\n\n// Hook to fetch a specific setting by key\nexport function useSetting(key: string) {\n  return useQuery({\n    queryKey: ['/api/settings', 'detail', key],\n    queryFn: async () => {\n      const response = await fetch(`/api/settings/${key}`);\n      if (!response.ok) {\n        if (response.status === 404) {\n          return null;\n        }\n        throw new Error('Failed to fetch setting');\n      }\n      return response.json();\n    },\n    enabled: !!key,\n    staleTime: 30000,\n    retry: 1,\n  });\n}\n\n// Hook to create or update a setting (admin only)\nexport function useSetSetting() {\n  return useMutation({\n    mutationFn: async ({ key, value, category, isPublic, description }: { \n      key: string; \n      value: any; \n      category?: string; \n      isPublic?: boolean; \n      description?: string; \n    }) => {\n      const response = await apiRequest('POST', '/api/settings', {\n        key,\n        value,\n        category,\n        isPublic,\n        description\n      });\n      return response.json();\n    },\n    onSuccess: (data, variables) => {\n      // Invalidate and refetch settings\n      queryClient.invalidateQueries({ queryKey: ['/api/settings', 'list'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/settings', 'detail', variables.key] });\n      if (variables.category) {\n        queryClient.invalidateQueries({ queryKey: ['/api/settings', 'list', { category: variables.category }] });\n      }\n    },\n  });\n}\n\n// Hook to update a specific setting (admin only)\nexport function useUpdateSetting() {\n  return useMutation({\n    mutationFn: async ({ key, ...updates }: { key: string } & Partial<InsertSetting>) => {\n      const response = await apiRequest('PUT', `/api/settings/${key}`, updates);\n      return response.json();\n    },\n    onSuccess: (data, variables) => {\n      // Invalidate and refetch settings\n      queryClient.invalidateQueries({ queryKey: ['/api/settings', 'list'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/settings', 'detail', variables.key] });\n    },\n  });\n}\n\n// Hook to delete a setting (admin only)\nexport function useDeleteSetting() {\n  return useMutation({\n    mutationFn: async (key: string) => {\n      const response = await apiRequest('DELETE', `/api/settings/${key}`);\n      return response.json();\n    },\n    onSuccess: (data, key) => {\n      // Invalidate and refetch settings\n      queryClient.invalidateQueries({ queryKey: ['/api/settings', 'list'] });\n      queryClient.removeQueries({ queryKey: ['/api/settings', 'detail', key] });\n    },\n  });\n}\n\n// Helper hook for common site settings\nexport function useSiteSettings() {\n  return useSettings('general');\n}\n\n// Helper hook for email settings\nexport function useEmailSettings() {\n  return useSettings('email');\n}\n\n// Helper hook for social media settings\nexport function useSocialSettings() {\n  return useSettings('social');\n}\n\n// Helper hook to get a specific setting value with default fallback\nexport function useSettingValue<T>(key: string, defaultValue: T): T {\n  const { data: setting, isLoading } = useSetting(key);\n  \n  if (isLoading || !setting) {\n    return defaultValue;\n  }\n  \n  return setting.value ?? defaultValue;\n}","size_bytes":3878},"server/services/emailService.ts":{"content":"import nodemailer from 'nodemailer';\nimport type { Transporter } from 'nodemailer';\nimport type { MailOptions } from 'nodemailer/lib/json-transport';\n\nexport interface EmailConfig {\n  provider: 'smtp' | 'gmail' | 'outlook';\n  smtpHost?: string;\n  smtpPort?: number;\n  smtpUsername?: string;\n  smtpPassword?: string;\n  fromEmail: string;\n  fromName: string;\n}\n\nexport interface EmailTemplate {\n  subject: string;\n  html: string;\n  text?: string;\n}\n\nexport class EmailService {\n  private transporter: Transporter | null = null;\n  private config: EmailConfig | null = null;\n\n  constructor() {\n    // Service starts without configuration\n    // Configuration is loaded when initialize() is called\n  }\n\n  async initialize(config: EmailConfig): Promise<boolean> {\n    try {\n      this.config = config;\n\n      // Create transporter based on provider\n      if (config.provider === 'smtp') {\n        this.transporter = nodemailer.createTransport({\n          host: config.smtpHost,\n          port: config.smtpPort || 587,\n          secure: config.smtpPort === 465, // true for 465, false for other ports\n          auth: {\n            user: config.smtpUsername,\n            pass: config.smtpPassword,\n          },\n        });\n      } else if (config.provider === 'gmail') {\n        this.transporter = nodemailer.createTransport({\n          service: 'gmail',\n          auth: {\n            user: config.smtpUsername,\n            pass: config.smtpPassword,\n          },\n        });\n      } else if (config.provider === 'outlook') {\n        this.transporter = nodemailer.createTransport({\n          service: 'outlook',\n          auth: {\n            user: config.smtpUsername,\n            pass: config.smtpPassword,\n          },\n        });\n      }\n\n      if (!this.transporter) {\n        throw new Error(`Unsupported email provider: ${config.provider}`);\n      }\n\n      // Verify connection\n      await this.transporter.verify();\n      console.log('✅ Email service initialized successfully');\n      return true;\n\n    } catch (error) {\n      console.error('❌ Email service initialization failed:', error);\n      this.transporter = null;\n      return false;\n    }\n  }\n\n  isConfigured(): boolean {\n    return this.transporter !== null && this.config !== null;\n  }\n\n  async sendEmail(to: string | string[], subject: string, html: string, text?: string): Promise<boolean> {\n    if (!this.isConfigured()) {\n      console.error('Email service not configured');\n      return false;\n    }\n\n    try {\n      const mailOptions: MailOptions = {\n        from: `\"${this.config!.fromName}\" <${this.config!.fromEmail}>`,\n        to: Array.isArray(to) ? to.join(', ') : to,\n        subject,\n        html,\n        text: text || html.replace(/<[^>]*>/g, ''), // Strip HTML for text version\n      };\n\n      const result = await this.transporter!.sendMail(mailOptions);\n      console.log('✅ Email sent successfully:', result.messageId);\n      return true;\n\n    } catch (error) {\n      console.error('❌ Failed to send email:', error);\n      return false;\n    }\n  }\n\n  async sendTemplateEmail(to: string | string[], template: EmailTemplate): Promise<boolean> {\n    return this.sendEmail(to, template.subject, template.html, template.text);\n  }\n\n  // Pre-built email templates\n  getWelcomeTemplate(username: string, siteUrl: string): EmailTemplate {\n    return {\n      subject: 'Welcome to the CMS!',\n      html: `\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n          <h2 style=\"color: #333;\">Welcome ${username}!</h2>\n          <p>Your account has been successfully created. You can now start using the Content Management System.</p>\n          <p>\n            <a href=\"${siteUrl}\" style=\"background-color: #007cba; color: white; padding: 12px 24px; text-decoration: none; border-radius: 4px; display: inline-block;\">\n              Access CMS\n            </a>\n          </p>\n          <p style=\"color: #666; font-size: 14px;\">If you have any questions, please don't hesitate to contact our support team.</p>\n        </div>\n      `,\n      text: `Welcome ${username}! Your account has been created. Visit ${siteUrl} to access the CMS.`\n    };\n  }\n\n  getPasswordResetTemplate(username: string, resetLink: string): EmailTemplate {\n    return {\n      subject: 'Password Reset Request',\n      html: `\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n          <h2 style=\"color: #333;\">Password Reset</h2>\n          <p>Hi ${username},</p>\n          <p>You requested a password reset. Click the button below to reset your password:</p>\n          <p>\n            <a href=\"${resetLink}\" style=\"background-color: #dc3545; color: white; padding: 12px 24px; text-decoration: none; border-radius: 4px; display: inline-block;\">\n              Reset Password\n            </a>\n          </p>\n          <p style=\"color: #666; font-size: 14px;\">This link will expire in 1 hour. If you didn't request this reset, please ignore this email.</p>\n        </div>\n      `,\n      text: `Hi ${username}, you requested a password reset. Visit ${resetLink} to reset your password. This link expires in 1 hour.`\n    };\n  }\n\n  getNotificationTemplate(title: string, message: string, actionUrl?: string, actionText?: string): EmailTemplate {\n    return {\n      subject: title,\n      html: `\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n          <h2 style=\"color: #333;\">${title}</h2>\n          <p>${message}</p>\n          ${actionUrl && actionText ? `\n            <p>\n              <a href=\"${actionUrl}\" style=\"background-color: #28a745; color: white; padding: 12px 24px; text-decoration: none; border-radius: 4px; display: inline-block;\">\n                ${actionText}\n              </a>\n            </p>\n          ` : ''}\n          <p style=\"color: #666; font-size: 14px;\">This is an automated message from your CMS.</p>\n        </div>\n      `,\n      text: `${title}: ${message}${actionUrl ? ` ${actionText}: ${actionUrl}` : ''}`\n    };\n  }\n\n  async testConnection(): Promise<boolean> {\n    if (!this.transporter) {\n      return false;\n    }\n\n    try {\n      await this.transporter.verify();\n      return true;\n    } catch (error) {\n      console.error('Email connection test failed:', error);\n      return false;\n    }\n  }\n}\n\n// Singleton instance\nexport const emailService = new EmailService();","size_bytes":6361},"server/services/schedulerService.ts":{"content":"import cron from 'node-cron';\nimport type { ScheduledTask } from 'node-cron';\n\nexport interface JobConfig {\n  id: string;\n  name: string;\n  cronExpression: string;\n  handler: () => Promise<void>;\n  timezone?: string;\n  enabled?: boolean;\n  runOnStart?: boolean;\n}\n\nexport interface ScheduledJob {\n  id: string;\n  name: string;\n  cronExpression: string;\n  nextRun?: Date;\n  lastRun?: Date;\n  isRunning: boolean;\n  enabled: boolean;\n}\n\nexport class SchedulerService {\n  private jobs: Map<string, { task: ScheduledTask; config: JobConfig }> = new Map();\n  private runningJobs: Set<string> = new Set();\n\n  constructor() {\n    console.log('📅 Scheduler service initialized');\n  }\n\n  /**\n   * Schedule a new job\n   */\n  scheduleJob(config: JobConfig): boolean {\n    try {\n      // Validate cron expression\n      if (!cron.validate(config.cronExpression)) {\n        console.error(`❌ Invalid cron expression for job ${config.id}: ${config.cronExpression}`);\n        return false;\n      }\n\n      // Stop existing job if it exists\n      if (this.jobs.has(config.id)) {\n        this.unscheduleJob(config.id);\n      }\n\n      const wrappedHandler = async () => {\n        if (this.runningJobs.has(config.id)) {\n          console.log(`⏭️ Skipping job ${config.id} - already running`);\n          return;\n        }\n\n        try {\n          this.runningJobs.add(config.id);\n          console.log(`🚀 Starting scheduled job: ${config.name} (${config.id})`);\n          \n          await config.handler();\n          \n          console.log(`✅ Completed scheduled job: ${config.name} (${config.id})`);\n        } catch (error) {\n          console.error(`❌ Error in scheduled job ${config.name} (${config.id}):`, error);\n        } finally {\n          this.runningJobs.delete(config.id);\n        }\n      };\n\n      const task = cron.schedule(\n        config.cronExpression, \n        wrappedHandler, \n        {\n          scheduled: config.enabled !== false,\n          timezone: config.timezone || 'UTC'\n        }\n      );\n\n      this.jobs.set(config.id, { task, config });\n\n      console.log(`📅 Scheduled job: ${config.name} (${config.cronExpression})`);\n\n      // Run immediately if configured\n      if (config.runOnStart && config.enabled !== false) {\n        setImmediate(wrappedHandler);\n      }\n\n      return true;\n    } catch (error) {\n      console.error(`❌ Failed to schedule job ${config.id}:`, error);\n      return false;\n    }\n  }\n\n  /**\n   * Unschedule a job\n   */\n  unscheduleJob(jobId: string): boolean {\n    const job = this.jobs.get(jobId);\n    if (!job) {\n      return false;\n    }\n\n    try {\n      job.task.stop();\n      job.task.destroy();\n      this.jobs.delete(jobId);\n      this.runningJobs.delete(jobId);\n      \n      console.log(`🛑 Unscheduled job: ${job.config.name} (${jobId})`);\n      return true;\n    } catch (error) {\n      console.error(`❌ Failed to unschedule job ${jobId}:`, error);\n      return false;\n    }\n  }\n\n  /**\n   * Start a job (if it exists and is stopped)\n   */\n  startJob(jobId: string): boolean {\n    const job = this.jobs.get(jobId);\n    if (!job) {\n      return false;\n    }\n\n    try {\n      job.task.start();\n      job.config.enabled = true;\n      console.log(`▶️ Started job: ${job.config.name} (${jobId})`);\n      return true;\n    } catch (error) {\n      console.error(`❌ Failed to start job ${jobId}:`, error);\n      return false;\n    }\n  }\n\n  /**\n   * Stop a job (without unscheduling)\n   */\n  stopJob(jobId: string): boolean {\n    const job = this.jobs.get(jobId);\n    if (!job) {\n      return false;\n    }\n\n    try {\n      job.task.stop();\n      job.config.enabled = false;\n      console.log(`⏸️ Stopped job: ${job.config.name} (${jobId})`);\n      return true;\n    } catch (error) {\n      console.error(`❌ Failed to stop job ${jobId}:`, error);\n      return false;\n    }\n  }\n\n  /**\n   * Run a job immediately (manually trigger)\n   */\n  async runJobNow(jobId: string): Promise<boolean> {\n    const job = this.jobs.get(jobId);\n    if (!job) {\n      console.error(`❌ Job not found: ${jobId}`);\n      return false;\n    }\n\n    if (this.runningJobs.has(jobId)) {\n      console.log(`⏭️ Job already running: ${jobId}`);\n      return false;\n    }\n\n    try {\n      this.runningJobs.add(jobId);\n      console.log(`🎯 Manually triggering job: ${job.config.name} (${jobId})`);\n      \n      await job.config.handler();\n      \n      console.log(`✅ Manual job execution completed: ${job.config.name} (${jobId})`);\n      return true;\n    } catch (error) {\n      console.error(`❌ Error in manual job execution ${jobId}:`, error);\n      return false;\n    } finally {\n      this.runningJobs.delete(jobId);\n    }\n  }\n\n  /**\n   * Get all scheduled jobs status\n   */\n  getJobsStatus(): ScheduledJob[] {\n    const jobs: ScheduledJob[] = [];\n    \n    for (const [id, { config, task }] of this.jobs) {\n      jobs.push({\n        id,\n        name: config.name,\n        cronExpression: config.cronExpression,\n        isRunning: this.runningJobs.has(id),\n        enabled: config.enabled !== false,\n        // Note: node-cron doesn't provide nextRun/lastRun info\n        // We could track this manually if needed\n      });\n    }\n    \n    return jobs.sort((a, b) => a.name.localeCompare(b.name));\n  }\n\n  /**\n   * Get specific job status\n   */\n  getJobStatus(jobId: string): ScheduledJob | null {\n    const job = this.jobs.get(jobId);\n    if (!job) {\n      return null;\n    }\n\n    return {\n      id: jobId,\n      name: job.config.name,\n      cronExpression: job.config.cronExpression,\n      isRunning: this.runningJobs.has(jobId),\n      enabled: job.config.enabled !== false,\n    };\n  }\n\n  /**\n   * Shutdown all jobs gracefully\n   */\n  shutdown(): void {\n    console.log('🛑 Shutting down scheduler service...');\n    \n    for (const [jobId, { task }] of this.jobs) {\n      try {\n        task.stop();\n        task.destroy();\n      } catch (error) {\n        console.error(`❌ Error stopping job ${jobId}:`, error);\n      }\n    }\n    \n    this.jobs.clear();\n    this.runningJobs.clear();\n    \n    console.log('✅ Scheduler service shutdown complete');\n  }\n\n  /**\n   * Initialize with default CMS jobs\n   */\n  initializeDefaultJobs(): void {\n    console.log('📅 Initializing default CMS jobs...');\n    \n    // Publish scheduled posts (every minute)\n    this.scheduleJob({\n      id: 'publish-scheduled-posts',\n      name: 'Publish Scheduled Posts',\n      cronExpression: '* * * * *', // Every minute\n      handler: this.publishScheduledPosts.bind(this),\n      enabled: true,\n    });\n\n    // Cleanup old sessions (daily at 2 AM)\n    this.scheduleJob({\n      id: 'cleanup-sessions',\n      name: 'Cleanup Old Sessions',\n      cronExpression: '0 2 * * *', // Daily at 2 AM\n      handler: this.cleanupOldSessions.bind(this),\n      enabled: true,\n    });\n\n    // Generate analytics summaries (daily at 1 AM)\n    this.scheduleJob({\n      id: 'generate-analytics',\n      name: 'Generate Daily Analytics',\n      cronExpression: '0 1 * * *', // Daily at 1 AM\n      handler: this.generateDailyAnalytics.bind(this),\n      enabled: true,\n    });\n\n    console.log('✅ Default CMS jobs initialized');\n  }\n\n  /**\n   * Publish posts that are scheduled for now\n   */\n  private async publishScheduledPosts(): Promise<void> {\n    try {\n      const { storage } = await import('../storage');\n      \n      // Get posts with status 'scheduled' that should be published now\n      const scheduledPosts = await storage.listPosts({ \n        status: 'scheduled', \n        limit: 100 \n      });\n      \n      const now = new Date();\n      let publishedCount = 0;\n      \n      for (const post of scheduledPosts.posts) {\n        if (post.publishedAt && new Date(post.publishedAt) <= now) {\n          // Publish the post\n          await storage.updatePost(post.id, {\n            status: 'published',\n            publishedAt: now,\n          });\n          \n          publishedCount++;\n          console.log(`📰 Published scheduled post: ${post.title}`);\n        }\n      }\n      \n      if (publishedCount > 0) {\n        console.log(`✅ Published ${publishedCount} scheduled posts`);\n      }\n    } catch (error) {\n      console.error('❌ Error publishing scheduled posts:', error);\n    }\n  }\n\n  /**\n   * Cleanup old session data\n   */\n  private async cleanupOldSessions(): Promise<void> {\n    try {\n      // This would clean up expired sessions from database\n      // For now, just log - implementation depends on session storage\n      console.log('🧹 Session cleanup completed');\n    } catch (error) {\n      console.error('❌ Error cleaning up sessions:', error);\n    }\n  }\n\n  /**\n   * Generate daily analytics summaries\n   */\n  private async generateDailyAnalytics(): Promise<void> {\n    try {\n      const { storage } = await import('../storage');\n      \n      // This would generate analytics summaries\n      // For now, just track that the job ran\n      await storage.trackEvent('system_job_run', 'generate-analytics', 'scheduler');\n      console.log('📊 Daily analytics generation completed');\n    } catch (error) {\n      console.error('❌ Error generating analytics:', error);\n    }\n  }\n}\n\n// Singleton instance\nexport const schedulerService = new SchedulerService();","size_bytes":9187},"client/src/hooks/useMedia.ts":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport type { Media, InsertMedia } from \"@shared/schema\";\n\n// Hook to fetch all media with pagination\nexport function useMedia(limit = 50, offset = 0) {\n  return useQuery({\n    queryKey: ['/api/media', 'list', { limit, offset }],\n    queryFn: async () => {\n      const response = await fetch(`/api/media?limit=${limit}&offset=${offset}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch media');\n      }\n      return response.json();\n    },\n    enabled: true,\n    staleTime: 60000, // 1 minute\n    retry: 1,\n  });\n}\n\n// Hook to fetch a single media item by ID\nexport function useMediaItem(id: string) {\n  return useQuery({\n    queryKey: ['/api/media', 'detail', id],\n    queryFn: async () => {\n      const response = await fetch(`/api/media/${id}`);\n      if (!response.ok) {\n        if (response.status === 404) {\n          return null;\n        }\n        throw new Error('Failed to fetch media');\n      }\n      return response.json();\n    },\n    enabled: !!id,\n    staleTime: 60000,\n    retry: 1,\n  });\n}\n\n// Hook to upload files\nexport function useUploadFiles() {\n  return useMutation({\n    mutationFn: async ({ files, alt, caption }: { \n      files: File[]; \n      alt?: string; \n      caption?: string; \n    }) => {\n      const formData = new FormData();\n      \n      files.forEach((file) => {\n        formData.append('files', file);\n      });\n      \n      if (alt) formData.append('alt', alt);\n      if (caption) formData.append('caption', caption);\n\n      const response = await fetch('/api/media/upload', {\n        method: 'POST',\n        body: formData,\n      });\n\n      if (!response.ok) {\n        const error = await response.json().catch(() => ({ error: 'Upload failed' }));\n        throw new Error(error.error || 'Upload failed');\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      // Invalidate and refetch media list\n      queryClient.invalidateQueries({ queryKey: ['/api/media', 'list'] });\n    },\n  });\n}\n\n// Hook to create media metadata (for programmatic use)\nexport function useCreateMedia() {\n  return useMutation({\n    mutationFn: async ({ uploadedBy, ...mediaData }: { uploadedBy: string } & InsertMedia) => {\n      const response = await apiRequest('POST', '/api/media', { ...mediaData, uploadedBy });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/media', 'list'] });\n    },\n  });\n}\n\n// Hook to update media metadata\nexport function useUpdateMedia() {\n  return useMutation({\n    mutationFn: async ({ id, ...mediaData }: { id: string } & Partial<InsertMedia>) => {\n      const response = await apiRequest('PUT', `/api/media/${id}`, mediaData);\n      return response.json();\n    },\n    onSuccess: (data, variables) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/media', 'list'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/media', 'detail', variables.id] });\n    },\n  });\n}\n\n// Hook to delete media\nexport function useDeleteMedia() {\n  return useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest('DELETE', `/api/media/${id}`);\n      return response.json();\n    },\n    onSuccess: (data, id) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/media', 'list'] });\n      queryClient.removeQueries({ queryKey: ['/api/media', 'detail', id] });\n    },\n  });\n}\n\n// Hook for upload progress tracking (for advanced upload UI)\nexport function useUploadWithProgress() {\n  return useMutation({\n    mutationFn: async ({ \n      files, \n      alt, \n      caption,\n      onProgress \n    }: { \n      files: File[]; \n      alt?: string; \n      caption?: string;\n      onProgress?: (progress: number) => void;\n    }) => {\n      const formData = new FormData();\n      \n      files.forEach((file) => {\n        formData.append('files', file);\n      });\n      \n      if (alt) formData.append('alt', alt);\n      if (caption) formData.append('caption', caption);\n\n      return new Promise((resolve, reject) => {\n        const xhr = new XMLHttpRequest();\n        \n        xhr.upload.addEventListener('progress', (e) => {\n          if (e.lengthComputable && onProgress) {\n            const progress = Math.round((e.loaded / e.total) * 100);\n            onProgress(progress);\n          }\n        });\n\n        xhr.onload = () => {\n          if (xhr.status === 201) {\n            resolve(JSON.parse(xhr.responseText));\n          } else {\n            reject(new Error('Upload failed'));\n          }\n        };\n\n        xhr.onerror = () => reject(new Error('Upload failed'));\n        \n        xhr.open('POST', '/api/media/upload');\n        xhr.send(formData);\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/media', 'list'] });\n    },\n  });\n}","size_bytes":4890},"client/src/hooks/useTrash.ts":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport type { Post } from \"@shared/schema\";\n\n// Hook to fetch all deleted posts in trash\nexport function useDeletedPosts(limit = 50, offset = 0) {\n  return useQuery({\n    queryKey: ['/api/trash/posts', 'list', { limit, offset }],\n    queryFn: async () => {\n      const response = await fetch(`/api/trash/posts?limit=${limit}&offset=${offset}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch deleted posts');\n      }\n      return response.json();\n    },\n    enabled: true,\n    staleTime: 30000, // 30 seconds\n    retry: 1,\n  });\n}\n\n// Hook to soft delete (trash) a post\nexport function useSoftDeletePost() {\n  return useMutation({\n    mutationFn: async (postId: string) => {\n      const response = await apiRequest('DELETE', `/api/posts/${postId}/trash`);\n      return response.json();\n    },\n    onSuccess: () => {\n      // Invalidate post lists and trash list\n      queryClient.invalidateQueries({ queryKey: ['/api/posts'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/trash/posts'] });\n    },\n  });\n}\n\n// Hook to restore a post from trash\nexport function useRestorePost() {\n  return useMutation({\n    mutationFn: async (postId: string) => {\n      const response = await apiRequest('POST', `/api/trash/posts/${postId}/restore`);\n      return response.json();\n    },\n    onSuccess: () => {\n      // Invalidate post lists and trash list\n      queryClient.invalidateQueries({ queryKey: ['/api/posts'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/trash/posts'] });\n    },\n  });\n}\n\n// Hook to permanently delete a post (hard delete)\nexport function usePermanentDeletePost() {\n  return useMutation({\n    mutationFn: async (postId: string) => {\n      const response = await apiRequest('DELETE', `/api/posts/${postId}/permanent`);\n      return response.json();\n    },\n    onSuccess: () => {\n      // Invalidate trash list\n      queryClient.invalidateQueries({ queryKey: ['/api/trash/posts'] });\n    },\n  });\n}\n\n// Hook to bulk restore posts\nexport function useBulkRestorePosts() {\n  return useMutation({\n    mutationFn: async (postIds: string[]) => {\n      const promises = postIds.map(id => \n        apiRequest('POST', `/api/trash/posts/${id}/restore`)\n      );\n      await Promise.all(promises);\n      return { restored: postIds.length };\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/posts'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/trash/posts'] });\n    },\n  });\n}\n\n// Hook to bulk permanently delete posts\nexport function useBulkPermanentDelete() {\n  return useMutation({\n    mutationFn: async (postIds: string[]) => {\n      const promises = postIds.map(id => \n        apiRequest('DELETE', `/api/posts/${id}/permanent`)\n      );\n      await Promise.all(promises);\n      return { deleted: postIds.length };\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/trash/posts'] });\n    },\n  });\n}\n\n// Hook to empty trash (delete all trashed items)\nexport function useEmptyTrash() {\n  return useMutation({\n    mutationFn: async () => {\n      // First get all deleted posts\n      const response = await fetch('/api/trash/posts');\n      const data = await response.json();\n      \n      if (data.posts && data.posts.length > 0) {\n        // Permanently delete all\n        const promises = data.posts.map((post: Post) => \n          apiRequest('DELETE', `/api/posts/${post.id}/permanent`)\n        );\n        await Promise.all(promises);\n      }\n      \n      return { deleted: data.posts?.length || 0 };\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/trash/posts'] });\n    },\n  });\n}","size_bytes":3768},"client/src/components/UserFormDialog.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useCreateUser, useUpdateUser } from \"@/hooks/useUsers\";\nimport { insertUserSchema } from \"@shared/schema\";\nimport type { User } from \"@shared/schema\";\nimport { Loader2, Crown, Shield, User as UserIcon } from \"lucide-react\";\n\n// Form validation schema\nconst userFormSchema = insertUserSchema.extend({\n  confirmPassword: z.string().min(1, \"Please confirm your password\"),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\n// For editing, make password optional\nconst editUserFormSchema = insertUserSchema.partial({ password: true }).extend({\n  confirmPassword: z.string().optional(),\n}).refine((data) => {\n  if (data.password && data.password !== data.confirmPassword) {\n    return false;\n  }\n  return true;\n}, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\ntype UserFormData = z.infer<typeof userFormSchema>;\n\ninterface UserFormDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  user?: User | null; // If provided, we're editing; if null/undefined, we're creating\n  mode: \"create\" | \"edit\";\n}\n\nexport default function UserFormDialog({ \n  open, \n  onOpenChange, \n  user, \n  mode \n}: UserFormDialogProps) {\n  const { toast } = useToast();\n  const createUserMutation = useCreateUser();\n  const updateUserMutation = useUpdateUser();\n  \n  const isEditing = mode === \"edit\" && user;\n  const schema = isEditing ? editUserFormSchema : userFormSchema;\n  \n  const form = useForm<UserFormData>({\n    resolver: zodResolver(schema),\n    defaultValues: {\n      username: \"\",\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      role: \"author\",\n      displayName: \"\",\n    },\n  });\n\n  // Reset form when dialog opens/closes or user changes\n  useEffect(() => {\n    if (open && isEditing && user) {\n      form.reset({\n        username: user.username,\n        email: user.email || \"\",\n        password: \"\",\n        confirmPassword: \"\",\n        role: user.role,\n        displayName: user.displayName || \"\",\n      });\n    } else if (open && !isEditing) {\n      form.reset({\n        username: \"\",\n        email: \"\",\n        password: \"\",\n        confirmPassword: \"\",\n        role: \"author\",\n        displayName: \"\",\n      });\n    }\n  }, [open, isEditing, user, form]);\n\n  const onSubmit = async (data: UserFormData) => {\n    try {\n      const submitData = {\n        username: data.username,\n        email: data.email || undefined,\n        role: data.role,\n        displayName: data.displayName || undefined,\n        ...(data.password && { password: data.password }), // Only include password if provided\n      };\n\n      if (isEditing && user) {\n        await updateUserMutation.mutateAsync({ id: user.id, ...submitData });\n        toast({\n          title: \"Success\",\n          description: \"User updated successfully\",\n        });\n      } else {\n        if (!data.password) {\n          throw new Error(\"Password is required for new users\");\n        }\n        await createUserMutation.mutateAsync({ ...submitData, password: data.password });\n        toast({\n          title: \"Success\", \n          description: \"User created successfully\",\n        });\n      }\n      \n      onOpenChange(false);\n      form.reset();\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: error.message || `Failed to ${isEditing ? 'update' : 'create'} user`,\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const getRoleInfo = (role: string) => {\n    switch (role) {\n      case \"admin\":\n        return { icon: Crown, color: \"text-red-500\", bg: \"bg-red-50 dark:bg-red-950\" };\n      case \"editor\":\n        return { icon: Shield, color: \"text-blue-500\", bg: \"bg-blue-50 dark:bg-blue-950\" };\n      case \"author\":\n        return { icon: UserIcon, color: \"text-green-500\", bg: \"bg-green-50 dark:bg-green-950\" };\n      default:\n        return { icon: UserIcon, color: \"text-gray-500\", bg: \"bg-gray-50 dark:bg-gray-950\" };\n    }\n  };\n\n  const selectedRole = form.watch(\"role\") || \"author\";\n  const roleInfo = getRoleInfo(selectedRole);\n  const RoleIcon = roleInfo.icon;\n\n  const isPending = createUserMutation.isPending || updateUserMutation.isPending;\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[500px]\">\n        <DialogHeader>\n          <DialogTitle>\n            {isEditing ? `Edit User: ${user?.displayName || user?.username}` : \"Create New User\"}\n          </DialogTitle>\n          <DialogDescription>\n            {isEditing \n              ? \"Update user information and permissions. Leave password fields empty to keep current password.\"\n              : \"Create a new user account with appropriate role and permissions.\"\n            }\n          </DialogDescription>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"username\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Username *</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"Enter username\" \n                        {...field}\n                        disabled={isPending}\n                        data-testid=\"input-username\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"displayName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Display Name</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"Enter display name\" \n                        {...field}\n                        value={field.value || \"\"}\n                        disabled={isPending}\n                        data-testid=\"input-display-name\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"email\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Email</FormLabel>\n                  <FormControl>\n                    <Input \n                      type=\"email\"\n                      placeholder=\"Enter email address\" \n                      {...field}\n                      value={field.value || \"\"}\n                      disabled={isPending}\n                      data-testid=\"input-email\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"role\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Role *</FormLabel>\n                  <Select onValueChange={field.onChange} defaultValue={field.value} disabled={isPending}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-user-role\">\n                        <SelectValue placeholder=\"Select user role\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"author\">\n                        <div className=\"flex items-center gap-2\">\n                          <UserIcon className=\"w-4 h-4 text-green-500\" />\n                          <span>Author</span>\n                          <Badge variant=\"secondary\" className=\"text-xs\">Can create posts</Badge>\n                        </div>\n                      </SelectItem>\n                      <SelectItem value=\"editor\">\n                        <div className=\"flex items-center gap-2\">\n                          <Shield className=\"w-4 h-4 text-blue-500\" />\n                          <span>Editor</span>\n                          <Badge variant=\"secondary\" className=\"text-xs\">Can edit all posts</Badge>\n                        </div>\n                      </SelectItem>\n                      <SelectItem value=\"admin\">\n                        <div className=\"flex items-center gap-2\">\n                          <Crown className=\"w-4 h-4 text-red-500\" />\n                          <span>Admin</span>\n                          <Badge variant=\"secondary\" className=\"text-xs\">Full access</Badge>\n                        </div>\n                      </SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {/* Role Preview */}\n            <div className={`p-3 rounded-lg border ${roleInfo.bg}`}>\n              <div className=\"flex items-center gap-2 mb-1\">\n                <RoleIcon className={`w-4 h-4 ${roleInfo.color}`} />\n                <span className=\"font-medium capitalize\">{selectedRole} Permissions</span>\n              </div>\n              <p className=\"text-sm text-muted-foreground\">\n                {selectedRole === \"admin\" && \"Full system access including user management, settings, and all content operations.\"}\n                {selectedRole === \"editor\" && \"Can create, edit, and manage all posts and content. Cannot manage users or system settings.\"}\n                {selectedRole === \"author\" && \"Can create and edit their own posts. Cannot edit others' content or access admin features.\"}\n              </p>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>\n                      Password {!isEditing && \"*\"}\n                      {isEditing && <span className=\"text-xs text-muted-foreground\">(leave empty to keep current)</span>}\n                    </FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"password\"\n                        placeholder={isEditing ? \"New password (optional)\" : \"Enter password\"} \n                        {...field}\n                        disabled={isPending}\n                        data-testid=\"input-password\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"confirmPassword\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>\n                      Confirm Password {!isEditing && \"*\"}\n                    </FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"password\"\n                        placeholder={isEditing ? \"Confirm new password\" : \"Confirm password\"} \n                        {...field}\n                        disabled={isPending}\n                        data-testid=\"input-confirm-password\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <DialogFooter>\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={() => onOpenChange(false)}\n                disabled={isPending}\n                data-testid=\"button-cancel-user-form\"\n              >\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={isPending}\n                data-testid=\"button-submit-user-form\"\n              >\n                {isPending ? (\n                  <>\n                    <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                    {isEditing ? \"Updating...\" : \"Creating...\"}\n                  </>\n                ) : (\n                  isEditing ? \"Update User\" : \"Create User\"\n                )}\n              </Button>\n            </DialogFooter>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":13196}},"version":1}